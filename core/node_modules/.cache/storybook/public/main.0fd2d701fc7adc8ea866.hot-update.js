webpackHotUpdate("main",{

/***/ "./src/components/box/Ancestor_Box.bs.js":
/*!***********************************************!*\
  !*** ./src/components/box/Ancestor_Box.bs.js ***!
  \***********************************************/
/*! no static exports found */
/*! all exports used */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
// Generated by ReScript, PLEASE EDIT WITH CARE


__webpack_require__(/*! ../node_modules/core-js/modules/es.number.to-fixed.js */ "../node_modules/core-js/modules/es.number.to-fixed.js");

__webpack_require__(/*! ../node_modules/core-js/modules/es.function.name.js */ "../node_modules/core-js/modules/es.function.name.js");

var Curry = __webpack_require__(/*! rescript/lib/js/curry.js */ "../node_modules/rescript/lib/js/curry.js");

var React = __webpack_require__(/*! react */ "../node_modules/react/index.js");

var Caml_option = __webpack_require__(/*! rescript/lib/js/caml_option.js */ "../node_modules/rescript/lib/js/caml_option.js");

var Ancestor_Base = __webpack_require__(/*! ../base/Ancestor_Base.bs.js */ "./src/components/base/Ancestor_Base.bs.js");

var Ancestor_Styles = __webpack_require__(/*! ../../core/Ancestor_Styles.bs.js */ "./src/core/Ancestor_Styles.bs.js");

function Make(Maker) {
  var Styles = Ancestor_Styles.Make(Maker);
  var Base = Ancestor_Base.Make(Maker);

  var basisFromFloat = function basisFromFloat(value) {
    var v = value;
    return (v * 100.0 / 12.0).toFixed(1) + "%";
  };

  var createBox = function createBox(columns, param) {
    return Curry._1(Maker.css, Curry._3(Styles.createResponsiveProp, columns, undefined, function (column) {
      return "width: " + basisFromFloat(column) + ";";
    }));
  };

  var Ancestor_Box$Make = function Ancestor_Box$Make(Props) {
    var borderRadius = Props.borderRadius;
    var borderTLRadius = Props.borderTLRadius;
    var borderTRRadius = Props.borderTRRadius;
    var borderBLRadius = Props.borderBLRadius;
    var borderBRRadius = Props.borderBRRadius;
    var borderStyle = Props.borderStyle;
    var borderColor = Props.borderColor;
    var borderWidth = Props.borderWidth;
    var borderRightStyle = Props.borderRightStyle;
    var borderLeftStyle = Props.borderLeftStyle;
    var borderTopStyle = Props.borderTopStyle;
    var borderBottomStyle = Props.borderBottomStyle;
    var borderRightColor = Props.borderRightColor;
    var borderLeftColor = Props.borderLeftColor;
    var borderTopColor = Props.borderTopColor;
    var borderBottomColor = Props.borderBottomColor;
    var borderRightWidth = Props.borderRightWidth;
    var borderLeftWidth = Props.borderLeftWidth;
    var borderTopWidth = Props.borderTopWidth;
    var borderBottomWidth = Props.borderBottomWidth;
    var border = Props.border;
    var borderRight = Props.borderRight;
    var borderLeft = Props.borderLeft;
    var borderTop = Props.borderTop;
    var borderBottom = Props.borderBottom;
    var bgColor = Props.bgColor;
    var bgSize = Props.bgSize;
    var bgPosition = Props.bgPosition;
    var bgImage = Props.bgImage;
    var color = Props.color;
    var display = Props.display;
    var justifyContent = Props.justifyContent;
    var flexDirection = Props.flexDirection;
    var alignItems = Props.alignItems;
    var flexBasis = Props.flexBasis;
    var flexWrap = Props.flexWrap;
    var flexGrow = Props.flexGrow;
    var alignContent = Props.alignContent;
    var alignSelf = Props.alignSelf;
    var justifySelf = Props.justifySelf;
    var flexFlow = Props.flexFlow;
    var gap = Props.gap;
    var p = Props.p;
    var px = Props.px;
    var py = Props.py;
    var pt = Props.pt;
    var pb = Props.pb;
    var pl = Props.pl;
    var pr = Props.pr;
    var m = Props.m;
    var mx = Props.mx;
    var my = Props.my;
    var mt = Props.mt;
    var mb = Props.mb;
    var ml = Props.ml;
    var mr = Props.mr;
    var textAlign = Props.textAlign;
    var fontWeight = Props.fontWeight;
    var fontSize = Props.fontSize;
    var letterSpacing = Props.letterSpacing;
    var lineHeight = Props.lineHeight;
    var width = Props.width;
    var height = Props.height;
    var minW = Props.minW;
    var minH = Props.minH;
    var maxW = Props.maxW;
    var maxH = Props.maxH;
    var position = Props.position;
    var top = Props.top;
    var bottom = Props.bottom;
    var left = Props.left;
    var right = Props.right;
    var zIndex = Props.zIndex;
    var boxSizing = Props.boxSizing;
    var overflow = Props.overflow;
    var overflowX = Props.overflowX;
    var overflowY = Props.overflowY;
    var cursor = Props.cursor;
    var visibility = Props.visibility;
    var listStyleType = Props.listStyleType;
    var listStylePosition = Props.listStylePosition;
    var listStyleImage = Props.listStyleImage;
    var listStyle = Props.listStyle;
    var outlineStyle = Props.outlineStyle;
    var outline = Props.outline;
    var textDecorationStyle = Props.textDecorationStyle;
    var textDecorationLine = Props.textDecorationLine;
    var textDecoration = Props.textDecoration;
    var transform = Props.transform;
    var columns = Props.columns;
    var children = Props.children;
    var dangerouslySetInnerHTML = Props.dangerouslySetInnerHTML;
    var innerRef = Props.innerRef;
    var classNameOpt = Props.className;
    var tagOpt = Props.tag;
    var id = Props.id;
    var onClick = Props.onClick;
    var onSubmit = Props.onSubmit;
    var onChange = Props.onChange;
    var src = Props.src;
    var alt = Props.alt;
    var ariaDetails = Props.ariaDetails;
    var ariaDisabled = Props.ariaDisabled;
    var ariaHidden = Props.ariaHidden;
    var ariaKeyshortcuts = Props.ariaKeyshortcuts;
    var ariaLabel = Props.ariaLabel;
    var ariaRoledescription = Props.ariaRoledescription;
    var ariaExpanded = Props.ariaExpanded;
    var ariaLevel = Props.ariaLevel;
    var ariaModal = Props.ariaModal;
    var ariaMultiline = Props.ariaMultiline;
    var ariaMultiselectable = Props.ariaMultiselectable;
    var ariaPlaceholder = Props.ariaPlaceholder;
    var ariaReadonly = Props.ariaReadonly;
    var ariaRequired = Props.ariaRequired;
    var ariaSelected = Props.ariaSelected;
    var ariaSort = Props.ariaSort;
    var ariaValuemax = Props.ariaValuemax;
    var ariaValuemin = Props.ariaValuemin;
    var ariaValuenow = Props.ariaValuenow;
    var ariaValuetext = Props.ariaValuetext;
    var ariaAtomic = Props.ariaAtomic;
    var ariaBusy = Props.ariaBusy;
    var ariaRelevant = Props.ariaRelevant;
    var ariaGrabbed = Props.ariaGrabbed;
    var ariaActivedescendant = Props.ariaActivedescendant;
    var ariaColcount = Props.ariaColcount;
    var ariaColindex = Props.ariaColindex;
    var ariaColspan = Props.ariaColspan;
    var ariaControls = Props.ariaControls;
    var ariaDescribedby = Props.ariaDescribedby;
    var ariaErrormessage = Props.ariaErrormessage;
    var ariaFlowto = Props.ariaFlowto;
    var ariaLabelledby = Props.ariaLabelledby;
    var ariaOwns = Props.ariaOwns;
    var ariaPosinset = Props.ariaPosinset;
    var ariaRowcount = Props.ariaRowcount;
    var ariaRowindex = Props.ariaRowindex;
    var ariaRowspan = Props.ariaRowspan;
    var ariaSetsize = Props.ariaSetsize;
    var defaultChecked = Props.defaultChecked;
    var defaultValue = Props.defaultValue;
    var accessKey = Props.accessKey;
    var contentEditable = Props.contentEditable;
    var contextMenu = Props.contextMenu;
    var lang = Props.lang;
    var role = Props.role;
    var style = Props.style;
    var spellCheck = Props.spellCheck;
    var tabIndex = Props.tabIndex;
    var title = Props.title;
    var itemID = Props.itemID;
    var itemProp = Props.itemProp;
    var itemRef = Props.itemRef;
    var itemScope = Props.itemScope;
    var itemType = Props.itemType;
    var accept = Props.accept;
    var acceptCharset = Props.acceptCharset;
    var action = Props.action;
    var allowFullScreen = Props.allowFullScreen;
    var async = Props.async;
    var autoComplete = Props.autoComplete;
    var autoCapitalize = Props.autoCapitalize;
    var autoFocus = Props.autoFocus;
    var autoPlay = Props.autoPlay;
    var challenge = Props.challenge;
    var charSet = Props.charSet;
    var checked = Props.checked;
    var cite = Props.cite;
    var crossOrigin = Props.crossOrigin;
    var cols = Props.cols;
    var colSpan = Props.colSpan;
    var content = Props.content;
    var controls = Props.controls;
    var coords = Props.coords;
    var data = Props.data;
    var dateTime = Props.dateTime;
    var $$default = Props["default"];
    var defer = Props.defer;
    var disabled = Props.disabled;
    var download = Props.download;
    var encType = Props.encType;
    var form = Props.form;
    var formAction = Props.formAction;
    var formTarget = Props.formTarget;
    var formMethod = Props.formMethod;
    var headers = Props.headers;
    var high = Props.high;
    var href = Props.href;
    var hrefLang = Props.hrefLang;
    var htmlFor = Props.htmlFor;
    var httpEquiv = Props.httpEquiv;
    var icon = Props.icon;
    var inputMode = Props.inputMode;
    var integrity = Props.integrity;
    var keyType = Props.keyType;
    var kind = Props.kind;
    var label = Props.label;
    var list = Props.list;
    var loop = Props.loop;
    var low = Props.low;
    var manifest = Props.manifest;
    var max = Props.max;
    var maxLength = Props.maxLength;
    var media = Props.media;
    var mediaGroup = Props.mediaGroup;
    var method = Props.method;
    var min = Props.min;
    var minLength = Props.minLength;
    var multiple = Props.multiple;
    var muted = Props.muted;
    var name = Props.name;
    var nonce = Props.nonce;
    var noValidate = Props.noValidate;
    var open_ = Props.open_;
    var optimum = Props.optimum;
    var pattern = Props.pattern;
    var placeholder = Props.placeholder;
    var playsInline = Props.playsInline;
    var poster = Props.poster;
    var preload = Props.preload;
    var radioGroup = Props.radioGroup;
    var readOnly = Props.readOnly;
    var rel = Props.rel;
    var required = Props.required;
    var reversed = Props.reversed;
    var rows = Props.rows;
    var rowSpan = Props.rowSpan;
    var sandbox = Props.sandbox;
    var scope = Props.scope;
    var scoped = Props.scoped;
    var scrolling = Props.scrolling;
    var selected = Props.selected;
    var shape = Props.shape;
    var size = Props.size;
    var sizes = Props.sizes;
    var span = Props.span;
    var srcDoc = Props.srcDoc;
    var srcLang = Props.srcLang;
    var srcSet = Props.srcSet;
    var start = Props.start;
    var step = Props.step;
    var summary = Props.summary;
    var target = Props.target;
    var type_ = Props.type_;
    var useMap = Props.useMap;
    var value = Props.value;
    var wrap = Props.wrap;
    var onCopy = Props.onCopy;
    var onCut = Props.onCut;
    var onPaste = Props.onPaste;
    var onCompositionEnd = Props.onCompositionEnd;
    var onCompositionStart = Props.onCompositionStart;
    var onCompositionUpdate = Props.onCompositionUpdate;
    var onKeyDown = Props.onKeyDown;
    var onKeyPress = Props.onKeyPress;
    var onKeyUp = Props.onKeyUp;
    var onFocus = Props.onFocus;
    var onBlur = Props.onBlur;
    var onInput = Props.onInput;
    var onInvalid = Props.onInvalid;
    var onContextMenu = Props.onContextMenu;
    var onDoubleClick = Props.onDoubleClick;
    var onDrag = Props.onDrag;
    var onDragEnd = Props.onDragEnd;
    var onDragEnter = Props.onDragEnter;
    var onDragExit = Props.onDragExit;
    var onDragLeave = Props.onDragLeave;
    var onDragOver = Props.onDragOver;
    var onDragStart = Props.onDragStart;
    var onDrop = Props.onDrop;
    var onMouseDown = Props.onMouseDown;
    var onMouseEnter = Props.onMouseEnter;
    var onMouseLeave = Props.onMouseLeave;
    var onMouseMove = Props.onMouseMove;
    var onMouseOut = Props.onMouseOut;
    var onMouseOver = Props.onMouseOver;
    var onMouseUp = Props.onMouseUp;
    var onSelect = Props.onSelect;
    var onTouchCancel = Props.onTouchCancel;
    var onTouchEnd = Props.onTouchEnd;
    var onTouchMove = Props.onTouchMove;
    var onTouchStart = Props.onTouchStart;
    var onPointerOver = Props.onPointerOver;
    var onPointerEnter = Props.onPointerEnter;
    var onPointerDown = Props.onPointerDown;
    var onPointerMove = Props.onPointerMove;
    var onPointerUp = Props.onPointerUp;
    var onPointerCancel = Props.onPointerCancel;
    var onPointerOut = Props.onPointerOut;
    var onPointerLeave = Props.onPointerLeave;
    var onGotPointerCapture = Props.onGotPointerCapture;
    var onLostPointerCapture = Props.onLostPointerCapture;
    var onScroll = Props.onScroll;
    var onWheel = Props.onWheel;
    var onAbort = Props.onAbort;
    var onCanPlay = Props.onCanPlay;
    var onCanPlayThrough = Props.onCanPlayThrough;
    var onDurationChange = Props.onDurationChange;
    var onEmptied = Props.onEmptied;
    var onEncrypetd = Props.onEncrypetd;
    var onEnded = Props.onEnded;
    var onError = Props.onError;
    var onLoadedData = Props.onLoadedData;
    var onLoadedMetadata = Props.onLoadedMetadata;
    var onLoadStart = Props.onLoadStart;
    var onPause = Props.onPause;
    var onPlay = Props.onPlay;
    var onPlaying = Props.onPlaying;
    var onProgress = Props.onProgress;
    var onRateChange = Props.onRateChange;
    var onSeeked = Props.onSeeked;
    var onSeeking = Props.onSeeking;
    var onStalled = Props.onStalled;
    var onSuspend = Props.onSuspend;
    var onTimeUpdate = Props.onTimeUpdate;
    var onVolumeChange = Props.onVolumeChange;
    var onWaiting = Props.onWaiting;
    var onLoad = Props.onLoad;
    var onAnimationStart = Props.onAnimationStart;
    var onAnimationEnd = Props.onAnimationEnd;
    var onAnimationIteration = Props.onAnimationIteration;
    var onTransitionEnd = Props.onTransitionEnd;
    var className = classNameOpt !== undefined ? classNameOpt : "";
    var tag = tagOpt !== undefined ? tagOpt : "div";
    var boxClassName = createBox(columns, undefined);
    var tmp = {
      tag: tag,
      className: boxClassName + " " + className
    };

    if (borderRadius !== undefined) {
      tmp.borderRadius = Caml_option.valFromOption(borderRadius);
    }

    if (borderTLRadius !== undefined) {
      tmp.borderTLRadius = Caml_option.valFromOption(borderTLRadius);
    }

    if (borderTRRadius !== undefined) {
      tmp.borderTRRadius = Caml_option.valFromOption(borderTRRadius);
    }

    if (borderBLRadius !== undefined) {
      tmp.borderBLRadius = Caml_option.valFromOption(borderBLRadius);
    }

    if (borderBRRadius !== undefined) {
      tmp.borderBRRadius = Caml_option.valFromOption(borderBRRadius);
    }

    if (borderStyle !== undefined) {
      tmp.borderStyle = Caml_option.valFromOption(borderStyle);
    }

    if (borderColor !== undefined) {
      tmp.borderColor = Caml_option.valFromOption(borderColor);
    }

    if (borderWidth !== undefined) {
      tmp.borderWidth = Caml_option.valFromOption(borderWidth);
    }

    if (borderRightStyle !== undefined) {
      tmp.borderRightStyle = Caml_option.valFromOption(borderRightStyle);
    }

    if (borderLeftStyle !== undefined) {
      tmp.borderLeftStyle = Caml_option.valFromOption(borderLeftStyle);
    }

    if (borderTopStyle !== undefined) {
      tmp.borderTopStyle = Caml_option.valFromOption(borderTopStyle);
    }

    if (borderBottomStyle !== undefined) {
      tmp.borderBottomStyle = Caml_option.valFromOption(borderBottomStyle);
    }

    if (borderRightColor !== undefined) {
      tmp.borderRightColor = Caml_option.valFromOption(borderRightColor);
    }

    if (borderLeftColor !== undefined) {
      tmp.borderLeftColor = Caml_option.valFromOption(borderLeftColor);
    }

    if (borderTopColor !== undefined) {
      tmp.borderTopColor = Caml_option.valFromOption(borderTopColor);
    }

    if (borderBottomColor !== undefined) {
      tmp.borderBottomColor = Caml_option.valFromOption(borderBottomColor);
    }

    if (borderRightWidth !== undefined) {
      tmp.borderRightWidth = Caml_option.valFromOption(borderRightWidth);
    }

    if (borderLeftWidth !== undefined) {
      tmp.borderLeftWidth = Caml_option.valFromOption(borderLeftWidth);
    }

    if (borderTopWidth !== undefined) {
      tmp.borderTopWidth = Caml_option.valFromOption(borderTopWidth);
    }

    if (borderBottomWidth !== undefined) {
      tmp.borderBottomWidth = Caml_option.valFromOption(borderBottomWidth);
    }

    if (border !== undefined) {
      tmp.border = Caml_option.valFromOption(border);
    }

    if (borderRight !== undefined) {
      tmp.borderRight = Caml_option.valFromOption(borderRight);
    }

    if (borderLeft !== undefined) {
      tmp.borderLeft = Caml_option.valFromOption(borderLeft);
    }

    if (borderTop !== undefined) {
      tmp.borderTop = Caml_option.valFromOption(borderTop);
    }

    if (borderBottom !== undefined) {
      tmp.borderBottom = Caml_option.valFromOption(borderBottom);
    }

    if (bgColor !== undefined) {
      tmp.bgColor = Caml_option.valFromOption(bgColor);
    }

    if (bgSize !== undefined) {
      tmp.bgSize = Caml_option.valFromOption(bgSize);
    }

    if (bgPosition !== undefined) {
      tmp.bgPosition = Caml_option.valFromOption(bgPosition);
    }

    if (bgImage !== undefined) {
      tmp.bgImage = Caml_option.valFromOption(bgImage);
    }

    if (color !== undefined) {
      tmp.color = Caml_option.valFromOption(color);
    }

    if (display !== undefined) {
      tmp.display = Caml_option.valFromOption(display);
    }

    if (justifyContent !== undefined) {
      tmp.justifyContent = Caml_option.valFromOption(justifyContent);
    }

    if (flexDirection !== undefined) {
      tmp.flexDirection = Caml_option.valFromOption(flexDirection);
    }

    if (alignItems !== undefined) {
      tmp.alignItems = Caml_option.valFromOption(alignItems);
    }

    if (flexBasis !== undefined) {
      tmp.flexBasis = Caml_option.valFromOption(flexBasis);
    }

    if (flexWrap !== undefined) {
      tmp.flexWrap = Caml_option.valFromOption(flexWrap);
    }

    if (flexGrow !== undefined) {
      tmp.flexGrow = Caml_option.valFromOption(flexGrow);
    }

    if (alignContent !== undefined) {
      tmp.alignContent = Caml_option.valFromOption(alignContent);
    }

    if (alignSelf !== undefined) {
      tmp.alignSelf = Caml_option.valFromOption(alignSelf);
    }

    if (justifySelf !== undefined) {
      tmp.justifySelf = Caml_option.valFromOption(justifySelf);
    }

    if (flexFlow !== undefined) {
      tmp.flexFlow = Caml_option.valFromOption(flexFlow);
    }

    if (gap !== undefined) {
      tmp.gap = Caml_option.valFromOption(gap);
    }

    if (p !== undefined) {
      tmp.p = Caml_option.valFromOption(p);
    }

    if (px !== undefined) {
      tmp.px = Caml_option.valFromOption(px);
    }

    if (py !== undefined) {
      tmp.py = Caml_option.valFromOption(py);
    }

    if (pt !== undefined) {
      tmp.pt = Caml_option.valFromOption(pt);
    }

    if (pb !== undefined) {
      tmp.pb = Caml_option.valFromOption(pb);
    }

    if (pl !== undefined) {
      tmp.pl = Caml_option.valFromOption(pl);
    }

    if (pr !== undefined) {
      tmp.pr = Caml_option.valFromOption(pr);
    }

    if (m !== undefined) {
      tmp.m = Caml_option.valFromOption(m);
    }

    if (mx !== undefined) {
      tmp.mx = Caml_option.valFromOption(mx);
    }

    if (my !== undefined) {
      tmp.my = Caml_option.valFromOption(my);
    }

    if (mt !== undefined) {
      tmp.mt = Caml_option.valFromOption(mt);
    }

    if (mb !== undefined) {
      tmp.mb = Caml_option.valFromOption(mb);
    }

    if (ml !== undefined) {
      tmp.ml = Caml_option.valFromOption(ml);
    }

    if (mr !== undefined) {
      tmp.mr = Caml_option.valFromOption(mr);
    }

    if (textAlign !== undefined) {
      tmp.textAlign = Caml_option.valFromOption(textAlign);
    }

    if (fontWeight !== undefined) {
      tmp.fontWeight = Caml_option.valFromOption(fontWeight);
    }

    if (fontSize !== undefined) {
      tmp.fontSize = Caml_option.valFromOption(fontSize);
    }

    if (letterSpacing !== undefined) {
      tmp.letterSpacing = Caml_option.valFromOption(letterSpacing);
    }

    if (lineHeight !== undefined) {
      tmp.lineHeight = Caml_option.valFromOption(lineHeight);
    }

    if (width !== undefined) {
      tmp.width = Caml_option.valFromOption(width);
    }

    if (height !== undefined) {
      tmp.height = Caml_option.valFromOption(height);
    }

    if (minW !== undefined) {
      tmp.minW = Caml_option.valFromOption(minW);
    }

    if (minH !== undefined) {
      tmp.minH = Caml_option.valFromOption(minH);
    }

    if (maxW !== undefined) {
      tmp.maxW = Caml_option.valFromOption(maxW);
    }

    if (maxH !== undefined) {
      tmp.maxH = Caml_option.valFromOption(maxH);
    }

    if (position !== undefined) {
      tmp.position = Caml_option.valFromOption(position);
    }

    if (top !== undefined) {
      tmp.top = Caml_option.valFromOption(top);
    }

    if (bottom !== undefined) {
      tmp.bottom = Caml_option.valFromOption(bottom);
    }

    if (left !== undefined) {
      tmp.left = Caml_option.valFromOption(left);
    }

    if (right !== undefined) {
      tmp.right = Caml_option.valFromOption(right);
    }

    if (zIndex !== undefined) {
      tmp.zIndex = Caml_option.valFromOption(zIndex);
    }

    if (boxSizing !== undefined) {
      tmp.boxSizing = Caml_option.valFromOption(boxSizing);
    }

    if (overflow !== undefined) {
      tmp.overflow = Caml_option.valFromOption(overflow);
    }

    if (overflowX !== undefined) {
      tmp.overflowX = Caml_option.valFromOption(overflowX);
    }

    if (overflowY !== undefined) {
      tmp.overflowY = Caml_option.valFromOption(overflowY);
    }

    if (cursor !== undefined) {
      tmp.cursor = Caml_option.valFromOption(cursor);
    }

    if (visibility !== undefined) {
      tmp.visibility = Caml_option.valFromOption(visibility);
    }

    if (listStyleType !== undefined) {
      tmp.listStyleType = Caml_option.valFromOption(listStyleType);
    }

    if (listStylePosition !== undefined) {
      tmp.listStylePosition = Caml_option.valFromOption(listStylePosition);
    }

    if (listStyleImage !== undefined) {
      tmp.listStyleImage = Caml_option.valFromOption(listStyleImage);
    }

    if (listStyle !== undefined) {
      tmp.listStyle = Caml_option.valFromOption(listStyle);
    }

    if (outlineStyle !== undefined) {
      tmp.outlineStyle = Caml_option.valFromOption(outlineStyle);
    }

    if (outline !== undefined) {
      tmp.outline = Caml_option.valFromOption(outline);
    }

    if (textDecorationStyle !== undefined) {
      tmp.textDecorationStyle = Caml_option.valFromOption(textDecorationStyle);
    }

    if (textDecorationLine !== undefined) {
      tmp.textDecorationLine = Caml_option.valFromOption(textDecorationLine);
    }

    if (textDecoration !== undefined) {
      tmp.textDecoration = Caml_option.valFromOption(textDecoration);
    }

    if (transform !== undefined) {
      tmp.transform = Caml_option.valFromOption(transform);
    }

    if (innerRef !== undefined) {
      tmp.innerRef = Caml_option.valFromOption(innerRef);
    }

    if (dangerouslySetInnerHTML !== undefined) {
      tmp.dangerouslySetInnerHTML = Caml_option.valFromOption(dangerouslySetInnerHTML);
    }

    if (children !== undefined) {
      tmp.children = Caml_option.valFromOption(children);
    }

    if (id !== undefined) {
      tmp.id = Caml_option.valFromOption(id);
    }

    if (onClick !== undefined) {
      tmp.onClick = Caml_option.valFromOption(onClick);
    }

    if (onSubmit !== undefined) {
      tmp.onSubmit = Caml_option.valFromOption(onSubmit);
    }

    if (onChange !== undefined) {
      tmp.onChange = Caml_option.valFromOption(onChange);
    }

    if (alt !== undefined) {
      tmp.alt = Caml_option.valFromOption(alt);
    }

    if (src !== undefined) {
      tmp.src = Caml_option.valFromOption(src);
    }

    if (ariaDetails !== undefined) {
      tmp.ariaDetails = Caml_option.valFromOption(ariaDetails);
    }

    if (ariaDisabled !== undefined) {
      tmp.ariaDisabled = Caml_option.valFromOption(ariaDisabled);
    }

    if (ariaHidden !== undefined) {
      tmp.ariaHidden = Caml_option.valFromOption(ariaHidden);
    }

    if (ariaKeyshortcuts !== undefined) {
      tmp.ariaKeyshortcuts = Caml_option.valFromOption(ariaKeyshortcuts);
    }

    if (ariaLabel !== undefined) {
      tmp.ariaLabel = Caml_option.valFromOption(ariaLabel);
    }

    if (ariaRoledescription !== undefined) {
      tmp.ariaRoledescription = Caml_option.valFromOption(ariaRoledescription);
    }

    if (ariaExpanded !== undefined) {
      tmp.ariaExpanded = Caml_option.valFromOption(ariaExpanded);
    }

    if (ariaLevel !== undefined) {
      tmp.ariaLevel = Caml_option.valFromOption(ariaLevel);
    }

    if (ariaModal !== undefined) {
      tmp.ariaModal = Caml_option.valFromOption(ariaModal);
    }

    if (ariaMultiline !== undefined) {
      tmp.ariaMultiline = Caml_option.valFromOption(ariaMultiline);
    }

    if (ariaMultiselectable !== undefined) {
      tmp.ariaMultiselectable = Caml_option.valFromOption(ariaMultiselectable);
    }

    if (ariaPlaceholder !== undefined) {
      tmp.ariaPlaceholder = Caml_option.valFromOption(ariaPlaceholder);
    }

    if (ariaReadonly !== undefined) {
      tmp.ariaReadonly = Caml_option.valFromOption(ariaReadonly);
    }

    if (ariaRequired !== undefined) {
      tmp.ariaRequired = Caml_option.valFromOption(ariaRequired);
    }

    if (ariaSelected !== undefined) {
      tmp.ariaSelected = Caml_option.valFromOption(ariaSelected);
    }

    if (ariaSort !== undefined) {
      tmp.ariaSort = Caml_option.valFromOption(ariaSort);
    }

    if (ariaValuemax !== undefined) {
      tmp.ariaValuemax = Caml_option.valFromOption(ariaValuemax);
    }

    if (ariaValuemin !== undefined) {
      tmp.ariaValuemin = Caml_option.valFromOption(ariaValuemin);
    }

    if (ariaValuenow !== undefined) {
      tmp.ariaValuenow = Caml_option.valFromOption(ariaValuenow);
    }

    if (ariaValuetext !== undefined) {
      tmp.ariaValuetext = Caml_option.valFromOption(ariaValuetext);
    }

    if (ariaAtomic !== undefined) {
      tmp.ariaAtomic = Caml_option.valFromOption(ariaAtomic);
    }

    if (ariaBusy !== undefined) {
      tmp.ariaBusy = Caml_option.valFromOption(ariaBusy);
    }

    if (ariaRelevant !== undefined) {
      tmp.ariaRelevant = Caml_option.valFromOption(ariaRelevant);
    }

    if (ariaGrabbed !== undefined) {
      tmp.ariaGrabbed = Caml_option.valFromOption(ariaGrabbed);
    }

    if (ariaActivedescendant !== undefined) {
      tmp.ariaActivedescendant = Caml_option.valFromOption(ariaActivedescendant);
    }

    if (ariaColcount !== undefined) {
      tmp.ariaColcount = Caml_option.valFromOption(ariaColcount);
    }

    if (ariaColindex !== undefined) {
      tmp.ariaColindex = Caml_option.valFromOption(ariaColindex);
    }

    if (ariaColspan !== undefined) {
      tmp.ariaColspan = Caml_option.valFromOption(ariaColspan);
    }

    if (ariaControls !== undefined) {
      tmp.ariaControls = Caml_option.valFromOption(ariaControls);
    }

    if (ariaDescribedby !== undefined) {
      tmp.ariaDescribedby = Caml_option.valFromOption(ariaDescribedby);
    }

    if (ariaErrormessage !== undefined) {
      tmp.ariaErrormessage = Caml_option.valFromOption(ariaErrormessage);
    }

    if (ariaFlowto !== undefined) {
      tmp.ariaFlowto = Caml_option.valFromOption(ariaFlowto);
    }

    if (ariaLabelledby !== undefined) {
      tmp.ariaLabelledby = Caml_option.valFromOption(ariaLabelledby);
    }

    if (ariaOwns !== undefined) {
      tmp.ariaOwns = Caml_option.valFromOption(ariaOwns);
    }

    if (ariaPosinset !== undefined) {
      tmp.ariaPosinset = Caml_option.valFromOption(ariaPosinset);
    }

    if (ariaRowcount !== undefined) {
      tmp.ariaRowcount = Caml_option.valFromOption(ariaRowcount);
    }

    if (ariaRowindex !== undefined) {
      tmp.ariaRowindex = Caml_option.valFromOption(ariaRowindex);
    }

    if (ariaRowspan !== undefined) {
      tmp.ariaRowspan = Caml_option.valFromOption(ariaRowspan);
    }

    if (ariaSetsize !== undefined) {
      tmp.ariaSetsize = Caml_option.valFromOption(ariaSetsize);
    }

    if (defaultChecked !== undefined) {
      tmp.defaultChecked = Caml_option.valFromOption(defaultChecked);
    }

    if (defaultValue !== undefined) {
      tmp.defaultValue = Caml_option.valFromOption(defaultValue);
    }

    if (accessKey !== undefined) {
      tmp.accessKey = Caml_option.valFromOption(accessKey);
    }

    if (contentEditable !== undefined) {
      tmp.contentEditable = Caml_option.valFromOption(contentEditable);
    }

    if (contextMenu !== undefined) {
      tmp.contextMenu = Caml_option.valFromOption(contextMenu);
    }

    if (lang !== undefined) {
      tmp.lang = Caml_option.valFromOption(lang);
    }

    if (role !== undefined) {
      tmp.role = Caml_option.valFromOption(role);
    }

    if (style !== undefined) {
      tmp.style = Caml_option.valFromOption(style);
    }

    if (spellCheck !== undefined) {
      tmp.spellCheck = Caml_option.valFromOption(spellCheck);
    }

    if (tabIndex !== undefined) {
      tmp.tabIndex = Caml_option.valFromOption(tabIndex);
    }

    if (title !== undefined) {
      tmp.title = Caml_option.valFromOption(title);
    }

    if (itemID !== undefined) {
      tmp.itemID = Caml_option.valFromOption(itemID);
    }

    if (itemProp !== undefined) {
      tmp.itemProp = Caml_option.valFromOption(itemProp);
    }

    if (itemRef !== undefined) {
      tmp.itemRef = Caml_option.valFromOption(itemRef);
    }

    if (itemScope !== undefined) {
      tmp.itemScope = Caml_option.valFromOption(itemScope);
    }

    if (itemType !== undefined) {
      tmp.itemType = Caml_option.valFromOption(itemType);
    }

    if (accept !== undefined) {
      tmp.accept = Caml_option.valFromOption(accept);
    }

    if (acceptCharset !== undefined) {
      tmp.acceptCharset = Caml_option.valFromOption(acceptCharset);
    }

    if (action !== undefined) {
      tmp.action = Caml_option.valFromOption(action);
    }

    if (allowFullScreen !== undefined) {
      tmp.allowFullScreen = Caml_option.valFromOption(allowFullScreen);
    }

    if (async !== undefined) {
      tmp.async = Caml_option.valFromOption(async);
    }

    if (autoComplete !== undefined) {
      tmp.autoComplete = Caml_option.valFromOption(autoComplete);
    }

    if (autoCapitalize !== undefined) {
      tmp.autoCapitalize = Caml_option.valFromOption(autoCapitalize);
    }

    if (autoFocus !== undefined) {
      tmp.autoFocus = Caml_option.valFromOption(autoFocus);
    }

    if (autoPlay !== undefined) {
      tmp.autoPlay = Caml_option.valFromOption(autoPlay);
    }

    if (challenge !== undefined) {
      tmp.challenge = Caml_option.valFromOption(challenge);
    }

    if (charSet !== undefined) {
      tmp.charSet = Caml_option.valFromOption(charSet);
    }

    if (checked !== undefined) {
      tmp.checked = Caml_option.valFromOption(checked);
    }

    if (cite !== undefined) {
      tmp.cite = Caml_option.valFromOption(cite);
    }

    if (crossOrigin !== undefined) {
      tmp.crossOrigin = Caml_option.valFromOption(crossOrigin);
    }

    if (cols !== undefined) {
      tmp.cols = Caml_option.valFromOption(cols);
    }

    if (colSpan !== undefined) {
      tmp.colSpan = Caml_option.valFromOption(colSpan);
    }

    if (content !== undefined) {
      tmp.content = Caml_option.valFromOption(content);
    }

    if (controls !== undefined) {
      tmp.controls = Caml_option.valFromOption(controls);
    }

    if (coords !== undefined) {
      tmp.coords = Caml_option.valFromOption(coords);
    }

    if (data !== undefined) {
      tmp.data = Caml_option.valFromOption(data);
    }

    if (dateTime !== undefined) {
      tmp.dateTime = Caml_option.valFromOption(dateTime);
    }

    if ($$default !== undefined) {
      tmp["default"] = Caml_option.valFromOption($$default);
    }

    if (defer !== undefined) {
      tmp.defer = Caml_option.valFromOption(defer);
    }

    if (disabled !== undefined) {
      tmp.disabled = Caml_option.valFromOption(disabled);
    }

    if (download !== undefined) {
      tmp.download = Caml_option.valFromOption(download);
    }

    if (encType !== undefined) {
      tmp.encType = Caml_option.valFromOption(encType);
    }

    if (form !== undefined) {
      tmp.form = Caml_option.valFromOption(form);
    }

    if (formAction !== undefined) {
      tmp.formAction = Caml_option.valFromOption(formAction);
    }

    if (formTarget !== undefined) {
      tmp.formTarget = Caml_option.valFromOption(formTarget);
    }

    if (formMethod !== undefined) {
      tmp.formMethod = Caml_option.valFromOption(formMethod);
    }

    if (headers !== undefined) {
      tmp.headers = Caml_option.valFromOption(headers);
    }

    if (high !== undefined) {
      tmp.high = Caml_option.valFromOption(high);
    }

    if (href !== undefined) {
      tmp.href = Caml_option.valFromOption(href);
    }

    if (hrefLang !== undefined) {
      tmp.hrefLang = Caml_option.valFromOption(hrefLang);
    }

    if (htmlFor !== undefined) {
      tmp.htmlFor = Caml_option.valFromOption(htmlFor);
    }

    if (httpEquiv !== undefined) {
      tmp.httpEquiv = Caml_option.valFromOption(httpEquiv);
    }

    if (icon !== undefined) {
      tmp.icon = Caml_option.valFromOption(icon);
    }

    if (inputMode !== undefined) {
      tmp.inputMode = Caml_option.valFromOption(inputMode);
    }

    if (integrity !== undefined) {
      tmp.integrity = Caml_option.valFromOption(integrity);
    }

    if (keyType !== undefined) {
      tmp.keyType = Caml_option.valFromOption(keyType);
    }

    if (kind !== undefined) {
      tmp.kind = Caml_option.valFromOption(kind);
    }

    if (label !== undefined) {
      tmp.label = Caml_option.valFromOption(label);
    }

    if (list !== undefined) {
      tmp.list = Caml_option.valFromOption(list);
    }

    if (loop !== undefined) {
      tmp.loop = Caml_option.valFromOption(loop);
    }

    if (low !== undefined) {
      tmp.low = Caml_option.valFromOption(low);
    }

    if (manifest !== undefined) {
      tmp.manifest = Caml_option.valFromOption(manifest);
    }

    if (max !== undefined) {
      tmp.max = Caml_option.valFromOption(max);
    }

    if (maxLength !== undefined) {
      tmp.maxLength = Caml_option.valFromOption(maxLength);
    }

    if (media !== undefined) {
      tmp.media = Caml_option.valFromOption(media);
    }

    if (mediaGroup !== undefined) {
      tmp.mediaGroup = Caml_option.valFromOption(mediaGroup);
    }

    if (method !== undefined) {
      tmp.method = Caml_option.valFromOption(method);
    }

    if (min !== undefined) {
      tmp.min = Caml_option.valFromOption(min);
    }

    if (minLength !== undefined) {
      tmp.minLength = Caml_option.valFromOption(minLength);
    }

    if (multiple !== undefined) {
      tmp.multiple = Caml_option.valFromOption(multiple);
    }

    if (muted !== undefined) {
      tmp.muted = Caml_option.valFromOption(muted);
    }

    if (name !== undefined) {
      tmp.name = Caml_option.valFromOption(name);
    }

    if (nonce !== undefined) {
      tmp.nonce = Caml_option.valFromOption(nonce);
    }

    if (noValidate !== undefined) {
      tmp.noValidate = Caml_option.valFromOption(noValidate);
    }

    if (open_ !== undefined) {
      tmp.open_ = Caml_option.valFromOption(open_);
    }

    if (optimum !== undefined) {
      tmp.optimum = Caml_option.valFromOption(optimum);
    }

    if (pattern !== undefined) {
      tmp.pattern = Caml_option.valFromOption(pattern);
    }

    if (placeholder !== undefined) {
      tmp.placeholder = Caml_option.valFromOption(placeholder);
    }

    if (playsInline !== undefined) {
      tmp.playsInline = Caml_option.valFromOption(playsInline);
    }

    if (poster !== undefined) {
      tmp.poster = Caml_option.valFromOption(poster);
    }

    if (preload !== undefined) {
      tmp.preload = Caml_option.valFromOption(preload);
    }

    if (radioGroup !== undefined) {
      tmp.radioGroup = Caml_option.valFromOption(radioGroup);
    }

    if (readOnly !== undefined) {
      tmp.readOnly = Caml_option.valFromOption(readOnly);
    }

    if (rel !== undefined) {
      tmp.rel = Caml_option.valFromOption(rel);
    }

    if (required !== undefined) {
      tmp.required = Caml_option.valFromOption(required);
    }

    if (reversed !== undefined) {
      tmp.reversed = Caml_option.valFromOption(reversed);
    }

    if (rows !== undefined) {
      tmp.rows = Caml_option.valFromOption(rows);
    }

    if (rowSpan !== undefined) {
      tmp.rowSpan = Caml_option.valFromOption(rowSpan);
    }

    if (sandbox !== undefined) {
      tmp.sandbox = Caml_option.valFromOption(sandbox);
    }

    if (scope !== undefined) {
      tmp.scope = Caml_option.valFromOption(scope);
    }

    if (scoped !== undefined) {
      tmp.scoped = Caml_option.valFromOption(scoped);
    }

    if (scrolling !== undefined) {
      tmp.scrolling = Caml_option.valFromOption(scrolling);
    }

    if (selected !== undefined) {
      tmp.selected = Caml_option.valFromOption(selected);
    }

    if (shape !== undefined) {
      tmp.shape = Caml_option.valFromOption(shape);
    }

    if (size !== undefined) {
      tmp.size = Caml_option.valFromOption(size);
    }

    if (sizes !== undefined) {
      tmp.sizes = Caml_option.valFromOption(sizes);
    }

    if (span !== undefined) {
      tmp.span = Caml_option.valFromOption(span);
    }

    if (srcDoc !== undefined) {
      tmp.srcDoc = Caml_option.valFromOption(srcDoc);
    }

    if (srcLang !== undefined) {
      tmp.srcLang = Caml_option.valFromOption(srcLang);
    }

    if (srcSet !== undefined) {
      tmp.srcSet = Caml_option.valFromOption(srcSet);
    }

    if (start !== undefined) {
      tmp.start = Caml_option.valFromOption(start);
    }

    if (step !== undefined) {
      tmp.step = Caml_option.valFromOption(step);
    }

    if (summary !== undefined) {
      tmp.summary = Caml_option.valFromOption(summary);
    }

    if (target !== undefined) {
      tmp.target = Caml_option.valFromOption(target);
    }

    if (type_ !== undefined) {
      tmp.type_ = Caml_option.valFromOption(type_);
    }

    if (useMap !== undefined) {
      tmp.useMap = Caml_option.valFromOption(useMap);
    }

    if (value !== undefined) {
      tmp.value = Caml_option.valFromOption(value);
    }

    if (wrap !== undefined) {
      tmp.wrap = Caml_option.valFromOption(wrap);
    }

    if (onCopy !== undefined) {
      tmp.onCopy = Caml_option.valFromOption(onCopy);
    }

    if (onCut !== undefined) {
      tmp.onCut = Caml_option.valFromOption(onCut);
    }

    if (onPaste !== undefined) {
      tmp.onPaste = Caml_option.valFromOption(onPaste);
    }

    if (onCompositionEnd !== undefined) {
      tmp.onCompositionEnd = Caml_option.valFromOption(onCompositionEnd);
    }

    if (onCompositionStart !== undefined) {
      tmp.onCompositionStart = Caml_option.valFromOption(onCompositionStart);
    }

    if (onCompositionUpdate !== undefined) {
      tmp.onCompositionUpdate = Caml_option.valFromOption(onCompositionUpdate);
    }

    if (onKeyDown !== undefined) {
      tmp.onKeyDown = Caml_option.valFromOption(onKeyDown);
    }

    if (onKeyPress !== undefined) {
      tmp.onKeyPress = Caml_option.valFromOption(onKeyPress);
    }

    if (onKeyUp !== undefined) {
      tmp.onKeyUp = Caml_option.valFromOption(onKeyUp);
    }

    if (onFocus !== undefined) {
      tmp.onFocus = Caml_option.valFromOption(onFocus);
    }

    if (onBlur !== undefined) {
      tmp.onBlur = Caml_option.valFromOption(onBlur);
    }

    if (onInput !== undefined) {
      tmp.onInput = Caml_option.valFromOption(onInput);
    }

    if (onInvalid !== undefined) {
      tmp.onInvalid = Caml_option.valFromOption(onInvalid);
    }

    if (onContextMenu !== undefined) {
      tmp.onContextMenu = Caml_option.valFromOption(onContextMenu);
    }

    if (onDoubleClick !== undefined) {
      tmp.onDoubleClick = Caml_option.valFromOption(onDoubleClick);
    }

    if (onDrag !== undefined) {
      tmp.onDrag = Caml_option.valFromOption(onDrag);
    }

    if (onDragEnd !== undefined) {
      tmp.onDragEnd = Caml_option.valFromOption(onDragEnd);
    }

    if (onDragEnter !== undefined) {
      tmp.onDragEnter = Caml_option.valFromOption(onDragEnter);
    }

    if (onDragExit !== undefined) {
      tmp.onDragExit = Caml_option.valFromOption(onDragExit);
    }

    if (onDragLeave !== undefined) {
      tmp.onDragLeave = Caml_option.valFromOption(onDragLeave);
    }

    if (onDragOver !== undefined) {
      tmp.onDragOver = Caml_option.valFromOption(onDragOver);
    }

    if (onDragStart !== undefined) {
      tmp.onDragStart = Caml_option.valFromOption(onDragStart);
    }

    if (onDrop !== undefined) {
      tmp.onDrop = Caml_option.valFromOption(onDrop);
    }

    if (onMouseDown !== undefined) {
      tmp.onMouseDown = Caml_option.valFromOption(onMouseDown);
    }

    if (onMouseEnter !== undefined) {
      tmp.onMouseEnter = Caml_option.valFromOption(onMouseEnter);
    }

    if (onMouseLeave !== undefined) {
      tmp.onMouseLeave = Caml_option.valFromOption(onMouseLeave);
    }

    if (onMouseMove !== undefined) {
      tmp.onMouseMove = Caml_option.valFromOption(onMouseMove);
    }

    if (onMouseOut !== undefined) {
      tmp.onMouseOut = Caml_option.valFromOption(onMouseOut);
    }

    if (onMouseOver !== undefined) {
      tmp.onMouseOver = Caml_option.valFromOption(onMouseOver);
    }

    if (onMouseUp !== undefined) {
      tmp.onMouseUp = Caml_option.valFromOption(onMouseUp);
    }

    if (onSelect !== undefined) {
      tmp.onSelect = Caml_option.valFromOption(onSelect);
    }

    if (onTouchCancel !== undefined) {
      tmp.onTouchCancel = Caml_option.valFromOption(onTouchCancel);
    }

    if (onTouchEnd !== undefined) {
      tmp.onTouchEnd = Caml_option.valFromOption(onTouchEnd);
    }

    if (onTouchMove !== undefined) {
      tmp.onTouchMove = Caml_option.valFromOption(onTouchMove);
    }

    if (onTouchStart !== undefined) {
      tmp.onTouchStart = Caml_option.valFromOption(onTouchStart);
    }

    if (onPointerOver !== undefined) {
      tmp.onPointerOver = Caml_option.valFromOption(onPointerOver);
    }

    if (onPointerEnter !== undefined) {
      tmp.onPointerEnter = Caml_option.valFromOption(onPointerEnter);
    }

    if (onPointerDown !== undefined) {
      tmp.onPointerDown = Caml_option.valFromOption(onPointerDown);
    }

    if (onPointerMove !== undefined) {
      tmp.onPointerMove = Caml_option.valFromOption(onPointerMove);
    }

    if (onPointerUp !== undefined) {
      tmp.onPointerUp = Caml_option.valFromOption(onPointerUp);
    }

    if (onPointerCancel !== undefined) {
      tmp.onPointerCancel = Caml_option.valFromOption(onPointerCancel);
    }

    if (onPointerOut !== undefined) {
      tmp.onPointerOut = Caml_option.valFromOption(onPointerOut);
    }

    if (onPointerLeave !== undefined) {
      tmp.onPointerLeave = Caml_option.valFromOption(onPointerLeave);
    }

    if (onGotPointerCapture !== undefined) {
      tmp.onGotPointerCapture = Caml_option.valFromOption(onGotPointerCapture);
    }

    if (onLostPointerCapture !== undefined) {
      tmp.onLostPointerCapture = Caml_option.valFromOption(onLostPointerCapture);
    }

    if (onScroll !== undefined) {
      tmp.onScroll = Caml_option.valFromOption(onScroll);
    }

    if (onWheel !== undefined) {
      tmp.onWheel = Caml_option.valFromOption(onWheel);
    }

    if (onAbort !== undefined) {
      tmp.onAbort = Caml_option.valFromOption(onAbort);
    }

    if (onCanPlay !== undefined) {
      tmp.onCanPlay = Caml_option.valFromOption(onCanPlay);
    }

    if (onCanPlayThrough !== undefined) {
      tmp.onCanPlayThrough = Caml_option.valFromOption(onCanPlayThrough);
    }

    if (onDurationChange !== undefined) {
      tmp.onDurationChange = Caml_option.valFromOption(onDurationChange);
    }

    if (onEmptied !== undefined) {
      tmp.onEmptied = Caml_option.valFromOption(onEmptied);
    }

    if (onEncrypetd !== undefined) {
      tmp.onEncrypetd = Caml_option.valFromOption(onEncrypetd);
    }

    if (onEnded !== undefined) {
      tmp.onEnded = Caml_option.valFromOption(onEnded);
    }

    if (onError !== undefined) {
      tmp.onError = Caml_option.valFromOption(onError);
    }

    if (onLoadedData !== undefined) {
      tmp.onLoadedData = Caml_option.valFromOption(onLoadedData);
    }

    if (onLoadedMetadata !== undefined) {
      tmp.onLoadedMetadata = Caml_option.valFromOption(onLoadedMetadata);
    }

    if (onLoadStart !== undefined) {
      tmp.onLoadStart = Caml_option.valFromOption(onLoadStart);
    }

    if (onPause !== undefined) {
      tmp.onPause = Caml_option.valFromOption(onPause);
    }

    if (onPlay !== undefined) {
      tmp.onPlay = Caml_option.valFromOption(onPlay);
    }

    if (onPlaying !== undefined) {
      tmp.onPlaying = Caml_option.valFromOption(onPlaying);
    }

    if (onProgress !== undefined) {
      tmp.onProgress = Caml_option.valFromOption(onProgress);
    }

    if (onRateChange !== undefined) {
      tmp.onRateChange = Caml_option.valFromOption(onRateChange);
    }

    if (onSeeked !== undefined) {
      tmp.onSeeked = Caml_option.valFromOption(onSeeked);
    }

    if (onSeeking !== undefined) {
      tmp.onSeeking = Caml_option.valFromOption(onSeeking);
    }

    if (onStalled !== undefined) {
      tmp.onStalled = Caml_option.valFromOption(onStalled);
    }

    if (onSuspend !== undefined) {
      tmp.onSuspend = Caml_option.valFromOption(onSuspend);
    }

    if (onTimeUpdate !== undefined) {
      tmp.onTimeUpdate = Caml_option.valFromOption(onTimeUpdate);
    }

    if (onVolumeChange !== undefined) {
      tmp.onVolumeChange = Caml_option.valFromOption(onVolumeChange);
    }

    if (onWaiting !== undefined) {
      tmp.onWaiting = Caml_option.valFromOption(onWaiting);
    }

    if (onLoad !== undefined) {
      tmp.onLoad = Caml_option.valFromOption(onLoad);
    }

    if (onAnimationStart !== undefined) {
      tmp.onAnimationStart = Caml_option.valFromOption(onAnimationStart);
    }

    if (onAnimationEnd !== undefined) {
      tmp.onAnimationEnd = Caml_option.valFromOption(onAnimationEnd);
    }

    if (onAnimationIteration !== undefined) {
      tmp.onAnimationIteration = Caml_option.valFromOption(onAnimationIteration);
    }

    if (onTransitionEnd !== undefined) {
      tmp.onTransitionEnd = Caml_option.valFromOption(onTransitionEnd);
    }

    return React.createElement(Base.make, tmp);
  };

  return {
    Styles: Styles,
    Base: Base,
    make: Ancestor_Box$Make
  };
}

exports.Make = Make;
/* react Not a pure module */

/***/ })

})
//# sourceMappingURL=main.0fd2d701fc7adc8ea866.hot-update.js.map