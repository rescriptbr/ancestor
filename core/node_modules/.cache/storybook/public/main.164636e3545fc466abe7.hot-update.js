webpackHotUpdate("main",{

/***/ "./src/core/css/Ancestor_Css.bs.js":
/*!*****************************************!*\
  !*** ./src/core/css/Ancestor_Css.bs.js ***!
  \*****************************************/
/*! no static exports found */
/*! all exports used */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
// Generated by ReScript, PLEASE EDIT WITH CARE


__webpack_require__(/*! ../node_modules/core-js/modules/es.object.to-string.js */ "../node_modules/core-js/modules/es.object.to-string.js");

__webpack_require__(/*! ../node_modules/core-js/modules/es.regexp.to-string.js */ "../node_modules/core-js/modules/es.regexp.to-string.js");

__webpack_require__(/*! ../node_modules/core-js/modules/es.date.to-string.js */ "../node_modules/core-js/modules/es.date.to-string.js");

var Curry = __webpack_require__(/*! rescript/lib/js/curry.js */ "../node_modules/rescript/lib/js/curry.js");

function toString(x) {
  if (typeof x !== "object") {
    return "0";
  }

  var variant = x.NAME;

  if (variant === "inch") {
    return x.VAL.toString() + "in";
  }

  if (variant === "mult") {
    var match = x.VAL;
    return "calc(" + toString(match[0]) + " * " + toString(match[1]) + ")";
  }

  if (variant === "vmax") {
    return x.VAL.toString() + "vmax";
  }

  if (variant === "vmin") {
    return x.VAL.toString() + "vmin";
  }

  if (variant === "ch") {
    return x.VAL.toString() + "ch";
  }

  if (variant === "cm") {
    return x.VAL.toString() + "cm";
  }

  if (variant === "em") {
    return x.VAL.toString() + "em";
  }

  if (variant === "ex") {
    return x.VAL.toString() + "ex";
  }

  if (variant === "mm") {
    return x.VAL.toString() + "mm";
  }

  if (variant === "pc") {
    return x.VAL.toString() + "pc";
  }

  if (variant === "pt") {
    return x.VAL.toString() + "pt";
  }

  if (variant === "px") {
    return x.VAL.toString() + "px";
  }

  if (variant === "vh") {
    return x.VAL.toString() + "vh";
  }

  if (variant === "vw") {
    return x.VAL.toString() + "vw";
  }

  if (variant === "add") {
    var match$1 = x.VAL;
    return "calc(" + toString(match$1[0]) + " + " + toString(match$1[1]) + ")";
  }

  if (variant === "div") {
    var match$2 = x.VAL;
    return "calc(" + toString(match$2[0]) + " / " + toString(match$2[1]) + ")";
  }

  if (variant === "pct") {
    return x.VAL.toString() + "%";
  }

  if (variant === "rem") {
    return x.VAL.toString() + "rem";
  }

  if (variant !== "sub") {
    return x.VAL.toString() + "px";
  }

  var match$3 = x.VAL;
  return "calc(" + toString(match$3[0]) + " - " + toString(match$3[1]) + ")";
}

var Length = {
  toString: toString
};

function Make(Config) {
  var toString$1 = function toString$1(color) {
    if (typeof color !== "object") {
      if (color === "transparent") {
        return "transparent";
      } else {
        return "currentColor";
      }
    }

    if (color.NAME !== "rgb") {
      return color.VAL;
    }

    var match = color.VAL;
    return "rgb(" + match[0].toString() + ", " + match[1].toString() + ", " + match[2].toString() + ")";
  };

  var Color = {
    toString: toString$1
  };

  var toString$2 = function toString$2(value) {
    if (value === "capitalize") {
      return "capitalize";
    } else if (value === "lowercase") {
      return "lowercase";
    } else if (value === "uppercase") {
      return "uppercase";
    } else {
      return "none";
    }
  };

  var TextTransform = {
    toString: toString$2
  };

  var toString$3 = function toString$3(textDecorationStyle) {
    return textDecorationStyle;
  };

  var TextDecorationStyle = {
    toString: toString$3
  };

  var toString$4 = function toString$4(value) {
    if (value === "none") {
      return "none";
    } else if (value === "line-through") {
      return "line-through";
    } else if (value === "underline") {
      return "underline";
    } else if (value === "blink") {
      return "blink";
    } else {
      return "overline";
    }
  };

  var TextDecorationLine = {
    toString: toString$4
  };

  var toString$5 = function toString$5(textDecoration) {
    if (typeof textDecoration !== "object") {
      if (textDecoration === "initial") {
        return "initial";
      } else if (textDecoration === "inherit") {
        return "inherit";
      } else {
        return "none";
      }
    }

    var match = textDecoration.VAL;
    return toString$4(match[0]) + " " + toString$1(match[1]) + " " + match[2];
  };

  var TextDecoration = {
    toString: toString$5
  };

  var toString$6 = function toString$6(outlineStyle) {
    return outlineStyle;
  };

  var OutlineStyle = {
    toString: toString$6
  };

  var toString$7 = function toString$7(outline) {
    if (typeof outline !== "object") {
      if (outline === "unset") {
        return "unset";
      } else if (outline === "inherit") {
        return "inherit";
      } else {
        return "initial";
      }
    }

    var match = outline.VAL;
    return toString(match[0]) + " " + match[1] + " " + toString$1(match[2]);
  };

  var Outline = {
    toString: toString$7
  };

  var toString$8 = function toString$8(listStyleType) {
    return listStyleType;
  };

  var ListStyleType = {
    toString: toString$8
  };

  var toString$9 = function toString$9(position) {
    return position;
  };

  var ListStylePosition = {
    toString: toString$9
  };

  var toString$10 = function toString$10(image) {
    if (typeof image === "object") {
      return "url(\"" + image.VAL + "\")";
    } else {
      return "none";
    }
  };

  var ListStyleImage = {
    toString: toString$10
  };

  var toString$11 = function toString$11(listStyle) {
    if (typeof listStyle !== "object") {
      if (listStyle === "initial") {
        return "initial";
      } else if (listStyle === "revert") {
        return "revert";
      } else if (listStyle === "unset") {
        return "unset";
      } else if (listStyle === "inherit") {
        return "inherit";
      } else {
        return "none";
      }
    }

    var variant = listStyle.NAME;

    if (variant === "type") {
      return listStyle.VAL;
    }

    if (variant !== "short") {
      if (variant === "image") {
        return toString$10(listStyle.VAL);
      } else {
        return listStyle.VAL;
      }
    }

    var match = listStyle.VAL;
    return match[0] + " " + match[1] + " " + toString$10(match[2]);
  };

  var ListStyle = {
    toString: toString$11
  };

  var toString$12 = function toString$12(overflow) {
    return overflow;
  };

  var Overflow = {
    toString: toString$12
  };

  var toString$13 = function toString$13(cursor) {
    return cursor;
  };

  var Cursor = {
    toString: toString$13
  };

  var toString$14 = function toString$14(visibility) {
    return visibility;
  };

  var Visibility = {
    toString: toString$14
  };

  var toString$15 = function toString$15(prim) {
    return prim;
  };

  var Display = {
    toString: toString$15
  };

  var toString$16 = function toString$16(prim) {
    return prim;
  };

  var JustifyContent = {
    toString: toString$16
  };

  var toString$17 = function toString$17(prim) {
    return prim;
  };

  var AlignItems = {
    toString: toString$17
  };

  var toString$18 = function toString$18(prim) {
    return prim;
  };

  var FlexDirection = {
    toString: toString$18
  };

  var toString$19 = function toString$19(prim) {
    return prim;
  };

  var FlexWrap = {
    toString: toString$19
  };

  var toString$20 = function toString$20(value) {
    if (typeof value === "object" && value.NAME === "length") {
      return toString(value.VAL);
    } else {
      return value;
    }
  };

  var FlexBasis = {
    toString: toString$20
  };

  var toString$21 = function toString$21(value) {
    if (typeof value === "object" && value.NAME === "num") {
      return value.VAL.toString();
    } else {
      return value;
    }
  };

  var FlexGrow = {
    toString: toString$21
  };

  var toString$22 = function toString$22(value) {
    if (value === "unsafe-center") {
      return "unsafe center";
    } else if (value === "last-baseline") {
      return "last baseline";
    } else if (value === "first-baseline") {
      return "first baseline";
    } else if (value === "safe-center") {
      return "safe center";
    } else {
      return value;
    }
  };

  var AlignContent = {
    toString: toString$22
  };

  var toString$23 = function toString$23(param) {
    return param[0] + " " + param[1];
  };

  var FlexFlow = {
    toString: toString$23
  };

  var toString$24 = function toString$24(gap) {
    if (typeof gap !== "object") {
      if (gap === "revert") {
        return "revert";
      } else if (gap === "unset") {
        return "unset";
      } else if (gap === "inherit") {
        return "inherit";
      } else {
        return "initial";
      }
    }

    if (gap.NAME !== "two") {
      return toString(Curry._1(Config.spacing, gap.VAL));
    }

    var match = gap.VAL;
    return toString(Curry._1(Config.spacing, match[0])) + " " + toString(Curry._1(Config.spacing, match[1]));
  };

  var Gap = {
    toString: toString$24
  };

  var toString$25 = function toString$25(prim) {
    return prim;
  };

  var Position = {
    toString: toString$25
  };

  var toString$26 = function toString$26(prim) {
    return prim;
  };

  var TextAlign = {
    toString: toString$26
  };

  var toString$27 = function toString$27(prim) {
    return prim;
  };

  var FontWeight = {
    toString: toString$27
  };

  var toString$28 = function toString$28(prim) {
    return prim;
  };

  var BoxSizing = {
    toString: toString$28
  };

  var toString$29 = function toString$29(prim) {
    return prim.toString();
  };

  var ZIndex = {
    toString: toString$29
  };

  var toString$30 = function toString$30(v) {
    return v;
  };

  var BorderStyle = {
    toString: toString$30
  };

  var toString$31 = function toString$31(param) {
    return toString(param[0]) + " " + param[1] + " " + toString$1(param[2]);
  };

  var Border = {
    toString: toString$31
  };

  var toString$32 = function toString$32(x) {
    var variant = x.NAME;

    if (variant === "turn") {
      return x.VAL.toString() + "turn";
    } else if (variant === "deg") {
      return x.VAL.toString() + "deg";
    } else if (variant === "rad") {
      return x.VAL.toString() + "rad";
    } else {
      return x.VAL.toString() + "grad";
    }
  };

  var Angle = {
    toString: toString$32
  };

  var string_of_scale = function string_of_scale(x, y) {
    return "scale(" + x.toString() + ", " + y.toString() + ")";
  };

  var string_of_translate3d = function string_of_translate3d(x, y, z) {
    return "translate3d(" + toString(x) + ", " + toString(y) + ", " + toString(z) + ")";
  };

  var toString$33 = function toString$33(x) {
    var variant = x.NAME;

    if (variant === "translate") {
      var match = x.VAL;
      return "translate(" + toString(match[0]) + ", " + toString(match[1]) + ")";
    }

    if (variant === "rotate") {
      return "rotate(" + toString$32(x.VAL) + ")";
    }

    if (variant === "skew") {
      var match$1 = x.VAL;
      return "skew(" + toString$32(match$1[0]) + ", " + toString$32(match$1[1]) + ")";
    }

    if (variant === "scale3d") {
      var match$2 = x.VAL;
      return "scale3d(" + match$2[0].toString() + ", " + match$2[1].toString() + ", " + match$2[2].toString() + ")";
    }

    if (variant === "rotateX") {
      return "rotateX(" + toString$32(x.VAL) + ")";
    }

    if (variant === "rotateY") {
      return "rotateY(" + toString$32(x.VAL) + ")";
    }

    if (variant === "rotateZ") {
      return "rotateZ(" + toString$32(x.VAL) + ")";
    }

    if (variant === "scale") {
      var match$3 = x.VAL;
      return string_of_scale(match$3[0], match$3[1]);
    }

    if (variant === "skewX") {
      return "skewX(" + toString$32(x.VAL) + ")";
    }

    if (variant === "skewY") {
      return "skewY(" + toString$32(x.VAL) + ")";
    }

    if (variant === "translateX") {
      return "translateX(" + toString(x.VAL) + ")";
    }

    if (variant === "translateY") {
      return "translateY(" + toString(x.VAL) + ")";
    }

    if (variant === "translateZ") {
      return "translateZ(" + toString(x.VAL) + ")";
    }

    if (variant === "rotate3d") {
      var match$4 = x.VAL;
      return "rotate3d(" + match$4[0].toString() + ", " + match$4[1].toString() + ", " + match$4[2].toString() + ", " + toString$32(match$4[3]) + ")";
    }

    if (variant !== "translate3d") {
      if (variant === "scaleX") {
        return "scaleX(" + x.VAL.toString() + ")";
      } else if (variant === "scaleY") {
        return "scaleY(" + x.VAL.toString() + ")";
      } else if (variant === "scaleZ") {
        return "scaleZ(" + x.VAL.toString();
      } else {
        return "perspective(" + x.VAL.toString() + ")";
      }
    }

    var match$5 = x.VAL;
    return string_of_translate3d(match$5[0], match$5[1], match$5[2]);
  };

  var Transform = {
    string_of_scale: string_of_scale,
    string_of_translate3d: string_of_translate3d,
    toString: toString$33
  };

  var toString$34 = function toString$34(bgSize) {
    if (typeof bgSize === "object") {
      return toString(bgSize.VAL);
    } else if (bgSize === "initial") {
      return "initial";
    } else if (bgSize === "size") {
      return "size";
    } else if (bgSize === "contain") {
      return "contain";
    } else if (bgSize === "unset") {
      return "unset";
    } else if (bgSize === "inherit") {
      return "inherit";
    } else {
      return "auto";
    }
  };

  var BackgroundSize = {
    toString: toString$34
  };

  var toString$35 = function toString$35(bgPosition) {
    if (typeof bgPosition === "object") {
      return toString(bgPosition.VAL);
    } else if (bgPosition === "initial") {
      return "initial";
    } else if (bgPosition === "bottom") {
      return "bottom";
    } else if (bgPosition === "right") {
      return "right";
    } else if (bgPosition === "top") {
      return "top";
    } else if (bgPosition === "center") {
      return "center";
    } else if (bgPosition === "unset") {
      return "unset";
    } else if (bgPosition === "inherit") {
      return "inherit";
    } else {
      return "left";
    }
  };

  var BackgroundPosition = {
    toString: toString$35
  };

  var toString$36 = function toString$36(bgImage) {
    return "url(\"" + bgImage.VAL + "\")";
  };

  var BackgroundImage = {
    toString: toString$36
  };
  return {
    Color: Color,
    Length: undefined,
    TextTransform: TextTransform,
    TextDecorationStyle: TextDecorationStyle,
    TextDecorationLine: TextDecorationLine,
    TextDecoration: TextDecoration,
    OutlineStyle: OutlineStyle,
    Outline: Outline,
    ListStyleType: ListStyleType,
    ListStylePosition: ListStylePosition,
    ListStyleImage: ListStyleImage,
    ListStyle: ListStyle,
    Overflow: Overflow,
    Cursor: Cursor,
    Visibility: Visibility,
    Display: Display,
    JustifyContent: JustifyContent,
    AlignItems: AlignItems,
    FlexDirection: FlexDirection,
    FlexWrap: FlexWrap,
    FlexBasis: FlexBasis,
    FlexGrow: FlexGrow,
    AlignContent: AlignContent,
    AlignSelf: undefined,
    JustifySelf: undefined,
    FlexFlow: FlexFlow,
    Gap: Gap,
    Position: Position,
    TextAlign: TextAlign,
    FontWeight: FontWeight,
    BoxSizing: BoxSizing,
    ZIndex: ZIndex,
    BorderStyle: BorderStyle,
    Border: Border,
    Angle: Angle,
    Transform: Transform,
    BackgroundSize: BackgroundSize,
    BackgroundPosition: BackgroundPosition,
    BackgroundImage: BackgroundImage
  };
}

exports.Length = Length;
exports.Make = Make;
/* No side effect */

/***/ })

})
//# sourceMappingURL=main.164636e3545fc466abe7.hot-update.js.map