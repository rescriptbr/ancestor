webpackHotUpdate("main",{

/***/ "./src/Ancestor.bs.js":
/*!****************************!*\
  !*** ./src/Ancestor.bs.js ***!
  \****************************/
/*! no static exports found */
/*! all exports used */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
// Generated by ReScript, PLEASE EDIT WITH CARE


var Css = __webpack_require__(/*! @emotion/css */ "../node_modules/@emotion/css/dist/emotion-css.esm.js");

var Ancestor_Core = __webpack_require__(/*! ./core/Ancestor_Core.bs.js */ "./src/core/Ancestor_Core.bs.js");

function sizeByBreakpoints(values) {
  var variant = values.NAME;

  if (variant === "md") {
    return 920;
  } else if (variant === "sm") {
    return 475;
  } else if (variant === "xl") {
    return 1920;
  } else if (variant === "xs") {
    return 0;
  } else {
    return 1280;
  }
}

function unboxBreakpointValue(values) {
  return values.VAL;
}

function css(prim) {
  return Css.css(prim);
}

var DefaultConfig = {
  spacing: 8.0,
  radius: 8.0,
  sizeByBreakpoints: sizeByBreakpoints,
  unboxBreakpointValue: unboxBreakpointValue,
  css: css
};
var include = Ancestor_Core.Make({
  spacing: 8.0,
  radius: 8.0,
  unboxBreakpointValue: unboxBreakpointValue,
  sizeByBreakpoints: sizeByBreakpoints,
  css: css
});

function xs(v) {
  return {
    NAME: "xs",
    VAL: v
  };
}

function sm(v) {
  return {
    NAME: "sm",
    VAL: v
  };
}

function md(v) {
  return {
    NAME: "md",
    VAL: v
  };
}

function lg(v) {
  return {
    NAME: "lg",
    VAL: v
  };
}

function xl(v) {
  return {
    NAME: "xl",
    VAL: v
  };
}

var Default_Styles = include.Styles;
var Default_Base = include.Base;
var Default_Box = include.Box;
var Default_Grid = include.Grid;
var Default_Hidden = include.Hidden;
var Default_CssTypes = include.CssTypes;
var Default_Spacing = include.Spacing;
var Default_Radius = include.Radius;
var Default_Typography = include.Typography;
var Default = {
  Styles: Default_Styles,
  Base: Default_Base,
  Box: Default_Box,
  Grid: Default_Grid,
  Hidden: Default_Hidden,
  CssTypes: Default_CssTypes,
  Spacing: Default_Spacing,
  Radius: Default_Radius,
  Typography: Default_Typography,
  xs: xs,
  sm: sm,
  md: md,
  lg: lg,
  xl: xl
};
var include$1 = Ancestor_Core.Make({
  spacing: 8.0,
  radius: 8.0,
  unboxBreakpointValue: unboxBreakpointValue,
  sizeByBreakpoints: sizeByBreakpoints,
  css: css
});

function xs$1(v) {
  return {
    NAME: "xs",
    VAL: v
  };
}

function sm$1(v) {
  return {
    NAME: "sm",
    VAL: v
  };
}

function md$1(v) {
  return {
    NAME: "md",
    VAL: v
  };
}

function lg$1(v) {
  return {
    NAME: "lg",
    VAL: v
  };
}

function xl$1(v) {
  return {
    NAME: "xl",
    VAL: v
  };
}

var Make = Ancestor_Core.Make;
var Styles = include$1.Styles;
var Base = include$1.Base;
var Box = include$1.Box;
var Grid = include$1.Grid;
var Hidden = include$1.Hidden;
var CssTypes = include$1.CssTypes;
var Spacing = include$1.Spacing;
var Radius = include$1.Radius;
var Typography = include$1.Typography;
exports.Make = Make;
exports.DefaultConfig = DefaultConfig;
exports.Default = Default;
exports.Styles = Styles;
exports.Base = Base;
exports.Box = Box;
exports.Grid = Grid;
exports.Hidden = Hidden;
exports.CssTypes = CssTypes;
exports.Spacing = Spacing;
exports.Radius = Radius;
exports.Typography = Typography;
exports.xs = xs$1;
exports.sm = sm$1;
exports.md = md$1;
exports.lg = lg$1;
exports.xl = xl$1;
/* include Not a pure module */

/***/ }),

/***/ "./src/components/base/Ancestor_Base.bs.js":
/*!*************************************************!*\
  !*** ./src/components/base/Ancestor_Base.bs.js ***!
  \*************************************************/
/*! no static exports found */
/*! all exports used */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
// Generated by ReScript, PLEASE EDIT WITH CARE


__webpack_require__(/*! ../node_modules/core-js/modules/es.function.name.js */ "../node_modules/core-js/modules/es.function.name.js");

var Curry = __webpack_require__(/*! rescript/lib/js/curry.js */ "../node_modules/rescript/lib/js/curry.js");

var React = __webpack_require__(/*! react */ "../node_modules/react/index.js");

var Caml_option = __webpack_require__(/*! rescript/lib/js/caml_option.js */ "../node_modules/rescript/lib/js/caml_option.js");

var Ancestor_Styles = __webpack_require__(/*! ../../core/Ancestor_Styles.bs.js */ "./src/core/Ancestor_Styles.bs.js");

function Make(Maker) {
  var Styles = Ancestor_Styles.Make(Maker);

  var Ancestor_Base$Make = function Ancestor_Base$Make(Props) {
    var borderRadius = Props.borderRadius;
    var borderTLRadius = Props.borderTLRadius;
    var borderTRRadius = Props.borderTRRadius;
    var borderBLRadius = Props.borderBLRadius;
    var borderBRRadius = Props.borderBRRadius;
    var borderStyle = Props.borderStyle;
    var borderColor = Props.borderColor;
    var borderWidth = Props.borderWidth;
    var borderRightStyle = Props.borderRightStyle;
    var borderLeftStyle = Props.borderLeftStyle;
    var borderTopStyle = Props.borderTopStyle;
    var borderBottomStyle = Props.borderBottomStyle;
    var borderRightColor = Props.borderRightColor;
    var borderLeftColor = Props.borderLeftColor;
    var borderTopColor = Props.borderTopColor;
    var borderBottomColor = Props.borderBottomColor;
    var borderRightWidth = Props.borderRightWidth;
    var borderLeftWidth = Props.borderLeftWidth;
    var borderTopWidth = Props.borderTopWidth;
    var borderBottomWidth = Props.borderBottomWidth;
    var border = Props.border;
    var borderRight = Props.borderRight;
    var borderLeft = Props.borderLeft;
    var borderTop = Props.borderTop;
    var borderBottom = Props.borderBottom;
    var bgColor = Props.bgColor;
    var bgSize = Props.bgSize;
    var bgPosition = Props.bgPosition;
    var bgImage = Props.bgImage;
    var color = Props.color;
    var display = Props.display;
    var justifyContent = Props.justifyContent;
    var flexDirection = Props.flexDirection;
    var alignItems = Props.alignItems;
    var flexBasis = Props.flexBasis;
    var flexWrap = Props.flexWrap;
    var flexGrow = Props.flexGrow;
    var alignContent = Props.alignContent;
    var alignSelf = Props.alignSelf;
    var justifySelf = Props.justifySelf;
    var flexFlow = Props.flexFlow;
    var gap = Props.gap;
    var p = Props.p;
    var px = Props.px;
    var py = Props.py;
    var pt = Props.pt;
    var pb = Props.pb;
    var pl = Props.pl;
    var pr = Props.pr;
    var m = Props.m;
    var mx = Props.mx;
    var my = Props.my;
    var mt = Props.mt;
    var mb = Props.mb;
    var ml = Props.ml;
    var mr = Props.mr;
    var textAlign = Props.textAlign;
    var fontWeight = Props.fontWeight;
    var fontSize = Props.fontSize;
    var letterSpacing = Props.letterSpacing;
    var lineHeight = Props.lineHeight;
    var width = Props.width;
    var height = Props.height;
    var minW = Props.minW;
    var minH = Props.minH;
    var maxW = Props.maxW;
    var maxH = Props.maxH;
    var position = Props.position;
    var top = Props.top;
    var bottom = Props.bottom;
    var left = Props.left;
    var right = Props.right;
    var zIndex = Props.zIndex;
    var boxSizing = Props.boxSizing;
    var overflow = Props.overflow;
    var overflowX = Props.overflowX;
    var overflowY = Props.overflowY;
    var cursor = Props.cursor;
    var visibility = Props.visibility;
    var listStyleType = Props.listStyleType;
    var listStylePosition = Props.listStylePosition;
    var listStyleImage = Props.listStyleImage;
    var listStyle = Props.listStyle;
    var outlineStyle = Props.outlineStyle;
    var outline = Props.outline;
    var textDecorationStyle = Props.textDecorationStyle;
    var textDecorationLine = Props.textDecorationLine;
    var textDecoration = Props.textDecoration;
    var transform = Props.transform;
    var tagOpt = Props.tag;
    var innerRef = Props.innerRef;
    var dangerouslySetInnerHTML = Props.dangerouslySetInnerHTML;
    var classNameOpt = Props.className;
    var children = Props.children;
    var id = Props.id;
    var onClick = Props.onClick;
    var onSubmit = Props.onSubmit;
    var onChange = Props.onChange;
    var alt = Props.alt;
    var src = Props.src;
    var ariaDetails = Props.ariaDetails;
    var ariaDisabled = Props.ariaDisabled;
    var ariaHidden = Props.ariaHidden;
    var ariaKeyshortcuts = Props.ariaKeyshortcuts;
    var ariaLabel = Props.ariaLabel;
    var ariaRoledescription = Props.ariaRoledescription;
    var ariaExpanded = Props.ariaExpanded;
    var ariaLevel = Props.ariaLevel;
    var ariaModal = Props.ariaModal;
    var ariaMultiline = Props.ariaMultiline;
    var ariaMultiselectable = Props.ariaMultiselectable;
    var ariaPlaceholder = Props.ariaPlaceholder;
    var ariaReadonly = Props.ariaReadonly;
    var ariaRequired = Props.ariaRequired;
    var ariaSelected = Props.ariaSelected;
    var ariaSort = Props.ariaSort;
    var ariaValuemax = Props.ariaValuemax;
    var ariaValuemin = Props.ariaValuemin;
    var ariaValuenow = Props.ariaValuenow;
    var ariaValuetext = Props.ariaValuetext;
    var ariaAtomic = Props.ariaAtomic;
    var ariaBusy = Props.ariaBusy;
    var ariaRelevant = Props.ariaRelevant;
    var ariaGrabbed = Props.ariaGrabbed;
    var ariaActivedescendant = Props.ariaActivedescendant;
    var ariaColcount = Props.ariaColcount;
    var ariaColindex = Props.ariaColindex;
    var ariaColspan = Props.ariaColspan;
    var ariaControls = Props.ariaControls;
    var ariaDescribedby = Props.ariaDescribedby;
    var ariaErrormessage = Props.ariaErrormessage;
    var ariaFlowto = Props.ariaFlowto;
    var ariaLabelledby = Props.ariaLabelledby;
    var ariaOwns = Props.ariaOwns;
    var ariaPosinset = Props.ariaPosinset;
    var ariaRowcount = Props.ariaRowcount;
    var ariaRowindex = Props.ariaRowindex;
    var ariaRowspan = Props.ariaRowspan;
    var ariaSetsize = Props.ariaSetsize;
    var defaultChecked = Props.defaultChecked;
    var defaultValue = Props.defaultValue;
    var accessKey = Props.accessKey;
    var contentEditable = Props.contentEditable;
    var contextMenu = Props.contextMenu;
    var lang = Props.lang;
    var role = Props.role;
    var style = Props.style;
    var spellCheck = Props.spellCheck;
    var tabIndex = Props.tabIndex;
    var title = Props.title;
    var itemID = Props.itemID;
    var itemProp = Props.itemProp;
    var itemRef = Props.itemRef;
    var itemScope = Props.itemScope;
    var itemType = Props.itemType;
    var accept = Props.accept;
    var acceptCharset = Props.acceptCharset;
    var action = Props.action;
    var allowFullScreen = Props.allowFullScreen;
    var async = Props.async;
    var autoComplete = Props.autoComplete;
    var autoCapitalize = Props.autoCapitalize;
    var autoFocus = Props.autoFocus;
    var autoPlay = Props.autoPlay;
    var challenge = Props.challenge;
    var charSet = Props.charSet;
    var checked = Props.checked;
    var cite = Props.cite;
    var crossOrigin = Props.crossOrigin;
    var cols = Props.cols;
    var colSpan = Props.colSpan;
    var content = Props.content;
    var controls = Props.controls;
    var coords = Props.coords;
    var data = Props.data;
    var dateTime = Props.dateTime;
    var $$default = Props["default"];
    var defer = Props.defer;
    var disabled = Props.disabled;
    var download = Props.download;
    var encType = Props.encType;
    var form = Props.form;
    var formAction = Props.formAction;
    var formTarget = Props.formTarget;
    var formMethod = Props.formMethod;
    var headers = Props.headers;
    var high = Props.high;
    var href = Props.href;
    var hrefLang = Props.hrefLang;
    var htmlFor = Props.htmlFor;
    var httpEquiv = Props.httpEquiv;
    var icon = Props.icon;
    var inputMode = Props.inputMode;
    var integrity = Props.integrity;
    var keyType = Props.keyType;
    var kind = Props.kind;
    var label = Props.label;
    var list = Props.list;
    var loop = Props.loop;
    var low = Props.low;
    var manifest = Props.manifest;
    var max = Props.max;
    var maxLength = Props.maxLength;
    var media = Props.media;
    var mediaGroup = Props.mediaGroup;
    var method = Props.method;
    var min = Props.min;
    var minLength = Props.minLength;
    var multiple = Props.multiple;
    var muted = Props.muted;
    var name = Props.name;
    var nonce = Props.nonce;
    var noValidate = Props.noValidate;
    var open_ = Props.open_;
    var optimum = Props.optimum;
    var pattern = Props.pattern;
    var placeholder = Props.placeholder;
    var playsInline = Props.playsInline;
    var poster = Props.poster;
    var preload = Props.preload;
    var radioGroup = Props.radioGroup;
    var readOnly = Props.readOnly;
    var rel = Props.rel;
    var required = Props.required;
    var reversed = Props.reversed;
    var rows = Props.rows;
    var rowSpan = Props.rowSpan;
    var sandbox = Props.sandbox;
    var scope = Props.scope;
    var scoped = Props.scoped;
    var scrolling = Props.scrolling;
    var selected = Props.selected;
    var shape = Props.shape;
    var size = Props.size;
    var sizes = Props.sizes;
    var span = Props.span;
    var srcDoc = Props.srcDoc;
    var srcLang = Props.srcLang;
    var srcSet = Props.srcSet;
    var start = Props.start;
    var step = Props.step;
    var summary = Props.summary;
    var target = Props.target;
    var type_ = Props.type_;
    var useMap = Props.useMap;
    var value = Props.value;
    var wrap = Props.wrap;
    var onCopy = Props.onCopy;
    var onCut = Props.onCut;
    var onPaste = Props.onPaste;
    var onCompositionEnd = Props.onCompositionEnd;
    var onCompositionStart = Props.onCompositionStart;
    var onCompositionUpdate = Props.onCompositionUpdate;
    var onKeyDown = Props.onKeyDown;
    var onKeyPress = Props.onKeyPress;
    var onKeyUp = Props.onKeyUp;
    var onFocus = Props.onFocus;
    var onBlur = Props.onBlur;
    var onInput = Props.onInput;
    var onInvalid = Props.onInvalid;
    var onContextMenu = Props.onContextMenu;
    var onDoubleClick = Props.onDoubleClick;
    var onDrag = Props.onDrag;
    var onDragEnd = Props.onDragEnd;
    var onDragEnter = Props.onDragEnter;
    var onDragExit = Props.onDragExit;
    var onDragLeave = Props.onDragLeave;
    var onDragOver = Props.onDragOver;
    var onDragStart = Props.onDragStart;
    var onDrop = Props.onDrop;
    var onMouseDown = Props.onMouseDown;
    var onMouseEnter = Props.onMouseEnter;
    var onMouseLeave = Props.onMouseLeave;
    var onMouseMove = Props.onMouseMove;
    var onMouseOut = Props.onMouseOut;
    var onMouseOver = Props.onMouseOver;
    var onMouseUp = Props.onMouseUp;
    var onSelect = Props.onSelect;
    var onTouchCancel = Props.onTouchCancel;
    var onTouchEnd = Props.onTouchEnd;
    var onTouchMove = Props.onTouchMove;
    var onTouchStart = Props.onTouchStart;
    var onPointerOver = Props.onPointerOver;
    var onPointerEnter = Props.onPointerEnter;
    var onPointerDown = Props.onPointerDown;
    var onPointerMove = Props.onPointerMove;
    var onPointerUp = Props.onPointerUp;
    var onPointerCancel = Props.onPointerCancel;
    var onPointerOut = Props.onPointerOut;
    var onPointerLeave = Props.onPointerLeave;
    var onGotPointerCapture = Props.onGotPointerCapture;
    var onLostPointerCapture = Props.onLostPointerCapture;
    var onScroll = Props.onScroll;
    var onWheel = Props.onWheel;
    var onAbort = Props.onAbort;
    var onCanPlay = Props.onCanPlay;
    var onCanPlayThrough = Props.onCanPlayThrough;
    var onDurationChange = Props.onDurationChange;
    var onEmptied = Props.onEmptied;
    var onEncrypetd = Props.onEncrypetd;
    var onEnded = Props.onEnded;
    var onError = Props.onError;
    var onLoadedData = Props.onLoadedData;
    var onLoadedMetadata = Props.onLoadedMetadata;
    var onLoadStart = Props.onLoadStart;
    var onPause = Props.onPause;
    var onPlay = Props.onPlay;
    var onPlaying = Props.onPlaying;
    var onProgress = Props.onProgress;
    var onRateChange = Props.onRateChange;
    var onSeeked = Props.onSeeked;
    var onSeeking = Props.onSeeking;
    var onStalled = Props.onStalled;
    var onSuspend = Props.onSuspend;
    var onTimeUpdate = Props.onTimeUpdate;
    var onVolumeChange = Props.onVolumeChange;
    var onWaiting = Props.onWaiting;
    var onLoad = Props.onLoad;
    var onAnimationStart = Props.onAnimationStart;
    var onAnimationEnd = Props.onAnimationEnd;
    var onAnimationIteration = Props.onAnimationIteration;
    var onTransitionEnd = Props.onTransitionEnd;
    var tag = tagOpt !== undefined ? tagOpt : "div";
    var className = classNameOpt !== undefined ? classNameOpt : "";

    var responsiveStyles = Curry._1(Maker.css, Curry.app(Styles.createResponsiveStyles, [borderRadius, borderTLRadius, borderTRRadius, borderBLRadius, borderBRRadius, borderStyle, borderColor, borderWidth, border, borderRight, borderLeft, borderTop, borderBottom, borderRightStyle, borderLeftStyle, borderTopStyle, borderBottomStyle, borderRightColor, borderLeftColor, borderTopColor, borderBottomColor, borderRightWidth, borderLeftWidth, borderTopWidth, borderBottomWidth, bgColor, bgSize, bgPosition, bgImage, color, display, justifyContent, flexDirection, alignItems, flexBasis, flexWrap, flexGrow, alignContent, alignSelf, justifySelf, flexFlow, gap, p, px, py, pt, pb, pl, pr, m, mx, my, mt, mb, ml, mr, textAlign, fontWeight, fontSize, letterSpacing, lineHeight, width, height, minW, minH, maxW, maxH, position, top, bottom, left, right, zIndex, boxSizing, overflow, overflowX, overflowY, cursor, visibility, listStyleType, listStylePosition, listStyleImage, listStyle, outlineStyle, outline, textDecorationStyle, textDecorationLine, textDecoration, transform, undefined]));

    var tmp = {
      className: className + " " + responsiveStyles
    };

    if (innerRef !== undefined) {
      tmp.ref = Caml_option.valFromOption(innerRef);
    }

    if (ariaDetails !== undefined) {
      tmp["aria-details"] = Caml_option.valFromOption(ariaDetails);
    }

    if (ariaDisabled !== undefined) {
      tmp["aria-disabled"] = Caml_option.valFromOption(ariaDisabled);
    }

    if (ariaHidden !== undefined) {
      tmp["aria-hidden"] = Caml_option.valFromOption(ariaHidden);
    }

    if (ariaKeyshortcuts !== undefined) {
      tmp["aria-keyshortcuts"] = Caml_option.valFromOption(ariaKeyshortcuts);
    }

    if (ariaLabel !== undefined) {
      tmp["aria-label"] = Caml_option.valFromOption(ariaLabel);
    }

    if (ariaRoledescription !== undefined) {
      tmp["aria-roledescription"] = Caml_option.valFromOption(ariaRoledescription);
    }

    if (ariaExpanded !== undefined) {
      tmp["aria-expanded"] = Caml_option.valFromOption(ariaExpanded);
    }

    if (ariaLevel !== undefined) {
      tmp["aria-level"] = Caml_option.valFromOption(ariaLevel);
    }

    if (ariaModal !== undefined) {
      tmp["aria-modal"] = Caml_option.valFromOption(ariaModal);
    }

    if (ariaMultiline !== undefined) {
      tmp["aria-multiline"] = Caml_option.valFromOption(ariaMultiline);
    }

    if (ariaMultiselectable !== undefined) {
      tmp["aria-multiselectable"] = Caml_option.valFromOption(ariaMultiselectable);
    }

    if (ariaPlaceholder !== undefined) {
      tmp["aria-placeholder"] = Caml_option.valFromOption(ariaPlaceholder);
    }

    if (ariaReadonly !== undefined) {
      tmp["aria-readonly"] = Caml_option.valFromOption(ariaReadonly);
    }

    if (ariaRequired !== undefined) {
      tmp["aria-required"] = Caml_option.valFromOption(ariaRequired);
    }

    if (ariaSelected !== undefined) {
      tmp["aria-selected"] = Caml_option.valFromOption(ariaSelected);
    }

    if (ariaSort !== undefined) {
      tmp["aria-sort"] = Caml_option.valFromOption(ariaSort);
    }

    if (ariaValuemax !== undefined) {
      tmp["aria-valuemax"] = Caml_option.valFromOption(ariaValuemax);
    }

    if (ariaValuemin !== undefined) {
      tmp["aria-valuemin"] = Caml_option.valFromOption(ariaValuemin);
    }

    if (ariaValuenow !== undefined) {
      tmp["aria-valuenow"] = Caml_option.valFromOption(ariaValuenow);
    }

    if (ariaValuetext !== undefined) {
      tmp["aria-valuetext"] = Caml_option.valFromOption(ariaValuetext);
    }

    if (ariaAtomic !== undefined) {
      tmp["aria-atomic"] = Caml_option.valFromOption(ariaAtomic);
    }

    if (ariaBusy !== undefined) {
      tmp["aria-busy"] = Caml_option.valFromOption(ariaBusy);
    }

    if (ariaRelevant !== undefined) {
      tmp["aria-relevant"] = Caml_option.valFromOption(ariaRelevant);
    }

    if (ariaGrabbed !== undefined) {
      tmp["aria-grabbed"] = Caml_option.valFromOption(ariaGrabbed);
    }

    if (ariaActivedescendant !== undefined) {
      tmp["aria-activedescendant"] = Caml_option.valFromOption(ariaActivedescendant);
    }

    if (ariaColcount !== undefined) {
      tmp["aria-colcount"] = Caml_option.valFromOption(ariaColcount);
    }

    if (ariaColindex !== undefined) {
      tmp["aria-colindex"] = Caml_option.valFromOption(ariaColindex);
    }

    if (ariaColspan !== undefined) {
      tmp["aria-colspan"] = Caml_option.valFromOption(ariaColspan);
    }

    if (ariaControls !== undefined) {
      tmp["aria-controls"] = Caml_option.valFromOption(ariaControls);
    }

    if (ariaDescribedby !== undefined) {
      tmp["aria-describedby"] = Caml_option.valFromOption(ariaDescribedby);
    }

    if (ariaErrormessage !== undefined) {
      tmp["aria-errormessage"] = Caml_option.valFromOption(ariaErrormessage);
    }

    if (ariaFlowto !== undefined) {
      tmp["aria-flowto"] = Caml_option.valFromOption(ariaFlowto);
    }

    if (ariaLabelledby !== undefined) {
      tmp["aria-labelledby"] = Caml_option.valFromOption(ariaLabelledby);
    }

    if (ariaOwns !== undefined) {
      tmp["aria-owns"] = Caml_option.valFromOption(ariaOwns);
    }

    if (ariaPosinset !== undefined) {
      tmp["aria-posinset"] = Caml_option.valFromOption(ariaPosinset);
    }

    if (ariaRowcount !== undefined) {
      tmp["aria-rowcount"] = Caml_option.valFromOption(ariaRowcount);
    }

    if (ariaRowindex !== undefined) {
      tmp["aria-rowindex"] = Caml_option.valFromOption(ariaRowindex);
    }

    if (ariaRowspan !== undefined) {
      tmp["aria-rowspan"] = Caml_option.valFromOption(ariaRowspan);
    }

    if (ariaSetsize !== undefined) {
      tmp["aria-setsize"] = Caml_option.valFromOption(ariaSetsize);
    }

    if (defaultChecked !== undefined) {
      tmp.defaultChecked = Caml_option.valFromOption(defaultChecked);
    }

    if (defaultValue !== undefined) {
      tmp.defaultValue = Caml_option.valFromOption(defaultValue);
    }

    if (accessKey !== undefined) {
      tmp.accessKey = Caml_option.valFromOption(accessKey);
    }

    if (contentEditable !== undefined) {
      tmp.contentEditable = Caml_option.valFromOption(contentEditable);
    }

    if (contextMenu !== undefined) {
      tmp.contextMenu = Caml_option.valFromOption(contextMenu);
    }

    if (id !== undefined) {
      tmp.id = Caml_option.valFromOption(id);
    }

    if (lang !== undefined) {
      tmp.lang = Caml_option.valFromOption(lang);
    }

    if (role !== undefined) {
      tmp.role = Caml_option.valFromOption(role);
    }

    if (style !== undefined) {
      tmp.style = Caml_option.valFromOption(style);
    }

    if (spellCheck !== undefined) {
      tmp.spellCheck = Caml_option.valFromOption(spellCheck);
    }

    if (tabIndex !== undefined) {
      tmp.tabIndex = Caml_option.valFromOption(tabIndex);
    }

    if (title !== undefined) {
      tmp.title = Caml_option.valFromOption(title);
    }

    if (itemID !== undefined) {
      tmp.itemID = Caml_option.valFromOption(itemID);
    }

    if (itemProp !== undefined) {
      tmp.itemProp = Caml_option.valFromOption(itemProp);
    }

    if (itemRef !== undefined) {
      tmp.itemRef = Caml_option.valFromOption(itemRef);
    }

    if (itemScope !== undefined) {
      tmp.itemScope = Caml_option.valFromOption(itemScope);
    }

    if (itemType !== undefined) {
      tmp.itemType = Caml_option.valFromOption(itemType);
    }

    if (accept !== undefined) {
      tmp.accept = Caml_option.valFromOption(accept);
    }

    if (acceptCharset !== undefined) {
      tmp.acceptCharset = Caml_option.valFromOption(acceptCharset);
    }

    if (action !== undefined) {
      tmp.action = Caml_option.valFromOption(action);
    }

    if (allowFullScreen !== undefined) {
      tmp.allowFullScreen = Caml_option.valFromOption(allowFullScreen);
    }

    if (alt !== undefined) {
      tmp.alt = Caml_option.valFromOption(alt);
    }

    if (async !== undefined) {
      tmp.async = Caml_option.valFromOption(async);
    }

    if (autoComplete !== undefined) {
      tmp.autoComplete = Caml_option.valFromOption(autoComplete);
    }

    if (autoCapitalize !== undefined) {
      tmp.autoCapitalize = Caml_option.valFromOption(autoCapitalize);
    }

    if (autoFocus !== undefined) {
      tmp.autoFocus = Caml_option.valFromOption(autoFocus);
    }

    if (autoPlay !== undefined) {
      tmp.autoPlay = Caml_option.valFromOption(autoPlay);
    }

    if (challenge !== undefined) {
      tmp.challenge = Caml_option.valFromOption(challenge);
    }

    if (charSet !== undefined) {
      tmp.charSet = Caml_option.valFromOption(charSet);
    }

    if (checked !== undefined) {
      tmp.checked = Caml_option.valFromOption(checked);
    }

    if (cite !== undefined) {
      tmp.cite = Caml_option.valFromOption(cite);
    }

    if (crossOrigin !== undefined) {
      tmp.crossOrigin = Caml_option.valFromOption(crossOrigin);
    }

    if (cols !== undefined) {
      tmp.cols = Caml_option.valFromOption(cols);
    }

    if (colSpan !== undefined) {
      tmp.colSpan = Caml_option.valFromOption(colSpan);
    }

    if (content !== undefined) {
      tmp.content = Caml_option.valFromOption(content);
    }

    if (controls !== undefined) {
      tmp.controls = Caml_option.valFromOption(controls);
    }

    if (coords !== undefined) {
      tmp.coords = Caml_option.valFromOption(coords);
    }

    if (data !== undefined) {
      tmp.data = Caml_option.valFromOption(data);
    }

    if (dateTime !== undefined) {
      tmp.dateTime = Caml_option.valFromOption(dateTime);
    }

    if ($$default !== undefined) {
      tmp["default"] = Caml_option.valFromOption($$default);
    }

    if (defer !== undefined) {
      tmp.defer = Caml_option.valFromOption(defer);
    }

    if (disabled !== undefined) {
      tmp.disabled = Caml_option.valFromOption(disabled);
    }

    if (download !== undefined) {
      tmp.download = Caml_option.valFromOption(download);
    }

    if (encType !== undefined) {
      tmp.encType = Caml_option.valFromOption(encType);
    }

    if (form !== undefined) {
      tmp.form = Caml_option.valFromOption(form);
    }

    if (formAction !== undefined) {
      tmp.formAction = Caml_option.valFromOption(formAction);
    }

    if (formTarget !== undefined) {
      tmp.formTarget = Caml_option.valFromOption(formTarget);
    }

    if (formMethod !== undefined) {
      tmp.formMethod = Caml_option.valFromOption(formMethod);
    }

    if (headers !== undefined) {
      tmp.headers = Caml_option.valFromOption(headers);
    }

    if (high !== undefined) {
      tmp.high = Caml_option.valFromOption(high);
    }

    if (href !== undefined) {
      tmp.href = Caml_option.valFromOption(href);
    }

    if (hrefLang !== undefined) {
      tmp.hrefLang = Caml_option.valFromOption(hrefLang);
    }

    if (htmlFor !== undefined) {
      tmp.htmlFor = Caml_option.valFromOption(htmlFor);
    }

    if (httpEquiv !== undefined) {
      tmp.httpEquiv = Caml_option.valFromOption(httpEquiv);
    }

    if (icon !== undefined) {
      tmp.icon = Caml_option.valFromOption(icon);
    }

    if (inputMode !== undefined) {
      tmp.inputMode = Caml_option.valFromOption(inputMode);
    }

    if (integrity !== undefined) {
      tmp.integrity = Caml_option.valFromOption(integrity);
    }

    if (keyType !== undefined) {
      tmp.keyType = Caml_option.valFromOption(keyType);
    }

    if (kind !== undefined) {
      tmp.kind = Caml_option.valFromOption(kind);
    }

    if (label !== undefined) {
      tmp.label = Caml_option.valFromOption(label);
    }

    if (list !== undefined) {
      tmp.list = Caml_option.valFromOption(list);
    }

    if (loop !== undefined) {
      tmp.loop = Caml_option.valFromOption(loop);
    }

    if (low !== undefined) {
      tmp.low = Caml_option.valFromOption(low);
    }

    if (manifest !== undefined) {
      tmp.manifest = Caml_option.valFromOption(manifest);
    }

    if (max !== undefined) {
      tmp.max = Caml_option.valFromOption(max);
    }

    if (maxLength !== undefined) {
      tmp.maxLength = Caml_option.valFromOption(maxLength);
    }

    if (media !== undefined) {
      tmp.media = Caml_option.valFromOption(media);
    }

    if (mediaGroup !== undefined) {
      tmp.mediaGroup = Caml_option.valFromOption(mediaGroup);
    }

    if (method !== undefined) {
      tmp.method = Caml_option.valFromOption(method);
    }

    if (min !== undefined) {
      tmp.min = Caml_option.valFromOption(min);
    }

    if (minLength !== undefined) {
      tmp.minLength = Caml_option.valFromOption(minLength);
    }

    if (multiple !== undefined) {
      tmp.multiple = Caml_option.valFromOption(multiple);
    }

    if (muted !== undefined) {
      tmp.muted = Caml_option.valFromOption(muted);
    }

    if (name !== undefined) {
      tmp.name = Caml_option.valFromOption(name);
    }

    if (nonce !== undefined) {
      tmp.nonce = Caml_option.valFromOption(nonce);
    }

    if (noValidate !== undefined) {
      tmp.noValidate = Caml_option.valFromOption(noValidate);
    }

    if (open_ !== undefined) {
      tmp.open = Caml_option.valFromOption(open_);
    }

    if (optimum !== undefined) {
      tmp.optimum = Caml_option.valFromOption(optimum);
    }

    if (pattern !== undefined) {
      tmp.pattern = Caml_option.valFromOption(pattern);
    }

    if (placeholder !== undefined) {
      tmp.placeholder = Caml_option.valFromOption(placeholder);
    }

    if (playsInline !== undefined) {
      tmp.playsInline = Caml_option.valFromOption(playsInline);
    }

    if (poster !== undefined) {
      tmp.poster = Caml_option.valFromOption(poster);
    }

    if (preload !== undefined) {
      tmp.preload = Caml_option.valFromOption(preload);
    }

    if (radioGroup !== undefined) {
      tmp.radioGroup = Caml_option.valFromOption(radioGroup);
    }

    if (readOnly !== undefined) {
      tmp.readOnly = Caml_option.valFromOption(readOnly);
    }

    if (rel !== undefined) {
      tmp.rel = Caml_option.valFromOption(rel);
    }

    if (required !== undefined) {
      tmp.required = Caml_option.valFromOption(required);
    }

    if (reversed !== undefined) {
      tmp.reversed = Caml_option.valFromOption(reversed);
    }

    if (rows !== undefined) {
      tmp.rows = Caml_option.valFromOption(rows);
    }

    if (rowSpan !== undefined) {
      tmp.rowSpan = Caml_option.valFromOption(rowSpan);
    }

    if (sandbox !== undefined) {
      tmp.sandbox = Caml_option.valFromOption(sandbox);
    }

    if (scope !== undefined) {
      tmp.scope = Caml_option.valFromOption(scope);
    }

    if (scoped !== undefined) {
      tmp.scoped = Caml_option.valFromOption(scoped);
    }

    if (scrolling !== undefined) {
      tmp.scrolling = Caml_option.valFromOption(scrolling);
    }

    if (selected !== undefined) {
      tmp.selected = Caml_option.valFromOption(selected);
    }

    if (shape !== undefined) {
      tmp.shape = Caml_option.valFromOption(shape);
    }

    if (size !== undefined) {
      tmp.size = Caml_option.valFromOption(size);
    }

    if (sizes !== undefined) {
      tmp.sizes = Caml_option.valFromOption(sizes);
    }

    if (span !== undefined) {
      tmp.span = Caml_option.valFromOption(span);
    }

    if (src !== undefined) {
      tmp.src = Caml_option.valFromOption(src);
    }

    if (srcDoc !== undefined) {
      tmp.srcDoc = Caml_option.valFromOption(srcDoc);
    }

    if (srcLang !== undefined) {
      tmp.srcLang = Caml_option.valFromOption(srcLang);
    }

    if (srcSet !== undefined) {
      tmp.srcSet = Caml_option.valFromOption(srcSet);
    }

    if (start !== undefined) {
      tmp.start = Caml_option.valFromOption(start);
    }

    if (step !== undefined) {
      tmp.step = Caml_option.valFromOption(step);
    }

    if (summary !== undefined) {
      tmp.summary = Caml_option.valFromOption(summary);
    }

    if (target !== undefined) {
      tmp.target = Caml_option.valFromOption(target);
    }

    if (type_ !== undefined) {
      tmp.type = Caml_option.valFromOption(type_);
    }

    if (useMap !== undefined) {
      tmp.useMap = Caml_option.valFromOption(useMap);
    }

    if (value !== undefined) {
      tmp.value = Caml_option.valFromOption(value);
    }

    if (wrap !== undefined) {
      tmp.wrap = Caml_option.valFromOption(wrap);
    }

    if (onCopy !== undefined) {
      tmp.onCopy = Caml_option.valFromOption(onCopy);
    }

    if (onCut !== undefined) {
      tmp.onCut = Caml_option.valFromOption(onCut);
    }

    if (onPaste !== undefined) {
      tmp.onPaste = Caml_option.valFromOption(onPaste);
    }

    if (onCompositionEnd !== undefined) {
      tmp.onCompositionEnd = Caml_option.valFromOption(onCompositionEnd);
    }

    if (onCompositionStart !== undefined) {
      tmp.onCompositionStart = Caml_option.valFromOption(onCompositionStart);
    }

    if (onCompositionUpdate !== undefined) {
      tmp.onCompositionUpdate = Caml_option.valFromOption(onCompositionUpdate);
    }

    if (onKeyDown !== undefined) {
      tmp.onKeyDown = Caml_option.valFromOption(onKeyDown);
    }

    if (onKeyPress !== undefined) {
      tmp.onKeyPress = Caml_option.valFromOption(onKeyPress);
    }

    if (onKeyUp !== undefined) {
      tmp.onKeyUp = Caml_option.valFromOption(onKeyUp);
    }

    if (onFocus !== undefined) {
      tmp.onFocus = Caml_option.valFromOption(onFocus);
    }

    if (onBlur !== undefined) {
      tmp.onBlur = Caml_option.valFromOption(onBlur);
    }

    if (onChange !== undefined) {
      tmp.onChange = Caml_option.valFromOption(onChange);
    }

    if (onInput !== undefined) {
      tmp.onInput = Caml_option.valFromOption(onInput);
    }

    if (onSubmit !== undefined) {
      tmp.onSubmit = Caml_option.valFromOption(onSubmit);
    }

    if (onInvalid !== undefined) {
      tmp.onInvalid = Caml_option.valFromOption(onInvalid);
    }

    if (onClick !== undefined) {
      tmp.onClick = Caml_option.valFromOption(onClick);
    }

    if (onContextMenu !== undefined) {
      tmp.onContextMenu = Caml_option.valFromOption(onContextMenu);
    }

    if (onDoubleClick !== undefined) {
      tmp.onDoubleClick = Caml_option.valFromOption(onDoubleClick);
    }

    if (onDrag !== undefined) {
      tmp.onDrag = Caml_option.valFromOption(onDrag);
    }

    if (onDragEnd !== undefined) {
      tmp.onDragEnd = Caml_option.valFromOption(onDragEnd);
    }

    if (onDragEnter !== undefined) {
      tmp.onDragEnter = Caml_option.valFromOption(onDragEnter);
    }

    if (onDragExit !== undefined) {
      tmp.onDragExit = Caml_option.valFromOption(onDragExit);
    }

    if (onDragLeave !== undefined) {
      tmp.onDragLeave = Caml_option.valFromOption(onDragLeave);
    }

    if (onDragOver !== undefined) {
      tmp.onDragOver = Caml_option.valFromOption(onDragOver);
    }

    if (onDragStart !== undefined) {
      tmp.onDragStart = Caml_option.valFromOption(onDragStart);
    }

    if (onDrop !== undefined) {
      tmp.onDrop = Caml_option.valFromOption(onDrop);
    }

    if (onMouseDown !== undefined) {
      tmp.onMouseDown = Caml_option.valFromOption(onMouseDown);
    }

    if (onMouseEnter !== undefined) {
      tmp.onMouseEnter = Caml_option.valFromOption(onMouseEnter);
    }

    if (onMouseLeave !== undefined) {
      tmp.onMouseLeave = Caml_option.valFromOption(onMouseLeave);
    }

    if (onMouseMove !== undefined) {
      tmp.onMouseMove = Caml_option.valFromOption(onMouseMove);
    }

    if (onMouseOut !== undefined) {
      tmp.onMouseOut = Caml_option.valFromOption(onMouseOut);
    }

    if (onMouseOver !== undefined) {
      tmp.onMouseOver = Caml_option.valFromOption(onMouseOver);
    }

    if (onMouseUp !== undefined) {
      tmp.onMouseUp = Caml_option.valFromOption(onMouseUp);
    }

    if (onSelect !== undefined) {
      tmp.onSelect = Caml_option.valFromOption(onSelect);
    }

    if (onTouchCancel !== undefined) {
      tmp.onTouchCancel = Caml_option.valFromOption(onTouchCancel);
    }

    if (onTouchEnd !== undefined) {
      tmp.onTouchEnd = Caml_option.valFromOption(onTouchEnd);
    }

    if (onTouchMove !== undefined) {
      tmp.onTouchMove = Caml_option.valFromOption(onTouchMove);
    }

    if (onTouchStart !== undefined) {
      tmp.onTouchStart = Caml_option.valFromOption(onTouchStart);
    }

    if (onPointerOver !== undefined) {
      tmp.onPointerOver = Caml_option.valFromOption(onPointerOver);
    }

    if (onPointerEnter !== undefined) {
      tmp.onPointerEnter = Caml_option.valFromOption(onPointerEnter);
    }

    if (onPointerDown !== undefined) {
      tmp.onPointerDown = Caml_option.valFromOption(onPointerDown);
    }

    if (onPointerMove !== undefined) {
      tmp.onPointerMove = Caml_option.valFromOption(onPointerMove);
    }

    if (onPointerUp !== undefined) {
      tmp.onPointerUp = Caml_option.valFromOption(onPointerUp);
    }

    if (onPointerCancel !== undefined) {
      tmp.onPointerCancel = Caml_option.valFromOption(onPointerCancel);
    }

    if (onPointerOut !== undefined) {
      tmp.onPointerOut = Caml_option.valFromOption(onPointerOut);
    }

    if (onPointerLeave !== undefined) {
      tmp.onPointerLeave = Caml_option.valFromOption(onPointerLeave);
    }

    if (onGotPointerCapture !== undefined) {
      tmp.onGotPointerCapture = Caml_option.valFromOption(onGotPointerCapture);
    }

    if (onLostPointerCapture !== undefined) {
      tmp.onLostPointerCapture = Caml_option.valFromOption(onLostPointerCapture);
    }

    if (onScroll !== undefined) {
      tmp.onScroll = Caml_option.valFromOption(onScroll);
    }

    if (onWheel !== undefined) {
      tmp.onWheel = Caml_option.valFromOption(onWheel);
    }

    if (onAbort !== undefined) {
      tmp.onAbort = Caml_option.valFromOption(onAbort);
    }

    if (onCanPlay !== undefined) {
      tmp.onCanPlay = Caml_option.valFromOption(onCanPlay);
    }

    if (onCanPlayThrough !== undefined) {
      tmp.onCanPlayThrough = Caml_option.valFromOption(onCanPlayThrough);
    }

    if (onDurationChange !== undefined) {
      tmp.onDurationChange = Caml_option.valFromOption(onDurationChange);
    }

    if (onEmptied !== undefined) {
      tmp.onEmptied = Caml_option.valFromOption(onEmptied);
    }

    if (onEncrypetd !== undefined) {
      tmp.onEncrypetd = Caml_option.valFromOption(onEncrypetd);
    }

    if (onEnded !== undefined) {
      tmp.onEnded = Caml_option.valFromOption(onEnded);
    }

    if (onError !== undefined) {
      tmp.onError = Caml_option.valFromOption(onError);
    }

    if (onLoadedData !== undefined) {
      tmp.onLoadedData = Caml_option.valFromOption(onLoadedData);
    }

    if (onLoadedMetadata !== undefined) {
      tmp.onLoadedMetadata = Caml_option.valFromOption(onLoadedMetadata);
    }

    if (onLoadStart !== undefined) {
      tmp.onLoadStart = Caml_option.valFromOption(onLoadStart);
    }

    if (onPause !== undefined) {
      tmp.onPause = Caml_option.valFromOption(onPause);
    }

    if (onPlay !== undefined) {
      tmp.onPlay = Caml_option.valFromOption(onPlay);
    }

    if (onPlaying !== undefined) {
      tmp.onPlaying = Caml_option.valFromOption(onPlaying);
    }

    if (onProgress !== undefined) {
      tmp.onProgress = Caml_option.valFromOption(onProgress);
    }

    if (onRateChange !== undefined) {
      tmp.onRateChange = Caml_option.valFromOption(onRateChange);
    }

    if (onSeeked !== undefined) {
      tmp.onSeeked = Caml_option.valFromOption(onSeeked);
    }

    if (onSeeking !== undefined) {
      tmp.onSeeking = Caml_option.valFromOption(onSeeking);
    }

    if (onStalled !== undefined) {
      tmp.onStalled = Caml_option.valFromOption(onStalled);
    }

    if (onSuspend !== undefined) {
      tmp.onSuspend = Caml_option.valFromOption(onSuspend);
    }

    if (onTimeUpdate !== undefined) {
      tmp.onTimeUpdate = Caml_option.valFromOption(onTimeUpdate);
    }

    if (onVolumeChange !== undefined) {
      tmp.onVolumeChange = Caml_option.valFromOption(onVolumeChange);
    }

    if (onWaiting !== undefined) {
      tmp.onWaiting = Caml_option.valFromOption(onWaiting);
    }

    if (onLoad !== undefined) {
      tmp.onLoad = Caml_option.valFromOption(onLoad);
    }

    if (onAnimationStart !== undefined) {
      tmp.onAnimationStart = Caml_option.valFromOption(onAnimationStart);
    }

    if (onAnimationEnd !== undefined) {
      tmp.onAnimationEnd = Caml_option.valFromOption(onAnimationEnd);
    }

    if (onAnimationIteration !== undefined) {
      tmp.onAnimationIteration = Caml_option.valFromOption(onAnimationIteration);
    }

    if (onTransitionEnd !== undefined) {
      tmp.onTransitionEnd = Caml_option.valFromOption(onTransitionEnd);
    }

    if (dangerouslySetInnerHTML !== undefined) {
      tmp.dangerouslySetInnerHTML = Caml_option.valFromOption(dangerouslySetInnerHTML);
    }

    return React.createElement(tag, tmp, children);
  };

  return {
    Styles: Styles,
    make: Ancestor_Base$Make
  };
}

exports.Make = Make;
/* react Not a pure module */

/***/ }),

/***/ "./src/components/base/Ancestor_Base_Stories.bs.js":
/*!*********************************************************!*\
  !*** ./src/components/base/Ancestor_Base_Stories.bs.js ***!
  \*********************************************************/
/*! no static exports found */
/*! all exports used */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
// Generated by ReScript, PLEASE EDIT WITH CARE


var React = __webpack_require__(/*! react */ "../node_modules/react/index.js");

var Ancestor = __webpack_require__(/*! ../../Ancestor.bs.js */ "./src/Ancestor.bs.js");

var Ancestor_Storybook = __webpack_require__(/*! ../../bindings/Ancestor_Storybook.bs.js */ "./src/bindings/Ancestor_Storybook.bs.js");

function s(prim) {
  return prim;
}

var $$default = Ancestor_Storybook.story("Components/Base");

function Basic$unknownusage(param) {
  return React.createElement(Ancestor.Default.Base.make, {
    display: [{
      NAME: "xs",
      VAL: "flex"
    }],
    justifyContent: [{
      NAME: "xs",
      VAL: "center"
    }],
    width: [{
      NAME: "xs",
      VAL: {
        NAME: "pct",
        VAL: 100
      }
    }],
    children: React.createElement(Ancestor.Default.Base.make, {
      borderRadius: [{
        NAME: "xs",
        VAL: 1
      }],
      bgColor: [{
        NAME: "xs",
        VAL: {
          NAME: "hex",
          VAL: "#000"
        }
      }],
      display: [{
        NAME: "xs",
        VAL: "flex"
      }],
      justifyContent: [{
        NAME: "xs",
        VAL: "center"
      }],
      flexDirection: [{
        NAME: "xs",
        VAL: "column"
      }],
      alignItems: [{
        NAME: "xs",
        VAL: "center"
      }],
      p: [{
        NAME: "xs",
        VAL: 3
      }],
      maxW: [{
        NAME: "xs",
        VAL: {
          NAME: "px",
          VAL: 356
        }
      }],
      tag: "section",
      children: null
    }, React.createElement(Ancestor.Default.Base.make, {
      borderRadius: [{
        NAME: "xs",
        VAL: 6
      }],
      border: [{
        NAME: "xs",
        VAL: [{
          NAME: "px",
          VAL: 2
        }, "solid", {
          NAME: "hex",
          VAL: "#f36"
        }]
      }],
      mb: [{
        NAME: "xs",
        VAL: 2
      }],
      width: [{
        NAME: "xs",
        VAL: {
          NAME: "px",
          VAL: 96
        }
      }],
      height: [{
        NAME: "xs",
        VAL: {
          NAME: "px",
          VAL: 96
        }
      }],
      tag: "img",
      src: "/img/ww-picture.png"
    }), React.createElement(Ancestor.Default.Base.make, {
      color: [{
        NAME: "xs",
        VAL: {
          NAME: "hex",
          VAL: "#fff"
        }
      }],
      m: [{
        NAME: "xs",
        VAL: 0
      }],
      textAlign: [{
        NAME: "xs",
        VAL: "center"
      }],
      fontSize: [{
        NAME: "xs",
        VAL: {
          NAME: "px",
          VAL: 24
        }
      }],
      tag: "h1",
      children: "Walter White"
    }), React.createElement(Ancestor.Default.Base.make, {
      color: [{
        NAME: "xs",
        VAL: {
          NAME: "hex",
          VAL: "#545454"
        }
      }],
      textAlign: [{
        NAME: "xs",
        VAL: "center"
      }],
      fontSize: [{
        NAME: "xs",
        VAL: {
          NAME: "px",
          VAL: 20
        }
      }],
      tag: "p",
      children: "Teacher"
    }), React.createElement(Ancestor.Default.Base.make, {
      color: [{
        NAME: "xs",
        VAL: {
          NAME: "hex",
          VAL: "#a1a1a1"
        }
      }],
      textAlign: [{
        NAME: "xs",
        VAL: "center"
      }],
      fontSize: [{
        NAME: "xs",
        VAL: {
          NAME: "px",
          VAL: 16
        }
      }],
      tag: "p",
      children: "Contrary to popular belief, Lorem Ipsum is not simply random text. It has roots in a piece of classical Latin literature from 45 BC, making it over 2000 years old"
    }))
  });
}

exports.s = s;
exports.$$default = $$default;
exports["default"] = $$default;
exports.__esModule = true;
exports.Basic$unknownusage = Basic$unknownusage;
/* default Not a pure module */

Basic$unknownusage.__docgenInfo = {
  "description": "",
  "methods": [],
  "displayName": "Basic$unknownusage"
};

if (typeof STORYBOOK_REACT_CLASSES !== "undefined") {
  STORYBOOK_REACT_CLASSES["src/components/base/Ancestor_Base_Stories.bs.js"] = {
    name: "Basic$unknownusage",
    docgenInfo: Basic$unknownusage.__docgenInfo,
    path: "src/components/base/Ancestor_Base_Stories.bs.js"
  };
}

/***/ }),

/***/ "./src/components/box/Ancestor_Box.bs.js":
/*!***********************************************!*\
  !*** ./src/components/box/Ancestor_Box.bs.js ***!
  \***********************************************/
/*! no static exports found */
/*! all exports used */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
// Generated by ReScript, PLEASE EDIT WITH CARE


__webpack_require__(/*! ../node_modules/core-js/modules/es.number.to-fixed.js */ "../node_modules/core-js/modules/es.number.to-fixed.js");

__webpack_require__(/*! ../node_modules/core-js/modules/es.array.reduce.js */ "../node_modules/core-js/modules/es.array.reduce.js");

__webpack_require__(/*! ../node_modules/core-js/modules/es.array.sort.js */ "../node_modules/core-js/modules/es.array.sort.js");

__webpack_require__(/*! ../node_modules/core-js/modules/es.function.name.js */ "../node_modules/core-js/modules/es.function.name.js");

__webpack_require__(/*! ../node_modules/core-js/modules/es.array.map.js */ "../node_modules/core-js/modules/es.array.map.js");

var Curry = __webpack_require__(/*! rescript/lib/js/curry.js */ "../node_modules/rescript/lib/js/curry.js");

var React = __webpack_require__(/*! react */ "../node_modules/react/index.js");

var Belt_Array = __webpack_require__(/*! rescript/lib/js/belt_Array.js */ "../node_modules/rescript/lib/js/belt_Array.js");

var Belt_Option = __webpack_require__(/*! rescript/lib/js/belt_Option.js */ "../node_modules/rescript/lib/js/belt_Option.js");

var Caml_option = __webpack_require__(/*! rescript/lib/js/caml_option.js */ "../node_modules/rescript/lib/js/caml_option.js");

var Ancestor_Base = __webpack_require__(/*! ../base/Ancestor_Base.bs.js */ "./src/components/base/Ancestor_Base.bs.js");

var Ancestor_Styles = __webpack_require__(/*! ../../core/Ancestor_Styles.bs.js */ "./src/core/Ancestor_Styles.bs.js");

function Make(Maker) {
  var Styles = Ancestor_Styles.Make(Maker);
  var Base = Ancestor_Base.Make(Maker);

  var basisFromFloat = function basisFromFloat(value) {
    var v = value;
    return (v * 100.0 / 12.0).toFixed(1) + "%";
  };

  var createBox = function createBox(styles, value) {
    return Curry._3(Styles.mediaQuery, styles, value, "flex-basis: " + basisFromFloat(Curry._1(Maker.unboxBreakpointValue, value)));
  };

  var sortValues = function sortValues(values) {
    return Belt_Array.reduce(values.sort(function (param, param$1) {
      return Curry._2(Styles.sortBySize, param, param$1);
    }), "", createBox);
  };

  var Ancestor_Box$Make = function Ancestor_Box$Make(Props) {
    var borderRadius = Props.borderRadius;
    var borderTLRadius = Props.borderTLRadius;
    var borderTRRadius = Props.borderTRRadius;
    var borderBLRadius = Props.borderBLRadius;
    var borderBRRadius = Props.borderBRRadius;
    var borderStyle = Props.borderStyle;
    var borderColor = Props.borderColor;
    var borderWidth = Props.borderWidth;
    var borderRightStyle = Props.borderRightStyle;
    var borderLeftStyle = Props.borderLeftStyle;
    var borderTopStyle = Props.borderTopStyle;
    var borderBottomStyle = Props.borderBottomStyle;
    var borderRightColor = Props.borderRightColor;
    var borderLeftColor = Props.borderLeftColor;
    var borderTopColor = Props.borderTopColor;
    var borderBottomColor = Props.borderBottomColor;
    var borderRightWidth = Props.borderRightWidth;
    var borderLeftWidth = Props.borderLeftWidth;
    var borderTopWidth = Props.borderTopWidth;
    var borderBottomWidth = Props.borderBottomWidth;
    var border = Props.border;
    var borderRight = Props.borderRight;
    var borderLeft = Props.borderLeft;
    var borderTop = Props.borderTop;
    var borderBottom = Props.borderBottom;
    var bgColor = Props.bgColor;
    var bgSize = Props.bgSize;
    var bgPosition = Props.bgPosition;
    var bgImage = Props.bgImage;
    var color = Props.color;
    var display = Props.display;
    var justifyContent = Props.justifyContent;
    var flexDirection = Props.flexDirection;
    var alignItems = Props.alignItems;
    var flexBasis = Props.flexBasis;
    var flexWrap = Props.flexWrap;
    var flexGrow = Props.flexGrow;
    var alignContent = Props.alignContent;
    var alignSelf = Props.alignSelf;
    var justifySelf = Props.justifySelf;
    var flexFlow = Props.flexFlow;
    var gap = Props.gap;
    var p = Props.p;
    var px = Props.px;
    var py = Props.py;
    var pt = Props.pt;
    var pb = Props.pb;
    var pl = Props.pl;
    var pr = Props.pr;
    var m = Props.m;
    var mx = Props.mx;
    var my = Props.my;
    var mt = Props.mt;
    var mb = Props.mb;
    var ml = Props.ml;
    var mr = Props.mr;
    var textAlign = Props.textAlign;
    var fontWeight = Props.fontWeight;
    var fontSize = Props.fontSize;
    var letterSpacing = Props.letterSpacing;
    var lineHeight = Props.lineHeight;
    var width = Props.width;
    var height = Props.height;
    var minW = Props.minW;
    var minH = Props.minH;
    var maxW = Props.maxW;
    var maxH = Props.maxH;
    var position = Props.position;
    var top = Props.top;
    var bottom = Props.bottom;
    var left = Props.left;
    var right = Props.right;
    var zIndex = Props.zIndex;
    var boxSizing = Props.boxSizing;
    var overflow = Props.overflow;
    var overflowX = Props.overflowX;
    var overflowY = Props.overflowY;
    var cursor = Props.cursor;
    var visibility = Props.visibility;
    var listStyleType = Props.listStyleType;
    var listStylePosition = Props.listStylePosition;
    var listStyleImage = Props.listStyleImage;
    var listStyle = Props.listStyle;
    var outlineStyle = Props.outlineStyle;
    var outline = Props.outline;
    var textDecorationStyle = Props.textDecorationStyle;
    var textDecorationLine = Props.textDecorationLine;
    var textDecoration = Props.textDecoration;
    var transform = Props.transform;
    var columns = Props.columns;
    var children = Props.children;
    var dangerouslySetInnerHTML = Props.dangerouslySetInnerHTML;
    var innerRef = Props.innerRef;
    var classNameOpt = Props.className;
    var tagOpt = Props.tag;
    var id = Props.id;
    var onClick = Props.onClick;
    var onSubmit = Props.onSubmit;
    var onChange = Props.onChange;
    var src = Props.src;
    var alt = Props.alt;
    var ariaDetails = Props.ariaDetails;
    var ariaDisabled = Props.ariaDisabled;
    var ariaHidden = Props.ariaHidden;
    var ariaKeyshortcuts = Props.ariaKeyshortcuts;
    var ariaLabel = Props.ariaLabel;
    var ariaRoledescription = Props.ariaRoledescription;
    var ariaExpanded = Props.ariaExpanded;
    var ariaLevel = Props.ariaLevel;
    var ariaModal = Props.ariaModal;
    var ariaMultiline = Props.ariaMultiline;
    var ariaMultiselectable = Props.ariaMultiselectable;
    var ariaPlaceholder = Props.ariaPlaceholder;
    var ariaReadonly = Props.ariaReadonly;
    var ariaRequired = Props.ariaRequired;
    var ariaSelected = Props.ariaSelected;
    var ariaSort = Props.ariaSort;
    var ariaValuemax = Props.ariaValuemax;
    var ariaValuemin = Props.ariaValuemin;
    var ariaValuenow = Props.ariaValuenow;
    var ariaValuetext = Props.ariaValuetext;
    var ariaAtomic = Props.ariaAtomic;
    var ariaBusy = Props.ariaBusy;
    var ariaRelevant = Props.ariaRelevant;
    var ariaGrabbed = Props.ariaGrabbed;
    var ariaActivedescendant = Props.ariaActivedescendant;
    var ariaColcount = Props.ariaColcount;
    var ariaColindex = Props.ariaColindex;
    var ariaColspan = Props.ariaColspan;
    var ariaControls = Props.ariaControls;
    var ariaDescribedby = Props.ariaDescribedby;
    var ariaErrormessage = Props.ariaErrormessage;
    var ariaFlowto = Props.ariaFlowto;
    var ariaLabelledby = Props.ariaLabelledby;
    var ariaOwns = Props.ariaOwns;
    var ariaPosinset = Props.ariaPosinset;
    var ariaRowcount = Props.ariaRowcount;
    var ariaRowindex = Props.ariaRowindex;
    var ariaRowspan = Props.ariaRowspan;
    var ariaSetsize = Props.ariaSetsize;
    var defaultChecked = Props.defaultChecked;
    var defaultValue = Props.defaultValue;
    var accessKey = Props.accessKey;
    var contentEditable = Props.contentEditable;
    var contextMenu = Props.contextMenu;
    var lang = Props.lang;
    var role = Props.role;
    var style = Props.style;
    var spellCheck = Props.spellCheck;
    var tabIndex = Props.tabIndex;
    var title = Props.title;
    var itemID = Props.itemID;
    var itemProp = Props.itemProp;
    var itemRef = Props.itemRef;
    var itemScope = Props.itemScope;
    var itemType = Props.itemType;
    var accept = Props.accept;
    var acceptCharset = Props.acceptCharset;
    var action = Props.action;
    var allowFullScreen = Props.allowFullScreen;
    var async = Props.async;
    var autoComplete = Props.autoComplete;
    var autoCapitalize = Props.autoCapitalize;
    var autoFocus = Props.autoFocus;
    var autoPlay = Props.autoPlay;
    var challenge = Props.challenge;
    var charSet = Props.charSet;
    var checked = Props.checked;
    var cite = Props.cite;
    var crossOrigin = Props.crossOrigin;
    var cols = Props.cols;
    var colSpan = Props.colSpan;
    var content = Props.content;
    var controls = Props.controls;
    var coords = Props.coords;
    var data = Props.data;
    var dateTime = Props.dateTime;
    var $$default = Props["default"];
    var defer = Props.defer;
    var disabled = Props.disabled;
    var download = Props.download;
    var encType = Props.encType;
    var form = Props.form;
    var formAction = Props.formAction;
    var formTarget = Props.formTarget;
    var formMethod = Props.formMethod;
    var headers = Props.headers;
    var high = Props.high;
    var href = Props.href;
    var hrefLang = Props.hrefLang;
    var htmlFor = Props.htmlFor;
    var httpEquiv = Props.httpEquiv;
    var icon = Props.icon;
    var inputMode = Props.inputMode;
    var integrity = Props.integrity;
    var keyType = Props.keyType;
    var kind = Props.kind;
    var label = Props.label;
    var list = Props.list;
    var loop = Props.loop;
    var low = Props.low;
    var manifest = Props.manifest;
    var max = Props.max;
    var maxLength = Props.maxLength;
    var media = Props.media;
    var mediaGroup = Props.mediaGroup;
    var method = Props.method;
    var min = Props.min;
    var minLength = Props.minLength;
    var multiple = Props.multiple;
    var muted = Props.muted;
    var name = Props.name;
    var nonce = Props.nonce;
    var noValidate = Props.noValidate;
    var open_ = Props.open_;
    var optimum = Props.optimum;
    var pattern = Props.pattern;
    var placeholder = Props.placeholder;
    var playsInline = Props.playsInline;
    var poster = Props.poster;
    var preload = Props.preload;
    var radioGroup = Props.radioGroup;
    var readOnly = Props.readOnly;
    var rel = Props.rel;
    var required = Props.required;
    var reversed = Props.reversed;
    var rows = Props.rows;
    var rowSpan = Props.rowSpan;
    var sandbox = Props.sandbox;
    var scope = Props.scope;
    var scoped = Props.scoped;
    var scrolling = Props.scrolling;
    var selected = Props.selected;
    var shape = Props.shape;
    var size = Props.size;
    var sizes = Props.sizes;
    var span = Props.span;
    var srcDoc = Props.srcDoc;
    var srcLang = Props.srcLang;
    var srcSet = Props.srcSet;
    var start = Props.start;
    var step = Props.step;
    var summary = Props.summary;
    var target = Props.target;
    var type_ = Props.type_;
    var useMap = Props.useMap;
    var value = Props.value;
    var wrap = Props.wrap;
    var onCopy = Props.onCopy;
    var onCut = Props.onCut;
    var onPaste = Props.onPaste;
    var onCompositionEnd = Props.onCompositionEnd;
    var onCompositionStart = Props.onCompositionStart;
    var onCompositionUpdate = Props.onCompositionUpdate;
    var onKeyDown = Props.onKeyDown;
    var onKeyPress = Props.onKeyPress;
    var onKeyUp = Props.onKeyUp;
    var onFocus = Props.onFocus;
    var onBlur = Props.onBlur;
    var onInput = Props.onInput;
    var onInvalid = Props.onInvalid;
    var onContextMenu = Props.onContextMenu;
    var onDoubleClick = Props.onDoubleClick;
    var onDrag = Props.onDrag;
    var onDragEnd = Props.onDragEnd;
    var onDragEnter = Props.onDragEnter;
    var onDragExit = Props.onDragExit;
    var onDragLeave = Props.onDragLeave;
    var onDragOver = Props.onDragOver;
    var onDragStart = Props.onDragStart;
    var onDrop = Props.onDrop;
    var onMouseDown = Props.onMouseDown;
    var onMouseEnter = Props.onMouseEnter;
    var onMouseLeave = Props.onMouseLeave;
    var onMouseMove = Props.onMouseMove;
    var onMouseOut = Props.onMouseOut;
    var onMouseOver = Props.onMouseOver;
    var onMouseUp = Props.onMouseUp;
    var onSelect = Props.onSelect;
    var onTouchCancel = Props.onTouchCancel;
    var onTouchEnd = Props.onTouchEnd;
    var onTouchMove = Props.onTouchMove;
    var onTouchStart = Props.onTouchStart;
    var onPointerOver = Props.onPointerOver;
    var onPointerEnter = Props.onPointerEnter;
    var onPointerDown = Props.onPointerDown;
    var onPointerMove = Props.onPointerMove;
    var onPointerUp = Props.onPointerUp;
    var onPointerCancel = Props.onPointerCancel;
    var onPointerOut = Props.onPointerOut;
    var onPointerLeave = Props.onPointerLeave;
    var onGotPointerCapture = Props.onGotPointerCapture;
    var onLostPointerCapture = Props.onLostPointerCapture;
    var onScroll = Props.onScroll;
    var onWheel = Props.onWheel;
    var onAbort = Props.onAbort;
    var onCanPlay = Props.onCanPlay;
    var onCanPlayThrough = Props.onCanPlayThrough;
    var onDurationChange = Props.onDurationChange;
    var onEmptied = Props.onEmptied;
    var onEncrypetd = Props.onEncrypetd;
    var onEnded = Props.onEnded;
    var onError = Props.onError;
    var onLoadedData = Props.onLoadedData;
    var onLoadedMetadata = Props.onLoadedMetadata;
    var onLoadStart = Props.onLoadStart;
    var onPause = Props.onPause;
    var onPlay = Props.onPlay;
    var onPlaying = Props.onPlaying;
    var onProgress = Props.onProgress;
    var onRateChange = Props.onRateChange;
    var onSeeked = Props.onSeeked;
    var onSeeking = Props.onSeeking;
    var onStalled = Props.onStalled;
    var onSuspend = Props.onSuspend;
    var onTimeUpdate = Props.onTimeUpdate;
    var onVolumeChange = Props.onVolumeChange;
    var onWaiting = Props.onWaiting;
    var onLoad = Props.onLoad;
    var onAnimationStart = Props.onAnimationStart;
    var onAnimationEnd = Props.onAnimationEnd;
    var onAnimationIteration = Props.onAnimationIteration;
    var onTransitionEnd = Props.onTransitionEnd;
    var className = classNameOpt !== undefined ? classNameOpt : "";
    var tag = tagOpt !== undefined ? tagOpt : "div";

    var boxClassName = Curry._1(Maker.css, Belt_Option.getWithDefault(Belt_Option.map(columns, sortValues), ""));

    var tmp = {
      tag: tag,
      className: boxClassName + " " + className
    };

    if (borderRadius !== undefined) {
      tmp.borderRadius = Caml_option.valFromOption(borderRadius);
    }

    if (borderTLRadius !== undefined) {
      tmp.borderTLRadius = Caml_option.valFromOption(borderTLRadius);
    }

    if (borderTRRadius !== undefined) {
      tmp.borderTRRadius = Caml_option.valFromOption(borderTRRadius);
    }

    if (borderBLRadius !== undefined) {
      tmp.borderBLRadius = Caml_option.valFromOption(borderBLRadius);
    }

    if (borderBRRadius !== undefined) {
      tmp.borderBRRadius = Caml_option.valFromOption(borderBRRadius);
    }

    if (borderStyle !== undefined) {
      tmp.borderStyle = Caml_option.valFromOption(borderStyle);
    }

    if (borderColor !== undefined) {
      tmp.borderColor = Caml_option.valFromOption(borderColor);
    }

    if (borderWidth !== undefined) {
      tmp.borderWidth = Caml_option.valFromOption(borderWidth);
    }

    if (borderRightStyle !== undefined) {
      tmp.borderRightStyle = Caml_option.valFromOption(borderRightStyle);
    }

    if (borderLeftStyle !== undefined) {
      tmp.borderLeftStyle = Caml_option.valFromOption(borderLeftStyle);
    }

    if (borderTopStyle !== undefined) {
      tmp.borderTopStyle = Caml_option.valFromOption(borderTopStyle);
    }

    if (borderBottomStyle !== undefined) {
      tmp.borderBottomStyle = Caml_option.valFromOption(borderBottomStyle);
    }

    if (borderRightColor !== undefined) {
      tmp.borderRightColor = Caml_option.valFromOption(borderRightColor);
    }

    if (borderLeftColor !== undefined) {
      tmp.borderLeftColor = Caml_option.valFromOption(borderLeftColor);
    }

    if (borderTopColor !== undefined) {
      tmp.borderTopColor = Caml_option.valFromOption(borderTopColor);
    }

    if (borderBottomColor !== undefined) {
      tmp.borderBottomColor = Caml_option.valFromOption(borderBottomColor);
    }

    if (borderRightWidth !== undefined) {
      tmp.borderRightWidth = Caml_option.valFromOption(borderRightWidth);
    }

    if (borderLeftWidth !== undefined) {
      tmp.borderLeftWidth = Caml_option.valFromOption(borderLeftWidth);
    }

    if (borderTopWidth !== undefined) {
      tmp.borderTopWidth = Caml_option.valFromOption(borderTopWidth);
    }

    if (borderBottomWidth !== undefined) {
      tmp.borderBottomWidth = Caml_option.valFromOption(borderBottomWidth);
    }

    if (border !== undefined) {
      tmp.border = Caml_option.valFromOption(border);
    }

    if (borderRight !== undefined) {
      tmp.borderRight = Caml_option.valFromOption(borderRight);
    }

    if (borderLeft !== undefined) {
      tmp.borderLeft = Caml_option.valFromOption(borderLeft);
    }

    if (borderTop !== undefined) {
      tmp.borderTop = Caml_option.valFromOption(borderTop);
    }

    if (borderBottom !== undefined) {
      tmp.borderBottom = Caml_option.valFromOption(borderBottom);
    }

    if (bgColor !== undefined) {
      tmp.bgColor = Caml_option.valFromOption(bgColor);
    }

    if (bgSize !== undefined) {
      tmp.bgSize = Caml_option.valFromOption(bgSize);
    }

    if (bgPosition !== undefined) {
      tmp.bgPosition = Caml_option.valFromOption(bgPosition);
    }

    if (bgImage !== undefined) {
      tmp.bgImage = Caml_option.valFromOption(bgImage);
    }

    if (color !== undefined) {
      tmp.color = Caml_option.valFromOption(color);
    }

    if (display !== undefined) {
      tmp.display = Caml_option.valFromOption(display);
    }

    if (justifyContent !== undefined) {
      tmp.justifyContent = Caml_option.valFromOption(justifyContent);
    }

    if (flexDirection !== undefined) {
      tmp.flexDirection = Caml_option.valFromOption(flexDirection);
    }

    if (alignItems !== undefined) {
      tmp.alignItems = Caml_option.valFromOption(alignItems);
    }

    if (flexBasis !== undefined) {
      tmp.flexBasis = Caml_option.valFromOption(flexBasis);
    }

    if (flexWrap !== undefined) {
      tmp.flexWrap = Caml_option.valFromOption(flexWrap);
    }

    if (flexGrow !== undefined) {
      tmp.flexGrow = Caml_option.valFromOption(flexGrow);
    }

    if (alignContent !== undefined) {
      tmp.alignContent = Caml_option.valFromOption(alignContent);
    }

    if (alignSelf !== undefined) {
      tmp.alignSelf = Caml_option.valFromOption(alignSelf);
    }

    if (justifySelf !== undefined) {
      tmp.justifySelf = Caml_option.valFromOption(justifySelf);
    }

    if (flexFlow !== undefined) {
      tmp.flexFlow = Caml_option.valFromOption(flexFlow);
    }

    if (gap !== undefined) {
      tmp.gap = Caml_option.valFromOption(gap);
    }

    if (p !== undefined) {
      tmp.p = Caml_option.valFromOption(p);
    }

    if (px !== undefined) {
      tmp.px = Caml_option.valFromOption(px);
    }

    if (py !== undefined) {
      tmp.py = Caml_option.valFromOption(py);
    }

    if (pt !== undefined) {
      tmp.pt = Caml_option.valFromOption(pt);
    }

    if (pb !== undefined) {
      tmp.pb = Caml_option.valFromOption(pb);
    }

    if (pl !== undefined) {
      tmp.pl = Caml_option.valFromOption(pl);
    }

    if (pr !== undefined) {
      tmp.pr = Caml_option.valFromOption(pr);
    }

    if (m !== undefined) {
      tmp.m = Caml_option.valFromOption(m);
    }

    if (mx !== undefined) {
      tmp.mx = Caml_option.valFromOption(mx);
    }

    if (my !== undefined) {
      tmp.my = Caml_option.valFromOption(my);
    }

    if (mt !== undefined) {
      tmp.mt = Caml_option.valFromOption(mt);
    }

    if (mb !== undefined) {
      tmp.mb = Caml_option.valFromOption(mb);
    }

    if (ml !== undefined) {
      tmp.ml = Caml_option.valFromOption(ml);
    }

    if (mr !== undefined) {
      tmp.mr = Caml_option.valFromOption(mr);
    }

    if (textAlign !== undefined) {
      tmp.textAlign = Caml_option.valFromOption(textAlign);
    }

    if (fontWeight !== undefined) {
      tmp.fontWeight = Caml_option.valFromOption(fontWeight);
    }

    if (fontSize !== undefined) {
      tmp.fontSize = Caml_option.valFromOption(fontSize);
    }

    if (letterSpacing !== undefined) {
      tmp.letterSpacing = Caml_option.valFromOption(letterSpacing);
    }

    if (lineHeight !== undefined) {
      tmp.lineHeight = Caml_option.valFromOption(lineHeight);
    }

    if (width !== undefined) {
      tmp.width = Caml_option.valFromOption(width);
    }

    if (height !== undefined) {
      tmp.height = Caml_option.valFromOption(height);
    }

    if (minW !== undefined) {
      tmp.minW = Caml_option.valFromOption(minW);
    }

    if (minH !== undefined) {
      tmp.minH = Caml_option.valFromOption(minH);
    }

    if (maxW !== undefined) {
      tmp.maxW = Caml_option.valFromOption(maxW);
    }

    if (maxH !== undefined) {
      tmp.maxH = Caml_option.valFromOption(maxH);
    }

    if (position !== undefined) {
      tmp.position = Caml_option.valFromOption(position);
    }

    if (top !== undefined) {
      tmp.top = Caml_option.valFromOption(top);
    }

    if (bottom !== undefined) {
      tmp.bottom = Caml_option.valFromOption(bottom);
    }

    if (left !== undefined) {
      tmp.left = Caml_option.valFromOption(left);
    }

    if (right !== undefined) {
      tmp.right = Caml_option.valFromOption(right);
    }

    if (zIndex !== undefined) {
      tmp.zIndex = Caml_option.valFromOption(zIndex);
    }

    if (boxSizing !== undefined) {
      tmp.boxSizing = Caml_option.valFromOption(boxSizing);
    }

    if (overflow !== undefined) {
      tmp.overflow = Caml_option.valFromOption(overflow);
    }

    if (overflowX !== undefined) {
      tmp.overflowX = Caml_option.valFromOption(overflowX);
    }

    if (overflowY !== undefined) {
      tmp.overflowY = Caml_option.valFromOption(overflowY);
    }

    if (cursor !== undefined) {
      tmp.cursor = Caml_option.valFromOption(cursor);
    }

    if (visibility !== undefined) {
      tmp.visibility = Caml_option.valFromOption(visibility);
    }

    if (listStyleType !== undefined) {
      tmp.listStyleType = Caml_option.valFromOption(listStyleType);
    }

    if (listStylePosition !== undefined) {
      tmp.listStylePosition = Caml_option.valFromOption(listStylePosition);
    }

    if (listStyleImage !== undefined) {
      tmp.listStyleImage = Caml_option.valFromOption(listStyleImage);
    }

    if (listStyle !== undefined) {
      tmp.listStyle = Caml_option.valFromOption(listStyle);
    }

    if (outlineStyle !== undefined) {
      tmp.outlineStyle = Caml_option.valFromOption(outlineStyle);
    }

    if (outline !== undefined) {
      tmp.outline = Caml_option.valFromOption(outline);
    }

    if (textDecorationStyle !== undefined) {
      tmp.textDecorationStyle = Caml_option.valFromOption(textDecorationStyle);
    }

    if (textDecorationLine !== undefined) {
      tmp.textDecorationLine = Caml_option.valFromOption(textDecorationLine);
    }

    if (textDecoration !== undefined) {
      tmp.textDecoration = Caml_option.valFromOption(textDecoration);
    }

    if (transform !== undefined) {
      tmp.transform = Caml_option.valFromOption(transform);
    }

    if (innerRef !== undefined) {
      tmp.innerRef = Caml_option.valFromOption(innerRef);
    }

    if (dangerouslySetInnerHTML !== undefined) {
      tmp.dangerouslySetInnerHTML = Caml_option.valFromOption(dangerouslySetInnerHTML);
    }

    if (children !== undefined) {
      tmp.children = Caml_option.valFromOption(children);
    }

    if (id !== undefined) {
      tmp.id = Caml_option.valFromOption(id);
    }

    if (onClick !== undefined) {
      tmp.onClick = Caml_option.valFromOption(onClick);
    }

    if (onSubmit !== undefined) {
      tmp.onSubmit = Caml_option.valFromOption(onSubmit);
    }

    if (onChange !== undefined) {
      tmp.onChange = Caml_option.valFromOption(onChange);
    }

    if (alt !== undefined) {
      tmp.alt = Caml_option.valFromOption(alt);
    }

    if (src !== undefined) {
      tmp.src = Caml_option.valFromOption(src);
    }

    if (ariaDetails !== undefined) {
      tmp.ariaDetails = Caml_option.valFromOption(ariaDetails);
    }

    if (ariaDisabled !== undefined) {
      tmp.ariaDisabled = Caml_option.valFromOption(ariaDisabled);
    }

    if (ariaHidden !== undefined) {
      tmp.ariaHidden = Caml_option.valFromOption(ariaHidden);
    }

    if (ariaKeyshortcuts !== undefined) {
      tmp.ariaKeyshortcuts = Caml_option.valFromOption(ariaKeyshortcuts);
    }

    if (ariaLabel !== undefined) {
      tmp.ariaLabel = Caml_option.valFromOption(ariaLabel);
    }

    if (ariaRoledescription !== undefined) {
      tmp.ariaRoledescription = Caml_option.valFromOption(ariaRoledescription);
    }

    if (ariaExpanded !== undefined) {
      tmp.ariaExpanded = Caml_option.valFromOption(ariaExpanded);
    }

    if (ariaLevel !== undefined) {
      tmp.ariaLevel = Caml_option.valFromOption(ariaLevel);
    }

    if (ariaModal !== undefined) {
      tmp.ariaModal = Caml_option.valFromOption(ariaModal);
    }

    if (ariaMultiline !== undefined) {
      tmp.ariaMultiline = Caml_option.valFromOption(ariaMultiline);
    }

    if (ariaMultiselectable !== undefined) {
      tmp.ariaMultiselectable = Caml_option.valFromOption(ariaMultiselectable);
    }

    if (ariaPlaceholder !== undefined) {
      tmp.ariaPlaceholder = Caml_option.valFromOption(ariaPlaceholder);
    }

    if (ariaReadonly !== undefined) {
      tmp.ariaReadonly = Caml_option.valFromOption(ariaReadonly);
    }

    if (ariaRequired !== undefined) {
      tmp.ariaRequired = Caml_option.valFromOption(ariaRequired);
    }

    if (ariaSelected !== undefined) {
      tmp.ariaSelected = Caml_option.valFromOption(ariaSelected);
    }

    if (ariaSort !== undefined) {
      tmp.ariaSort = Caml_option.valFromOption(ariaSort);
    }

    if (ariaValuemax !== undefined) {
      tmp.ariaValuemax = Caml_option.valFromOption(ariaValuemax);
    }

    if (ariaValuemin !== undefined) {
      tmp.ariaValuemin = Caml_option.valFromOption(ariaValuemin);
    }

    if (ariaValuenow !== undefined) {
      tmp.ariaValuenow = Caml_option.valFromOption(ariaValuenow);
    }

    if (ariaValuetext !== undefined) {
      tmp.ariaValuetext = Caml_option.valFromOption(ariaValuetext);
    }

    if (ariaAtomic !== undefined) {
      tmp.ariaAtomic = Caml_option.valFromOption(ariaAtomic);
    }

    if (ariaBusy !== undefined) {
      tmp.ariaBusy = Caml_option.valFromOption(ariaBusy);
    }

    if (ariaRelevant !== undefined) {
      tmp.ariaRelevant = Caml_option.valFromOption(ariaRelevant);
    }

    if (ariaGrabbed !== undefined) {
      tmp.ariaGrabbed = Caml_option.valFromOption(ariaGrabbed);
    }

    if (ariaActivedescendant !== undefined) {
      tmp.ariaActivedescendant = Caml_option.valFromOption(ariaActivedescendant);
    }

    if (ariaColcount !== undefined) {
      tmp.ariaColcount = Caml_option.valFromOption(ariaColcount);
    }

    if (ariaColindex !== undefined) {
      tmp.ariaColindex = Caml_option.valFromOption(ariaColindex);
    }

    if (ariaColspan !== undefined) {
      tmp.ariaColspan = Caml_option.valFromOption(ariaColspan);
    }

    if (ariaControls !== undefined) {
      tmp.ariaControls = Caml_option.valFromOption(ariaControls);
    }

    if (ariaDescribedby !== undefined) {
      tmp.ariaDescribedby = Caml_option.valFromOption(ariaDescribedby);
    }

    if (ariaErrormessage !== undefined) {
      tmp.ariaErrormessage = Caml_option.valFromOption(ariaErrormessage);
    }

    if (ariaFlowto !== undefined) {
      tmp.ariaFlowto = Caml_option.valFromOption(ariaFlowto);
    }

    if (ariaLabelledby !== undefined) {
      tmp.ariaLabelledby = Caml_option.valFromOption(ariaLabelledby);
    }

    if (ariaOwns !== undefined) {
      tmp.ariaOwns = Caml_option.valFromOption(ariaOwns);
    }

    if (ariaPosinset !== undefined) {
      tmp.ariaPosinset = Caml_option.valFromOption(ariaPosinset);
    }

    if (ariaRowcount !== undefined) {
      tmp.ariaRowcount = Caml_option.valFromOption(ariaRowcount);
    }

    if (ariaRowindex !== undefined) {
      tmp.ariaRowindex = Caml_option.valFromOption(ariaRowindex);
    }

    if (ariaRowspan !== undefined) {
      tmp.ariaRowspan = Caml_option.valFromOption(ariaRowspan);
    }

    if (ariaSetsize !== undefined) {
      tmp.ariaSetsize = Caml_option.valFromOption(ariaSetsize);
    }

    if (defaultChecked !== undefined) {
      tmp.defaultChecked = Caml_option.valFromOption(defaultChecked);
    }

    if (defaultValue !== undefined) {
      tmp.defaultValue = Caml_option.valFromOption(defaultValue);
    }

    if (accessKey !== undefined) {
      tmp.accessKey = Caml_option.valFromOption(accessKey);
    }

    if (contentEditable !== undefined) {
      tmp.contentEditable = Caml_option.valFromOption(contentEditable);
    }

    if (contextMenu !== undefined) {
      tmp.contextMenu = Caml_option.valFromOption(contextMenu);
    }

    if (lang !== undefined) {
      tmp.lang = Caml_option.valFromOption(lang);
    }

    if (role !== undefined) {
      tmp.role = Caml_option.valFromOption(role);
    }

    if (style !== undefined) {
      tmp.style = Caml_option.valFromOption(style);
    }

    if (spellCheck !== undefined) {
      tmp.spellCheck = Caml_option.valFromOption(spellCheck);
    }

    if (tabIndex !== undefined) {
      tmp.tabIndex = Caml_option.valFromOption(tabIndex);
    }

    if (title !== undefined) {
      tmp.title = Caml_option.valFromOption(title);
    }

    if (itemID !== undefined) {
      tmp.itemID = Caml_option.valFromOption(itemID);
    }

    if (itemProp !== undefined) {
      tmp.itemProp = Caml_option.valFromOption(itemProp);
    }

    if (itemRef !== undefined) {
      tmp.itemRef = Caml_option.valFromOption(itemRef);
    }

    if (itemScope !== undefined) {
      tmp.itemScope = Caml_option.valFromOption(itemScope);
    }

    if (itemType !== undefined) {
      tmp.itemType = Caml_option.valFromOption(itemType);
    }

    if (accept !== undefined) {
      tmp.accept = Caml_option.valFromOption(accept);
    }

    if (acceptCharset !== undefined) {
      tmp.acceptCharset = Caml_option.valFromOption(acceptCharset);
    }

    if (action !== undefined) {
      tmp.action = Caml_option.valFromOption(action);
    }

    if (allowFullScreen !== undefined) {
      tmp.allowFullScreen = Caml_option.valFromOption(allowFullScreen);
    }

    if (async !== undefined) {
      tmp.async = Caml_option.valFromOption(async);
    }

    if (autoComplete !== undefined) {
      tmp.autoComplete = Caml_option.valFromOption(autoComplete);
    }

    if (autoCapitalize !== undefined) {
      tmp.autoCapitalize = Caml_option.valFromOption(autoCapitalize);
    }

    if (autoFocus !== undefined) {
      tmp.autoFocus = Caml_option.valFromOption(autoFocus);
    }

    if (autoPlay !== undefined) {
      tmp.autoPlay = Caml_option.valFromOption(autoPlay);
    }

    if (challenge !== undefined) {
      tmp.challenge = Caml_option.valFromOption(challenge);
    }

    if (charSet !== undefined) {
      tmp.charSet = Caml_option.valFromOption(charSet);
    }

    if (checked !== undefined) {
      tmp.checked = Caml_option.valFromOption(checked);
    }

    if (cite !== undefined) {
      tmp.cite = Caml_option.valFromOption(cite);
    }

    if (crossOrigin !== undefined) {
      tmp.crossOrigin = Caml_option.valFromOption(crossOrigin);
    }

    if (cols !== undefined) {
      tmp.cols = Caml_option.valFromOption(cols);
    }

    if (colSpan !== undefined) {
      tmp.colSpan = Caml_option.valFromOption(colSpan);
    }

    if (content !== undefined) {
      tmp.content = Caml_option.valFromOption(content);
    }

    if (controls !== undefined) {
      tmp.controls = Caml_option.valFromOption(controls);
    }

    if (coords !== undefined) {
      tmp.coords = Caml_option.valFromOption(coords);
    }

    if (data !== undefined) {
      tmp.data = Caml_option.valFromOption(data);
    }

    if (dateTime !== undefined) {
      tmp.dateTime = Caml_option.valFromOption(dateTime);
    }

    if ($$default !== undefined) {
      tmp["default"] = Caml_option.valFromOption($$default);
    }

    if (defer !== undefined) {
      tmp.defer = Caml_option.valFromOption(defer);
    }

    if (disabled !== undefined) {
      tmp.disabled = Caml_option.valFromOption(disabled);
    }

    if (download !== undefined) {
      tmp.download = Caml_option.valFromOption(download);
    }

    if (encType !== undefined) {
      tmp.encType = Caml_option.valFromOption(encType);
    }

    if (form !== undefined) {
      tmp.form = Caml_option.valFromOption(form);
    }

    if (formAction !== undefined) {
      tmp.formAction = Caml_option.valFromOption(formAction);
    }

    if (formTarget !== undefined) {
      tmp.formTarget = Caml_option.valFromOption(formTarget);
    }

    if (formMethod !== undefined) {
      tmp.formMethod = Caml_option.valFromOption(formMethod);
    }

    if (headers !== undefined) {
      tmp.headers = Caml_option.valFromOption(headers);
    }

    if (high !== undefined) {
      tmp.high = Caml_option.valFromOption(high);
    }

    if (href !== undefined) {
      tmp.href = Caml_option.valFromOption(href);
    }

    if (hrefLang !== undefined) {
      tmp.hrefLang = Caml_option.valFromOption(hrefLang);
    }

    if (htmlFor !== undefined) {
      tmp.htmlFor = Caml_option.valFromOption(htmlFor);
    }

    if (httpEquiv !== undefined) {
      tmp.httpEquiv = Caml_option.valFromOption(httpEquiv);
    }

    if (icon !== undefined) {
      tmp.icon = Caml_option.valFromOption(icon);
    }

    if (inputMode !== undefined) {
      tmp.inputMode = Caml_option.valFromOption(inputMode);
    }

    if (integrity !== undefined) {
      tmp.integrity = Caml_option.valFromOption(integrity);
    }

    if (keyType !== undefined) {
      tmp.keyType = Caml_option.valFromOption(keyType);
    }

    if (kind !== undefined) {
      tmp.kind = Caml_option.valFromOption(kind);
    }

    if (label !== undefined) {
      tmp.label = Caml_option.valFromOption(label);
    }

    if (list !== undefined) {
      tmp.list = Caml_option.valFromOption(list);
    }

    if (loop !== undefined) {
      tmp.loop = Caml_option.valFromOption(loop);
    }

    if (low !== undefined) {
      tmp.low = Caml_option.valFromOption(low);
    }

    if (manifest !== undefined) {
      tmp.manifest = Caml_option.valFromOption(manifest);
    }

    if (max !== undefined) {
      tmp.max = Caml_option.valFromOption(max);
    }

    if (maxLength !== undefined) {
      tmp.maxLength = Caml_option.valFromOption(maxLength);
    }

    if (media !== undefined) {
      tmp.media = Caml_option.valFromOption(media);
    }

    if (mediaGroup !== undefined) {
      tmp.mediaGroup = Caml_option.valFromOption(mediaGroup);
    }

    if (method !== undefined) {
      tmp.method = Caml_option.valFromOption(method);
    }

    if (min !== undefined) {
      tmp.min = Caml_option.valFromOption(min);
    }

    if (minLength !== undefined) {
      tmp.minLength = Caml_option.valFromOption(minLength);
    }

    if (multiple !== undefined) {
      tmp.multiple = Caml_option.valFromOption(multiple);
    }

    if (muted !== undefined) {
      tmp.muted = Caml_option.valFromOption(muted);
    }

    if (name !== undefined) {
      tmp.name = Caml_option.valFromOption(name);
    }

    if (nonce !== undefined) {
      tmp.nonce = Caml_option.valFromOption(nonce);
    }

    if (noValidate !== undefined) {
      tmp.noValidate = Caml_option.valFromOption(noValidate);
    }

    if (open_ !== undefined) {
      tmp.open_ = Caml_option.valFromOption(open_);
    }

    if (optimum !== undefined) {
      tmp.optimum = Caml_option.valFromOption(optimum);
    }

    if (pattern !== undefined) {
      tmp.pattern = Caml_option.valFromOption(pattern);
    }

    if (placeholder !== undefined) {
      tmp.placeholder = Caml_option.valFromOption(placeholder);
    }

    if (playsInline !== undefined) {
      tmp.playsInline = Caml_option.valFromOption(playsInline);
    }

    if (poster !== undefined) {
      tmp.poster = Caml_option.valFromOption(poster);
    }

    if (preload !== undefined) {
      tmp.preload = Caml_option.valFromOption(preload);
    }

    if (radioGroup !== undefined) {
      tmp.radioGroup = Caml_option.valFromOption(radioGroup);
    }

    if (readOnly !== undefined) {
      tmp.readOnly = Caml_option.valFromOption(readOnly);
    }

    if (rel !== undefined) {
      tmp.rel = Caml_option.valFromOption(rel);
    }

    if (required !== undefined) {
      tmp.required = Caml_option.valFromOption(required);
    }

    if (reversed !== undefined) {
      tmp.reversed = Caml_option.valFromOption(reversed);
    }

    if (rows !== undefined) {
      tmp.rows = Caml_option.valFromOption(rows);
    }

    if (rowSpan !== undefined) {
      tmp.rowSpan = Caml_option.valFromOption(rowSpan);
    }

    if (sandbox !== undefined) {
      tmp.sandbox = Caml_option.valFromOption(sandbox);
    }

    if (scope !== undefined) {
      tmp.scope = Caml_option.valFromOption(scope);
    }

    if (scoped !== undefined) {
      tmp.scoped = Caml_option.valFromOption(scoped);
    }

    if (scrolling !== undefined) {
      tmp.scrolling = Caml_option.valFromOption(scrolling);
    }

    if (selected !== undefined) {
      tmp.selected = Caml_option.valFromOption(selected);
    }

    if (shape !== undefined) {
      tmp.shape = Caml_option.valFromOption(shape);
    }

    if (size !== undefined) {
      tmp.size = Caml_option.valFromOption(size);
    }

    if (sizes !== undefined) {
      tmp.sizes = Caml_option.valFromOption(sizes);
    }

    if (span !== undefined) {
      tmp.span = Caml_option.valFromOption(span);
    }

    if (srcDoc !== undefined) {
      tmp.srcDoc = Caml_option.valFromOption(srcDoc);
    }

    if (srcLang !== undefined) {
      tmp.srcLang = Caml_option.valFromOption(srcLang);
    }

    if (srcSet !== undefined) {
      tmp.srcSet = Caml_option.valFromOption(srcSet);
    }

    if (start !== undefined) {
      tmp.start = Caml_option.valFromOption(start);
    }

    if (step !== undefined) {
      tmp.step = Caml_option.valFromOption(step);
    }

    if (summary !== undefined) {
      tmp.summary = Caml_option.valFromOption(summary);
    }

    if (target !== undefined) {
      tmp.target = Caml_option.valFromOption(target);
    }

    if (type_ !== undefined) {
      tmp.type_ = Caml_option.valFromOption(type_);
    }

    if (useMap !== undefined) {
      tmp.useMap = Caml_option.valFromOption(useMap);
    }

    if (value !== undefined) {
      tmp.value = Caml_option.valFromOption(value);
    }

    if (wrap !== undefined) {
      tmp.wrap = Caml_option.valFromOption(wrap);
    }

    if (onCopy !== undefined) {
      tmp.onCopy = Caml_option.valFromOption(onCopy);
    }

    if (onCut !== undefined) {
      tmp.onCut = Caml_option.valFromOption(onCut);
    }

    if (onPaste !== undefined) {
      tmp.onPaste = Caml_option.valFromOption(onPaste);
    }

    if (onCompositionEnd !== undefined) {
      tmp.onCompositionEnd = Caml_option.valFromOption(onCompositionEnd);
    }

    if (onCompositionStart !== undefined) {
      tmp.onCompositionStart = Caml_option.valFromOption(onCompositionStart);
    }

    if (onCompositionUpdate !== undefined) {
      tmp.onCompositionUpdate = Caml_option.valFromOption(onCompositionUpdate);
    }

    if (onKeyDown !== undefined) {
      tmp.onKeyDown = Caml_option.valFromOption(onKeyDown);
    }

    if (onKeyPress !== undefined) {
      tmp.onKeyPress = Caml_option.valFromOption(onKeyPress);
    }

    if (onKeyUp !== undefined) {
      tmp.onKeyUp = Caml_option.valFromOption(onKeyUp);
    }

    if (onFocus !== undefined) {
      tmp.onFocus = Caml_option.valFromOption(onFocus);
    }

    if (onBlur !== undefined) {
      tmp.onBlur = Caml_option.valFromOption(onBlur);
    }

    if (onInput !== undefined) {
      tmp.onInput = Caml_option.valFromOption(onInput);
    }

    if (onInvalid !== undefined) {
      tmp.onInvalid = Caml_option.valFromOption(onInvalid);
    }

    if (onContextMenu !== undefined) {
      tmp.onContextMenu = Caml_option.valFromOption(onContextMenu);
    }

    if (onDoubleClick !== undefined) {
      tmp.onDoubleClick = Caml_option.valFromOption(onDoubleClick);
    }

    if (onDrag !== undefined) {
      tmp.onDrag = Caml_option.valFromOption(onDrag);
    }

    if (onDragEnd !== undefined) {
      tmp.onDragEnd = Caml_option.valFromOption(onDragEnd);
    }

    if (onDragEnter !== undefined) {
      tmp.onDragEnter = Caml_option.valFromOption(onDragEnter);
    }

    if (onDragExit !== undefined) {
      tmp.onDragExit = Caml_option.valFromOption(onDragExit);
    }

    if (onDragLeave !== undefined) {
      tmp.onDragLeave = Caml_option.valFromOption(onDragLeave);
    }

    if (onDragOver !== undefined) {
      tmp.onDragOver = Caml_option.valFromOption(onDragOver);
    }

    if (onDragStart !== undefined) {
      tmp.onDragStart = Caml_option.valFromOption(onDragStart);
    }

    if (onDrop !== undefined) {
      tmp.onDrop = Caml_option.valFromOption(onDrop);
    }

    if (onMouseDown !== undefined) {
      tmp.onMouseDown = Caml_option.valFromOption(onMouseDown);
    }

    if (onMouseEnter !== undefined) {
      tmp.onMouseEnter = Caml_option.valFromOption(onMouseEnter);
    }

    if (onMouseLeave !== undefined) {
      tmp.onMouseLeave = Caml_option.valFromOption(onMouseLeave);
    }

    if (onMouseMove !== undefined) {
      tmp.onMouseMove = Caml_option.valFromOption(onMouseMove);
    }

    if (onMouseOut !== undefined) {
      tmp.onMouseOut = Caml_option.valFromOption(onMouseOut);
    }

    if (onMouseOver !== undefined) {
      tmp.onMouseOver = Caml_option.valFromOption(onMouseOver);
    }

    if (onMouseUp !== undefined) {
      tmp.onMouseUp = Caml_option.valFromOption(onMouseUp);
    }

    if (onSelect !== undefined) {
      tmp.onSelect = Caml_option.valFromOption(onSelect);
    }

    if (onTouchCancel !== undefined) {
      tmp.onTouchCancel = Caml_option.valFromOption(onTouchCancel);
    }

    if (onTouchEnd !== undefined) {
      tmp.onTouchEnd = Caml_option.valFromOption(onTouchEnd);
    }

    if (onTouchMove !== undefined) {
      tmp.onTouchMove = Caml_option.valFromOption(onTouchMove);
    }

    if (onTouchStart !== undefined) {
      tmp.onTouchStart = Caml_option.valFromOption(onTouchStart);
    }

    if (onPointerOver !== undefined) {
      tmp.onPointerOver = Caml_option.valFromOption(onPointerOver);
    }

    if (onPointerEnter !== undefined) {
      tmp.onPointerEnter = Caml_option.valFromOption(onPointerEnter);
    }

    if (onPointerDown !== undefined) {
      tmp.onPointerDown = Caml_option.valFromOption(onPointerDown);
    }

    if (onPointerMove !== undefined) {
      tmp.onPointerMove = Caml_option.valFromOption(onPointerMove);
    }

    if (onPointerUp !== undefined) {
      tmp.onPointerUp = Caml_option.valFromOption(onPointerUp);
    }

    if (onPointerCancel !== undefined) {
      tmp.onPointerCancel = Caml_option.valFromOption(onPointerCancel);
    }

    if (onPointerOut !== undefined) {
      tmp.onPointerOut = Caml_option.valFromOption(onPointerOut);
    }

    if (onPointerLeave !== undefined) {
      tmp.onPointerLeave = Caml_option.valFromOption(onPointerLeave);
    }

    if (onGotPointerCapture !== undefined) {
      tmp.onGotPointerCapture = Caml_option.valFromOption(onGotPointerCapture);
    }

    if (onLostPointerCapture !== undefined) {
      tmp.onLostPointerCapture = Caml_option.valFromOption(onLostPointerCapture);
    }

    if (onScroll !== undefined) {
      tmp.onScroll = Caml_option.valFromOption(onScroll);
    }

    if (onWheel !== undefined) {
      tmp.onWheel = Caml_option.valFromOption(onWheel);
    }

    if (onAbort !== undefined) {
      tmp.onAbort = Caml_option.valFromOption(onAbort);
    }

    if (onCanPlay !== undefined) {
      tmp.onCanPlay = Caml_option.valFromOption(onCanPlay);
    }

    if (onCanPlayThrough !== undefined) {
      tmp.onCanPlayThrough = Caml_option.valFromOption(onCanPlayThrough);
    }

    if (onDurationChange !== undefined) {
      tmp.onDurationChange = Caml_option.valFromOption(onDurationChange);
    }

    if (onEmptied !== undefined) {
      tmp.onEmptied = Caml_option.valFromOption(onEmptied);
    }

    if (onEncrypetd !== undefined) {
      tmp.onEncrypetd = Caml_option.valFromOption(onEncrypetd);
    }

    if (onEnded !== undefined) {
      tmp.onEnded = Caml_option.valFromOption(onEnded);
    }

    if (onError !== undefined) {
      tmp.onError = Caml_option.valFromOption(onError);
    }

    if (onLoadedData !== undefined) {
      tmp.onLoadedData = Caml_option.valFromOption(onLoadedData);
    }

    if (onLoadedMetadata !== undefined) {
      tmp.onLoadedMetadata = Caml_option.valFromOption(onLoadedMetadata);
    }

    if (onLoadStart !== undefined) {
      tmp.onLoadStart = Caml_option.valFromOption(onLoadStart);
    }

    if (onPause !== undefined) {
      tmp.onPause = Caml_option.valFromOption(onPause);
    }

    if (onPlay !== undefined) {
      tmp.onPlay = Caml_option.valFromOption(onPlay);
    }

    if (onPlaying !== undefined) {
      tmp.onPlaying = Caml_option.valFromOption(onPlaying);
    }

    if (onProgress !== undefined) {
      tmp.onProgress = Caml_option.valFromOption(onProgress);
    }

    if (onRateChange !== undefined) {
      tmp.onRateChange = Caml_option.valFromOption(onRateChange);
    }

    if (onSeeked !== undefined) {
      tmp.onSeeked = Caml_option.valFromOption(onSeeked);
    }

    if (onSeeking !== undefined) {
      tmp.onSeeking = Caml_option.valFromOption(onSeeking);
    }

    if (onStalled !== undefined) {
      tmp.onStalled = Caml_option.valFromOption(onStalled);
    }

    if (onSuspend !== undefined) {
      tmp.onSuspend = Caml_option.valFromOption(onSuspend);
    }

    if (onTimeUpdate !== undefined) {
      tmp.onTimeUpdate = Caml_option.valFromOption(onTimeUpdate);
    }

    if (onVolumeChange !== undefined) {
      tmp.onVolumeChange = Caml_option.valFromOption(onVolumeChange);
    }

    if (onWaiting !== undefined) {
      tmp.onWaiting = Caml_option.valFromOption(onWaiting);
    }

    if (onLoad !== undefined) {
      tmp.onLoad = Caml_option.valFromOption(onLoad);
    }

    if (onAnimationStart !== undefined) {
      tmp.onAnimationStart = Caml_option.valFromOption(onAnimationStart);
    }

    if (onAnimationEnd !== undefined) {
      tmp.onAnimationEnd = Caml_option.valFromOption(onAnimationEnd);
    }

    if (onAnimationIteration !== undefined) {
      tmp.onAnimationIteration = Caml_option.valFromOption(onAnimationIteration);
    }

    if (onTransitionEnd !== undefined) {
      tmp.onTransitionEnd = Caml_option.valFromOption(onTransitionEnd);
    }

    return React.createElement(Base.make, tmp);
  };

  return {
    Styles: Styles,
    Base: Base,
    make: Ancestor_Box$Make
  };
}

exports.Make = Make;
/* react Not a pure module */

/***/ }),

/***/ "./src/components/grid/Ancestor_Grid.bs.js":
/*!*************************************************!*\
  !*** ./src/components/grid/Ancestor_Grid.bs.js ***!
  \*************************************************/
/*! no static exports found */
/*! all exports used */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
// Generated by ReScript, PLEASE EDIT WITH CARE


__webpack_require__(/*! ../node_modules/core-js/modules/es.array.map.js */ "../node_modules/core-js/modules/es.array.map.js");

__webpack_require__(/*! ../node_modules/core-js/modules/es.array.reduce.js */ "../node_modules/core-js/modules/es.array.reduce.js");

__webpack_require__(/*! ../node_modules/core-js/modules/es.array.sort.js */ "../node_modules/core-js/modules/es.array.sort.js");

__webpack_require__(/*! ../node_modules/core-js/modules/es.function.name.js */ "../node_modules/core-js/modules/es.function.name.js");

var Curry = __webpack_require__(/*! rescript/lib/js/curry.js */ "../node_modules/rescript/lib/js/curry.js");

var React = __webpack_require__(/*! react */ "../node_modules/react/index.js");

var Belt_Array = __webpack_require__(/*! rescript/lib/js/belt_Array.js */ "../node_modules/rescript/lib/js/belt_Array.js");

var Belt_Option = __webpack_require__(/*! rescript/lib/js/belt_Option.js */ "../node_modules/rescript/lib/js/belt_Option.js");

var Caml_option = __webpack_require__(/*! rescript/lib/js/caml_option.js */ "../node_modules/rescript/lib/js/caml_option.js");

var Ancestor_Base = __webpack_require__(/*! ../base/Ancestor_Base.bs.js */ "./src/components/base/Ancestor_Base.bs.js");

var Ancestor_Styles = __webpack_require__(/*! ../../core/Ancestor_Styles.bs.js */ "./src/core/Ancestor_Styles.bs.js");

function Make(Maker) {
  var Base = Ancestor_Base.Make(Maker);
  var Styles = Ancestor_Styles.Make(Maker);

  var defaultStyles = Curry._1(Maker.css, "\n      width: 100%;\n      flex-wrap: wrap;\n      display: flex;\n    ");

  var createResponsiveStyles = function createResponsiveStyles(currentStyles, value) {
    var spacingInRem = Curry._1(Styles.Spacing.make, Curry._1(Maker.unboxBreakpointValue, value));

    return Curry._3(Styles.mediaQuery, currentStyles, value, "\n          display: flex;\n          flex-wrap: wrap;\n          width: calc(100% + " + spacingInRem + ");\n          margin-left: -" + spacingInRem + ";\n          margin-top: -" + spacingInRem + ";\n\n          > * {\n            box-sizing: border-box;\n            padding-left: " + spacingInRem + ";\n            padding-top: " + spacingInRem + ";\n          }\n          ");
  };

  var grid = function grid(spacing, param) {
    return Belt_Option.getWithDefault(Belt_Option.map(spacing, function (values) {
      return Curry._1(Maker.css, Belt_Array.reduce(values.sort(function (param, param$1) {
        return Curry._2(Styles.sortBySize, param, param$1);
      }), "", createResponsiveStyles));
    }), defaultStyles);
  };

  var Ancestor_Grid$Make = function Ancestor_Grid$Make(Props) {
    var borderRadius = Props.borderRadius;
    var borderTLRadius = Props.borderTLRadius;
    var borderTRRadius = Props.borderTRRadius;
    var borderBLRadius = Props.borderBLRadius;
    var borderBRRadius = Props.borderBRRadius;
    var borderStyle = Props.borderStyle;
    var borderColor = Props.borderColor;
    var borderWidth = Props.borderWidth;
    var borderRightStyle = Props.borderRightStyle;
    var borderLeftStyle = Props.borderLeftStyle;
    var borderTopStyle = Props.borderTopStyle;
    var borderBottomStyle = Props.borderBottomStyle;
    var borderRightColor = Props.borderRightColor;
    var borderLeftColor = Props.borderLeftColor;
    var borderTopColor = Props.borderTopColor;
    var borderBottomColor = Props.borderBottomColor;
    var borderRightWidth = Props.borderRightWidth;
    var borderLeftWidth = Props.borderLeftWidth;
    var borderTopWidth = Props.borderTopWidth;
    var borderBottomWidth = Props.borderBottomWidth;
    var border = Props.border;
    var borderRight = Props.borderRight;
    var borderLeft = Props.borderLeft;
    var borderTop = Props.borderTop;
    var borderBottom = Props.borderBottom;
    var bgColor = Props.bgColor;
    var bgSize = Props.bgSize;
    var bgPosition = Props.bgPosition;
    var bgImage = Props.bgImage;
    var color = Props.color;
    var display = Props.display;
    var justifyContent = Props.justifyContent;
    var flexDirection = Props.flexDirection;
    var alignItems = Props.alignItems;
    var flexBasis = Props.flexBasis;
    var flexWrap = Props.flexWrap;
    var flexGrow = Props.flexGrow;
    var alignContent = Props.alignContent;
    var alignSelf = Props.alignSelf;
    var justifySelf = Props.justifySelf;
    var flexFlow = Props.flexFlow;
    var gap = Props.gap;
    var p = Props.p;
    var px = Props.px;
    var py = Props.py;
    var pt = Props.pt;
    var pb = Props.pb;
    var pl = Props.pl;
    var pr = Props.pr;
    var m = Props.m;
    var mx = Props.mx;
    var my = Props.my;
    var mt = Props.mt;
    var mb = Props.mb;
    var ml = Props.ml;
    var mr = Props.mr;
    var textAlign = Props.textAlign;
    var fontWeight = Props.fontWeight;
    var fontSize = Props.fontSize;
    var letterSpacing = Props.letterSpacing;
    var lineHeight = Props.lineHeight;
    var width = Props.width;
    var height = Props.height;
    var minW = Props.minW;
    var minH = Props.minH;
    var maxW = Props.maxW;
    var maxH = Props.maxH;
    var position = Props.position;
    var top = Props.top;
    var bottom = Props.bottom;
    var left = Props.left;
    var right = Props.right;
    var zIndex = Props.zIndex;
    var boxSizing = Props.boxSizing;
    var overflow = Props.overflow;
    var overflowX = Props.overflowX;
    var overflowY = Props.overflowY;
    var cursor = Props.cursor;
    var visibility = Props.visibility;
    var listStyleType = Props.listStyleType;
    var listStylePosition = Props.listStylePosition;
    var listStyleImage = Props.listStyleImage;
    var listStyle = Props.listStyle;
    var outlineStyle = Props.outlineStyle;
    var outline = Props.outline;
    var textDecorationStyle = Props.textDecorationStyle;
    var textDecorationLine = Props.textDecorationLine;
    var textDecoration = Props.textDecoration;
    var transform = Props.transform;
    var spacing = Props.spacing;
    var tagOpt = Props.tag;
    var children = Props.children;
    var dangerouslySetInnerHTML = Props.dangerouslySetInnerHTML;
    var innerRef = Props.innerRef;
    var classNameOpt = Props.className;
    var id = Props.id;
    var onClick = Props.onClick;
    var onSubmit = Props.onSubmit;
    var onChange = Props.onChange;
    var src = Props.src;
    var alt = Props.alt;
    var ariaDetails = Props.ariaDetails;
    var ariaDisabled = Props.ariaDisabled;
    var ariaHidden = Props.ariaHidden;
    var ariaKeyshortcuts = Props.ariaKeyshortcuts;
    var ariaLabel = Props.ariaLabel;
    var ariaRoledescription = Props.ariaRoledescription;
    var ariaExpanded = Props.ariaExpanded;
    var ariaLevel = Props.ariaLevel;
    var ariaModal = Props.ariaModal;
    var ariaMultiline = Props.ariaMultiline;
    var ariaMultiselectable = Props.ariaMultiselectable;
    var ariaPlaceholder = Props.ariaPlaceholder;
    var ariaReadonly = Props.ariaReadonly;
    var ariaRequired = Props.ariaRequired;
    var ariaSelected = Props.ariaSelected;
    var ariaSort = Props.ariaSort;
    var ariaValuemax = Props.ariaValuemax;
    var ariaValuemin = Props.ariaValuemin;
    var ariaValuenow = Props.ariaValuenow;
    var ariaValuetext = Props.ariaValuetext;
    var ariaAtomic = Props.ariaAtomic;
    var ariaBusy = Props.ariaBusy;
    var ariaRelevant = Props.ariaRelevant;
    var ariaGrabbed = Props.ariaGrabbed;
    var ariaActivedescendant = Props.ariaActivedescendant;
    var ariaColcount = Props.ariaColcount;
    var ariaColindex = Props.ariaColindex;
    var ariaColspan = Props.ariaColspan;
    var ariaControls = Props.ariaControls;
    var ariaDescribedby = Props.ariaDescribedby;
    var ariaErrormessage = Props.ariaErrormessage;
    var ariaFlowto = Props.ariaFlowto;
    var ariaLabelledby = Props.ariaLabelledby;
    var ariaOwns = Props.ariaOwns;
    var ariaPosinset = Props.ariaPosinset;
    var ariaRowcount = Props.ariaRowcount;
    var ariaRowindex = Props.ariaRowindex;
    var ariaRowspan = Props.ariaRowspan;
    var ariaSetsize = Props.ariaSetsize;
    var defaultChecked = Props.defaultChecked;
    var defaultValue = Props.defaultValue;
    var accessKey = Props.accessKey;
    var contentEditable = Props.contentEditable;
    var contextMenu = Props.contextMenu;
    var lang = Props.lang;
    var role = Props.role;
    var style = Props.style;
    var spellCheck = Props.spellCheck;
    var tabIndex = Props.tabIndex;
    var title = Props.title;
    var itemID = Props.itemID;
    var itemProp = Props.itemProp;
    var itemRef = Props.itemRef;
    var itemScope = Props.itemScope;
    var itemType = Props.itemType;
    var accept = Props.accept;
    var acceptCharset = Props.acceptCharset;
    var action = Props.action;
    var allowFullScreen = Props.allowFullScreen;
    var async = Props.async;
    var autoComplete = Props.autoComplete;
    var autoCapitalize = Props.autoCapitalize;
    var autoFocus = Props.autoFocus;
    var autoPlay = Props.autoPlay;
    var challenge = Props.challenge;
    var charSet = Props.charSet;
    var checked = Props.checked;
    var cite = Props.cite;
    var crossOrigin = Props.crossOrigin;
    var cols = Props.cols;
    var colSpan = Props.colSpan;
    var content = Props.content;
    var controls = Props.controls;
    var coords = Props.coords;
    var data = Props.data;
    var dateTime = Props.dateTime;
    var $$default = Props["default"];
    var defer = Props.defer;
    var disabled = Props.disabled;
    var download = Props.download;
    var encType = Props.encType;
    var form = Props.form;
    var formAction = Props.formAction;
    var formTarget = Props.formTarget;
    var formMethod = Props.formMethod;
    var headers = Props.headers;
    var high = Props.high;
    var href = Props.href;
    var hrefLang = Props.hrefLang;
    var htmlFor = Props.htmlFor;
    var httpEquiv = Props.httpEquiv;
    var icon = Props.icon;
    var inputMode = Props.inputMode;
    var integrity = Props.integrity;
    var keyType = Props.keyType;
    var kind = Props.kind;
    var label = Props.label;
    var list = Props.list;
    var loop = Props.loop;
    var low = Props.low;
    var manifest = Props.manifest;
    var max = Props.max;
    var maxLength = Props.maxLength;
    var media = Props.media;
    var mediaGroup = Props.mediaGroup;
    var method = Props.method;
    var min = Props.min;
    var minLength = Props.minLength;
    var multiple = Props.multiple;
    var muted = Props.muted;
    var name = Props.name;
    var nonce = Props.nonce;
    var noValidate = Props.noValidate;
    var open_ = Props.open_;
    var optimum = Props.optimum;
    var pattern = Props.pattern;
    var placeholder = Props.placeholder;
    var playsInline = Props.playsInline;
    var poster = Props.poster;
    var preload = Props.preload;
    var radioGroup = Props.radioGroup;
    var readOnly = Props.readOnly;
    var rel = Props.rel;
    var required = Props.required;
    var reversed = Props.reversed;
    var rows = Props.rows;
    var rowSpan = Props.rowSpan;
    var sandbox = Props.sandbox;
    var scope = Props.scope;
    var scoped = Props.scoped;
    var scrolling = Props.scrolling;
    var selected = Props.selected;
    var shape = Props.shape;
    var size = Props.size;
    var sizes = Props.sizes;
    var span = Props.span;
    var srcDoc = Props.srcDoc;
    var srcLang = Props.srcLang;
    var srcSet = Props.srcSet;
    var start = Props.start;
    var step = Props.step;
    var summary = Props.summary;
    var target = Props.target;
    var type_ = Props.type_;
    var useMap = Props.useMap;
    var value = Props.value;
    var wrap = Props.wrap;
    var onCopy = Props.onCopy;
    var onCut = Props.onCut;
    var onPaste = Props.onPaste;
    var onCompositionEnd = Props.onCompositionEnd;
    var onCompositionStart = Props.onCompositionStart;
    var onCompositionUpdate = Props.onCompositionUpdate;
    var onKeyDown = Props.onKeyDown;
    var onKeyPress = Props.onKeyPress;
    var onKeyUp = Props.onKeyUp;
    var onFocus = Props.onFocus;
    var onBlur = Props.onBlur;
    var onInput = Props.onInput;
    var onInvalid = Props.onInvalid;
    var onContextMenu = Props.onContextMenu;
    var onDoubleClick = Props.onDoubleClick;
    var onDrag = Props.onDrag;
    var onDragEnd = Props.onDragEnd;
    var onDragEnter = Props.onDragEnter;
    var onDragExit = Props.onDragExit;
    var onDragLeave = Props.onDragLeave;
    var onDragOver = Props.onDragOver;
    var onDragStart = Props.onDragStart;
    var onDrop = Props.onDrop;
    var onMouseDown = Props.onMouseDown;
    var onMouseEnter = Props.onMouseEnter;
    var onMouseLeave = Props.onMouseLeave;
    var onMouseMove = Props.onMouseMove;
    var onMouseOut = Props.onMouseOut;
    var onMouseOver = Props.onMouseOver;
    var onMouseUp = Props.onMouseUp;
    var onSelect = Props.onSelect;
    var onTouchCancel = Props.onTouchCancel;
    var onTouchEnd = Props.onTouchEnd;
    var onTouchMove = Props.onTouchMove;
    var onTouchStart = Props.onTouchStart;
    var onPointerOver = Props.onPointerOver;
    var onPointerEnter = Props.onPointerEnter;
    var onPointerDown = Props.onPointerDown;
    var onPointerMove = Props.onPointerMove;
    var onPointerUp = Props.onPointerUp;
    var onPointerCancel = Props.onPointerCancel;
    var onPointerOut = Props.onPointerOut;
    var onPointerLeave = Props.onPointerLeave;
    var onGotPointerCapture = Props.onGotPointerCapture;
    var onLostPointerCapture = Props.onLostPointerCapture;
    var onScroll = Props.onScroll;
    var onWheel = Props.onWheel;
    var onAbort = Props.onAbort;
    var onCanPlay = Props.onCanPlay;
    var onCanPlayThrough = Props.onCanPlayThrough;
    var onDurationChange = Props.onDurationChange;
    var onEmptied = Props.onEmptied;
    var onEncrypetd = Props.onEncrypetd;
    var onEnded = Props.onEnded;
    var onError = Props.onError;
    var onLoadedData = Props.onLoadedData;
    var onLoadedMetadata = Props.onLoadedMetadata;
    var onLoadStart = Props.onLoadStart;
    var onPause = Props.onPause;
    var onPlay = Props.onPlay;
    var onPlaying = Props.onPlaying;
    var onProgress = Props.onProgress;
    var onRateChange = Props.onRateChange;
    var onSeeked = Props.onSeeked;
    var onSeeking = Props.onSeeking;
    var onStalled = Props.onStalled;
    var onSuspend = Props.onSuspend;
    var onTimeUpdate = Props.onTimeUpdate;
    var onVolumeChange = Props.onVolumeChange;
    var onWaiting = Props.onWaiting;
    var onLoad = Props.onLoad;
    var onAnimationStart = Props.onAnimationStart;
    var onAnimationEnd = Props.onAnimationEnd;
    var onAnimationIteration = Props.onAnimationIteration;
    var onTransitionEnd = Props.onTransitionEnd;
    var tag = tagOpt !== undefined ? tagOpt : "div";
    var className = classNameOpt !== undefined ? classNameOpt : "";
    var tmp = {
      tag: tag,
      className: grid(spacing, undefined) + " " + className
    };

    if (borderRadius !== undefined) {
      tmp.borderRadius = Caml_option.valFromOption(borderRadius);
    }

    if (borderTLRadius !== undefined) {
      tmp.borderTLRadius = Caml_option.valFromOption(borderTLRadius);
    }

    if (borderTRRadius !== undefined) {
      tmp.borderTRRadius = Caml_option.valFromOption(borderTRRadius);
    }

    if (borderBLRadius !== undefined) {
      tmp.borderBLRadius = Caml_option.valFromOption(borderBLRadius);
    }

    if (borderBRRadius !== undefined) {
      tmp.borderBRRadius = Caml_option.valFromOption(borderBRRadius);
    }

    if (borderStyle !== undefined) {
      tmp.borderStyle = Caml_option.valFromOption(borderStyle);
    }

    if (borderColor !== undefined) {
      tmp.borderColor = Caml_option.valFromOption(borderColor);
    }

    if (borderWidth !== undefined) {
      tmp.borderWidth = Caml_option.valFromOption(borderWidth);
    }

    if (borderRightStyle !== undefined) {
      tmp.borderRightStyle = Caml_option.valFromOption(borderRightStyle);
    }

    if (borderLeftStyle !== undefined) {
      tmp.borderLeftStyle = Caml_option.valFromOption(borderLeftStyle);
    }

    if (borderTopStyle !== undefined) {
      tmp.borderTopStyle = Caml_option.valFromOption(borderTopStyle);
    }

    if (borderBottomStyle !== undefined) {
      tmp.borderBottomStyle = Caml_option.valFromOption(borderBottomStyle);
    }

    if (borderRightColor !== undefined) {
      tmp.borderRightColor = Caml_option.valFromOption(borderRightColor);
    }

    if (borderLeftColor !== undefined) {
      tmp.borderLeftColor = Caml_option.valFromOption(borderLeftColor);
    }

    if (borderTopColor !== undefined) {
      tmp.borderTopColor = Caml_option.valFromOption(borderTopColor);
    }

    if (borderBottomColor !== undefined) {
      tmp.borderBottomColor = Caml_option.valFromOption(borderBottomColor);
    }

    if (borderRightWidth !== undefined) {
      tmp.borderRightWidth = Caml_option.valFromOption(borderRightWidth);
    }

    if (borderLeftWidth !== undefined) {
      tmp.borderLeftWidth = Caml_option.valFromOption(borderLeftWidth);
    }

    if (borderTopWidth !== undefined) {
      tmp.borderTopWidth = Caml_option.valFromOption(borderTopWidth);
    }

    if (borderBottomWidth !== undefined) {
      tmp.borderBottomWidth = Caml_option.valFromOption(borderBottomWidth);
    }

    if (border !== undefined) {
      tmp.border = Caml_option.valFromOption(border);
    }

    if (borderRight !== undefined) {
      tmp.borderRight = Caml_option.valFromOption(borderRight);
    }

    if (borderLeft !== undefined) {
      tmp.borderLeft = Caml_option.valFromOption(borderLeft);
    }

    if (borderTop !== undefined) {
      tmp.borderTop = Caml_option.valFromOption(borderTop);
    }

    if (borderBottom !== undefined) {
      tmp.borderBottom = Caml_option.valFromOption(borderBottom);
    }

    if (bgColor !== undefined) {
      tmp.bgColor = Caml_option.valFromOption(bgColor);
    }

    if (bgSize !== undefined) {
      tmp.bgSize = Caml_option.valFromOption(bgSize);
    }

    if (bgPosition !== undefined) {
      tmp.bgPosition = Caml_option.valFromOption(bgPosition);
    }

    if (bgImage !== undefined) {
      tmp.bgImage = Caml_option.valFromOption(bgImage);
    }

    if (color !== undefined) {
      tmp.color = Caml_option.valFromOption(color);
    }

    if (display !== undefined) {
      tmp.display = Caml_option.valFromOption(display);
    }

    if (justifyContent !== undefined) {
      tmp.justifyContent = Caml_option.valFromOption(justifyContent);
    }

    if (flexDirection !== undefined) {
      tmp.flexDirection = Caml_option.valFromOption(flexDirection);
    }

    if (alignItems !== undefined) {
      tmp.alignItems = Caml_option.valFromOption(alignItems);
    }

    if (flexBasis !== undefined) {
      tmp.flexBasis = Caml_option.valFromOption(flexBasis);
    }

    if (flexWrap !== undefined) {
      tmp.flexWrap = Caml_option.valFromOption(flexWrap);
    }

    if (flexGrow !== undefined) {
      tmp.flexGrow = Caml_option.valFromOption(flexGrow);
    }

    if (alignContent !== undefined) {
      tmp.alignContent = Caml_option.valFromOption(alignContent);
    }

    if (alignSelf !== undefined) {
      tmp.alignSelf = Caml_option.valFromOption(alignSelf);
    }

    if (justifySelf !== undefined) {
      tmp.justifySelf = Caml_option.valFromOption(justifySelf);
    }

    if (flexFlow !== undefined) {
      tmp.flexFlow = Caml_option.valFromOption(flexFlow);
    }

    if (gap !== undefined) {
      tmp.gap = Caml_option.valFromOption(gap);
    }

    if (p !== undefined) {
      tmp.p = Caml_option.valFromOption(p);
    }

    if (px !== undefined) {
      tmp.px = Caml_option.valFromOption(px);
    }

    if (py !== undefined) {
      tmp.py = Caml_option.valFromOption(py);
    }

    if (pt !== undefined) {
      tmp.pt = Caml_option.valFromOption(pt);
    }

    if (pb !== undefined) {
      tmp.pb = Caml_option.valFromOption(pb);
    }

    if (pl !== undefined) {
      tmp.pl = Caml_option.valFromOption(pl);
    }

    if (pr !== undefined) {
      tmp.pr = Caml_option.valFromOption(pr);
    }

    if (m !== undefined) {
      tmp.m = Caml_option.valFromOption(m);
    }

    if (mx !== undefined) {
      tmp.mx = Caml_option.valFromOption(mx);
    }

    if (my !== undefined) {
      tmp.my = Caml_option.valFromOption(my);
    }

    if (mt !== undefined) {
      tmp.mt = Caml_option.valFromOption(mt);
    }

    if (mb !== undefined) {
      tmp.mb = Caml_option.valFromOption(mb);
    }

    if (ml !== undefined) {
      tmp.ml = Caml_option.valFromOption(ml);
    }

    if (mr !== undefined) {
      tmp.mr = Caml_option.valFromOption(mr);
    }

    if (textAlign !== undefined) {
      tmp.textAlign = Caml_option.valFromOption(textAlign);
    }

    if (fontWeight !== undefined) {
      tmp.fontWeight = Caml_option.valFromOption(fontWeight);
    }

    if (fontSize !== undefined) {
      tmp.fontSize = Caml_option.valFromOption(fontSize);
    }

    if (letterSpacing !== undefined) {
      tmp.letterSpacing = Caml_option.valFromOption(letterSpacing);
    }

    if (lineHeight !== undefined) {
      tmp.lineHeight = Caml_option.valFromOption(lineHeight);
    }

    if (width !== undefined) {
      tmp.width = Caml_option.valFromOption(width);
    }

    if (height !== undefined) {
      tmp.height = Caml_option.valFromOption(height);
    }

    if (minW !== undefined) {
      tmp.minW = Caml_option.valFromOption(minW);
    }

    if (minH !== undefined) {
      tmp.minH = Caml_option.valFromOption(minH);
    }

    if (maxW !== undefined) {
      tmp.maxW = Caml_option.valFromOption(maxW);
    }

    if (maxH !== undefined) {
      tmp.maxH = Caml_option.valFromOption(maxH);
    }

    if (position !== undefined) {
      tmp.position = Caml_option.valFromOption(position);
    }

    if (top !== undefined) {
      tmp.top = Caml_option.valFromOption(top);
    }

    if (bottom !== undefined) {
      tmp.bottom = Caml_option.valFromOption(bottom);
    }

    if (left !== undefined) {
      tmp.left = Caml_option.valFromOption(left);
    }

    if (right !== undefined) {
      tmp.right = Caml_option.valFromOption(right);
    }

    if (zIndex !== undefined) {
      tmp.zIndex = Caml_option.valFromOption(zIndex);
    }

    if (boxSizing !== undefined) {
      tmp.boxSizing = Caml_option.valFromOption(boxSizing);
    }

    if (overflow !== undefined) {
      tmp.overflow = Caml_option.valFromOption(overflow);
    }

    if (overflowX !== undefined) {
      tmp.overflowX = Caml_option.valFromOption(overflowX);
    }

    if (overflowY !== undefined) {
      tmp.overflowY = Caml_option.valFromOption(overflowY);
    }

    if (cursor !== undefined) {
      tmp.cursor = Caml_option.valFromOption(cursor);
    }

    if (visibility !== undefined) {
      tmp.visibility = Caml_option.valFromOption(visibility);
    }

    if (listStyleType !== undefined) {
      tmp.listStyleType = Caml_option.valFromOption(listStyleType);
    }

    if (listStylePosition !== undefined) {
      tmp.listStylePosition = Caml_option.valFromOption(listStylePosition);
    }

    if (listStyleImage !== undefined) {
      tmp.listStyleImage = Caml_option.valFromOption(listStyleImage);
    }

    if (listStyle !== undefined) {
      tmp.listStyle = Caml_option.valFromOption(listStyle);
    }

    if (outlineStyle !== undefined) {
      tmp.outlineStyle = Caml_option.valFromOption(outlineStyle);
    }

    if (outline !== undefined) {
      tmp.outline = Caml_option.valFromOption(outline);
    }

    if (textDecorationStyle !== undefined) {
      tmp.textDecorationStyle = Caml_option.valFromOption(textDecorationStyle);
    }

    if (textDecorationLine !== undefined) {
      tmp.textDecorationLine = Caml_option.valFromOption(textDecorationLine);
    }

    if (textDecoration !== undefined) {
      tmp.textDecoration = Caml_option.valFromOption(textDecoration);
    }

    if (transform !== undefined) {
      tmp.transform = Caml_option.valFromOption(transform);
    }

    if (innerRef !== undefined) {
      tmp.innerRef = Caml_option.valFromOption(innerRef);
    }

    if (dangerouslySetInnerHTML !== undefined) {
      tmp.dangerouslySetInnerHTML = Caml_option.valFromOption(dangerouslySetInnerHTML);
    }

    if (children !== undefined) {
      tmp.children = Caml_option.valFromOption(children);
    }

    if (id !== undefined) {
      tmp.id = Caml_option.valFromOption(id);
    }

    if (onClick !== undefined) {
      tmp.onClick = Caml_option.valFromOption(onClick);
    }

    if (onSubmit !== undefined) {
      tmp.onSubmit = Caml_option.valFromOption(onSubmit);
    }

    if (onChange !== undefined) {
      tmp.onChange = Caml_option.valFromOption(onChange);
    }

    if (alt !== undefined) {
      tmp.alt = Caml_option.valFromOption(alt);
    }

    if (src !== undefined) {
      tmp.src = Caml_option.valFromOption(src);
    }

    if (ariaDetails !== undefined) {
      tmp.ariaDetails = Caml_option.valFromOption(ariaDetails);
    }

    if (ariaDisabled !== undefined) {
      tmp.ariaDisabled = Caml_option.valFromOption(ariaDisabled);
    }

    if (ariaHidden !== undefined) {
      tmp.ariaHidden = Caml_option.valFromOption(ariaHidden);
    }

    if (ariaKeyshortcuts !== undefined) {
      tmp.ariaKeyshortcuts = Caml_option.valFromOption(ariaKeyshortcuts);
    }

    if (ariaLabel !== undefined) {
      tmp.ariaLabel = Caml_option.valFromOption(ariaLabel);
    }

    if (ariaRoledescription !== undefined) {
      tmp.ariaRoledescription = Caml_option.valFromOption(ariaRoledescription);
    }

    if (ariaExpanded !== undefined) {
      tmp.ariaExpanded = Caml_option.valFromOption(ariaExpanded);
    }

    if (ariaLevel !== undefined) {
      tmp.ariaLevel = Caml_option.valFromOption(ariaLevel);
    }

    if (ariaModal !== undefined) {
      tmp.ariaModal = Caml_option.valFromOption(ariaModal);
    }

    if (ariaMultiline !== undefined) {
      tmp.ariaMultiline = Caml_option.valFromOption(ariaMultiline);
    }

    if (ariaMultiselectable !== undefined) {
      tmp.ariaMultiselectable = Caml_option.valFromOption(ariaMultiselectable);
    }

    if (ariaPlaceholder !== undefined) {
      tmp.ariaPlaceholder = Caml_option.valFromOption(ariaPlaceholder);
    }

    if (ariaReadonly !== undefined) {
      tmp.ariaReadonly = Caml_option.valFromOption(ariaReadonly);
    }

    if (ariaRequired !== undefined) {
      tmp.ariaRequired = Caml_option.valFromOption(ariaRequired);
    }

    if (ariaSelected !== undefined) {
      tmp.ariaSelected = Caml_option.valFromOption(ariaSelected);
    }

    if (ariaSort !== undefined) {
      tmp.ariaSort = Caml_option.valFromOption(ariaSort);
    }

    if (ariaValuemax !== undefined) {
      tmp.ariaValuemax = Caml_option.valFromOption(ariaValuemax);
    }

    if (ariaValuemin !== undefined) {
      tmp.ariaValuemin = Caml_option.valFromOption(ariaValuemin);
    }

    if (ariaValuenow !== undefined) {
      tmp.ariaValuenow = Caml_option.valFromOption(ariaValuenow);
    }

    if (ariaValuetext !== undefined) {
      tmp.ariaValuetext = Caml_option.valFromOption(ariaValuetext);
    }

    if (ariaAtomic !== undefined) {
      tmp.ariaAtomic = Caml_option.valFromOption(ariaAtomic);
    }

    if (ariaBusy !== undefined) {
      tmp.ariaBusy = Caml_option.valFromOption(ariaBusy);
    }

    if (ariaRelevant !== undefined) {
      tmp.ariaRelevant = Caml_option.valFromOption(ariaRelevant);
    }

    if (ariaGrabbed !== undefined) {
      tmp.ariaGrabbed = Caml_option.valFromOption(ariaGrabbed);
    }

    if (ariaActivedescendant !== undefined) {
      tmp.ariaActivedescendant = Caml_option.valFromOption(ariaActivedescendant);
    }

    if (ariaColcount !== undefined) {
      tmp.ariaColcount = Caml_option.valFromOption(ariaColcount);
    }

    if (ariaColindex !== undefined) {
      tmp.ariaColindex = Caml_option.valFromOption(ariaColindex);
    }

    if (ariaColspan !== undefined) {
      tmp.ariaColspan = Caml_option.valFromOption(ariaColspan);
    }

    if (ariaControls !== undefined) {
      tmp.ariaControls = Caml_option.valFromOption(ariaControls);
    }

    if (ariaDescribedby !== undefined) {
      tmp.ariaDescribedby = Caml_option.valFromOption(ariaDescribedby);
    }

    if (ariaErrormessage !== undefined) {
      tmp.ariaErrormessage = Caml_option.valFromOption(ariaErrormessage);
    }

    if (ariaFlowto !== undefined) {
      tmp.ariaFlowto = Caml_option.valFromOption(ariaFlowto);
    }

    if (ariaLabelledby !== undefined) {
      tmp.ariaLabelledby = Caml_option.valFromOption(ariaLabelledby);
    }

    if (ariaOwns !== undefined) {
      tmp.ariaOwns = Caml_option.valFromOption(ariaOwns);
    }

    if (ariaPosinset !== undefined) {
      tmp.ariaPosinset = Caml_option.valFromOption(ariaPosinset);
    }

    if (ariaRowcount !== undefined) {
      tmp.ariaRowcount = Caml_option.valFromOption(ariaRowcount);
    }

    if (ariaRowindex !== undefined) {
      tmp.ariaRowindex = Caml_option.valFromOption(ariaRowindex);
    }

    if (ariaRowspan !== undefined) {
      tmp.ariaRowspan = Caml_option.valFromOption(ariaRowspan);
    }

    if (ariaSetsize !== undefined) {
      tmp.ariaSetsize = Caml_option.valFromOption(ariaSetsize);
    }

    if (defaultChecked !== undefined) {
      tmp.defaultChecked = Caml_option.valFromOption(defaultChecked);
    }

    if (defaultValue !== undefined) {
      tmp.defaultValue = Caml_option.valFromOption(defaultValue);
    }

    if (accessKey !== undefined) {
      tmp.accessKey = Caml_option.valFromOption(accessKey);
    }

    if (contentEditable !== undefined) {
      tmp.contentEditable = Caml_option.valFromOption(contentEditable);
    }

    if (contextMenu !== undefined) {
      tmp.contextMenu = Caml_option.valFromOption(contextMenu);
    }

    if (lang !== undefined) {
      tmp.lang = Caml_option.valFromOption(lang);
    }

    if (role !== undefined) {
      tmp.role = Caml_option.valFromOption(role);
    }

    if (style !== undefined) {
      tmp.style = Caml_option.valFromOption(style);
    }

    if (spellCheck !== undefined) {
      tmp.spellCheck = Caml_option.valFromOption(spellCheck);
    }

    if (tabIndex !== undefined) {
      tmp.tabIndex = Caml_option.valFromOption(tabIndex);
    }

    if (title !== undefined) {
      tmp.title = Caml_option.valFromOption(title);
    }

    if (itemID !== undefined) {
      tmp.itemID = Caml_option.valFromOption(itemID);
    }

    if (itemProp !== undefined) {
      tmp.itemProp = Caml_option.valFromOption(itemProp);
    }

    if (itemRef !== undefined) {
      tmp.itemRef = Caml_option.valFromOption(itemRef);
    }

    if (itemScope !== undefined) {
      tmp.itemScope = Caml_option.valFromOption(itemScope);
    }

    if (itemType !== undefined) {
      tmp.itemType = Caml_option.valFromOption(itemType);
    }

    if (accept !== undefined) {
      tmp.accept = Caml_option.valFromOption(accept);
    }

    if (acceptCharset !== undefined) {
      tmp.acceptCharset = Caml_option.valFromOption(acceptCharset);
    }

    if (action !== undefined) {
      tmp.action = Caml_option.valFromOption(action);
    }

    if (allowFullScreen !== undefined) {
      tmp.allowFullScreen = Caml_option.valFromOption(allowFullScreen);
    }

    if (async !== undefined) {
      tmp.async = Caml_option.valFromOption(async);
    }

    if (autoComplete !== undefined) {
      tmp.autoComplete = Caml_option.valFromOption(autoComplete);
    }

    if (autoCapitalize !== undefined) {
      tmp.autoCapitalize = Caml_option.valFromOption(autoCapitalize);
    }

    if (autoFocus !== undefined) {
      tmp.autoFocus = Caml_option.valFromOption(autoFocus);
    }

    if (autoPlay !== undefined) {
      tmp.autoPlay = Caml_option.valFromOption(autoPlay);
    }

    if (challenge !== undefined) {
      tmp.challenge = Caml_option.valFromOption(challenge);
    }

    if (charSet !== undefined) {
      tmp.charSet = Caml_option.valFromOption(charSet);
    }

    if (checked !== undefined) {
      tmp.checked = Caml_option.valFromOption(checked);
    }

    if (cite !== undefined) {
      tmp.cite = Caml_option.valFromOption(cite);
    }

    if (crossOrigin !== undefined) {
      tmp.crossOrigin = Caml_option.valFromOption(crossOrigin);
    }

    if (cols !== undefined) {
      tmp.cols = Caml_option.valFromOption(cols);
    }

    if (colSpan !== undefined) {
      tmp.colSpan = Caml_option.valFromOption(colSpan);
    }

    if (content !== undefined) {
      tmp.content = Caml_option.valFromOption(content);
    }

    if (controls !== undefined) {
      tmp.controls = Caml_option.valFromOption(controls);
    }

    if (coords !== undefined) {
      tmp.coords = Caml_option.valFromOption(coords);
    }

    if (data !== undefined) {
      tmp.data = Caml_option.valFromOption(data);
    }

    if (dateTime !== undefined) {
      tmp.dateTime = Caml_option.valFromOption(dateTime);
    }

    if ($$default !== undefined) {
      tmp["default"] = Caml_option.valFromOption($$default);
    }

    if (defer !== undefined) {
      tmp.defer = Caml_option.valFromOption(defer);
    }

    if (disabled !== undefined) {
      tmp.disabled = Caml_option.valFromOption(disabled);
    }

    if (download !== undefined) {
      tmp.download = Caml_option.valFromOption(download);
    }

    if (encType !== undefined) {
      tmp.encType = Caml_option.valFromOption(encType);
    }

    if (form !== undefined) {
      tmp.form = Caml_option.valFromOption(form);
    }

    if (formAction !== undefined) {
      tmp.formAction = Caml_option.valFromOption(formAction);
    }

    if (formTarget !== undefined) {
      tmp.formTarget = Caml_option.valFromOption(formTarget);
    }

    if (formMethod !== undefined) {
      tmp.formMethod = Caml_option.valFromOption(formMethod);
    }

    if (headers !== undefined) {
      tmp.headers = Caml_option.valFromOption(headers);
    }

    if (high !== undefined) {
      tmp.high = Caml_option.valFromOption(high);
    }

    if (href !== undefined) {
      tmp.href = Caml_option.valFromOption(href);
    }

    if (hrefLang !== undefined) {
      tmp.hrefLang = Caml_option.valFromOption(hrefLang);
    }

    if (htmlFor !== undefined) {
      tmp.htmlFor = Caml_option.valFromOption(htmlFor);
    }

    if (httpEquiv !== undefined) {
      tmp.httpEquiv = Caml_option.valFromOption(httpEquiv);
    }

    if (icon !== undefined) {
      tmp.icon = Caml_option.valFromOption(icon);
    }

    if (inputMode !== undefined) {
      tmp.inputMode = Caml_option.valFromOption(inputMode);
    }

    if (integrity !== undefined) {
      tmp.integrity = Caml_option.valFromOption(integrity);
    }

    if (keyType !== undefined) {
      tmp.keyType = Caml_option.valFromOption(keyType);
    }

    if (kind !== undefined) {
      tmp.kind = Caml_option.valFromOption(kind);
    }

    if (label !== undefined) {
      tmp.label = Caml_option.valFromOption(label);
    }

    if (list !== undefined) {
      tmp.list = Caml_option.valFromOption(list);
    }

    if (loop !== undefined) {
      tmp.loop = Caml_option.valFromOption(loop);
    }

    if (low !== undefined) {
      tmp.low = Caml_option.valFromOption(low);
    }

    if (manifest !== undefined) {
      tmp.manifest = Caml_option.valFromOption(manifest);
    }

    if (max !== undefined) {
      tmp.max = Caml_option.valFromOption(max);
    }

    if (maxLength !== undefined) {
      tmp.maxLength = Caml_option.valFromOption(maxLength);
    }

    if (media !== undefined) {
      tmp.media = Caml_option.valFromOption(media);
    }

    if (mediaGroup !== undefined) {
      tmp.mediaGroup = Caml_option.valFromOption(mediaGroup);
    }

    if (method !== undefined) {
      tmp.method = Caml_option.valFromOption(method);
    }

    if (min !== undefined) {
      tmp.min = Caml_option.valFromOption(min);
    }

    if (minLength !== undefined) {
      tmp.minLength = Caml_option.valFromOption(minLength);
    }

    if (multiple !== undefined) {
      tmp.multiple = Caml_option.valFromOption(multiple);
    }

    if (muted !== undefined) {
      tmp.muted = Caml_option.valFromOption(muted);
    }

    if (name !== undefined) {
      tmp.name = Caml_option.valFromOption(name);
    }

    if (nonce !== undefined) {
      tmp.nonce = Caml_option.valFromOption(nonce);
    }

    if (noValidate !== undefined) {
      tmp.noValidate = Caml_option.valFromOption(noValidate);
    }

    if (open_ !== undefined) {
      tmp.open_ = Caml_option.valFromOption(open_);
    }

    if (optimum !== undefined) {
      tmp.optimum = Caml_option.valFromOption(optimum);
    }

    if (pattern !== undefined) {
      tmp.pattern = Caml_option.valFromOption(pattern);
    }

    if (placeholder !== undefined) {
      tmp.placeholder = Caml_option.valFromOption(placeholder);
    }

    if (playsInline !== undefined) {
      tmp.playsInline = Caml_option.valFromOption(playsInline);
    }

    if (poster !== undefined) {
      tmp.poster = Caml_option.valFromOption(poster);
    }

    if (preload !== undefined) {
      tmp.preload = Caml_option.valFromOption(preload);
    }

    if (radioGroup !== undefined) {
      tmp.radioGroup = Caml_option.valFromOption(radioGroup);
    }

    if (readOnly !== undefined) {
      tmp.readOnly = Caml_option.valFromOption(readOnly);
    }

    if (rel !== undefined) {
      tmp.rel = Caml_option.valFromOption(rel);
    }

    if (required !== undefined) {
      tmp.required = Caml_option.valFromOption(required);
    }

    if (reversed !== undefined) {
      tmp.reversed = Caml_option.valFromOption(reversed);
    }

    if (rows !== undefined) {
      tmp.rows = Caml_option.valFromOption(rows);
    }

    if (rowSpan !== undefined) {
      tmp.rowSpan = Caml_option.valFromOption(rowSpan);
    }

    if (sandbox !== undefined) {
      tmp.sandbox = Caml_option.valFromOption(sandbox);
    }

    if (scope !== undefined) {
      tmp.scope = Caml_option.valFromOption(scope);
    }

    if (scoped !== undefined) {
      tmp.scoped = Caml_option.valFromOption(scoped);
    }

    if (scrolling !== undefined) {
      tmp.scrolling = Caml_option.valFromOption(scrolling);
    }

    if (selected !== undefined) {
      tmp.selected = Caml_option.valFromOption(selected);
    }

    if (shape !== undefined) {
      tmp.shape = Caml_option.valFromOption(shape);
    }

    if (size !== undefined) {
      tmp.size = Caml_option.valFromOption(size);
    }

    if (sizes !== undefined) {
      tmp.sizes = Caml_option.valFromOption(sizes);
    }

    if (span !== undefined) {
      tmp.span = Caml_option.valFromOption(span);
    }

    if (srcDoc !== undefined) {
      tmp.srcDoc = Caml_option.valFromOption(srcDoc);
    }

    if (srcLang !== undefined) {
      tmp.srcLang = Caml_option.valFromOption(srcLang);
    }

    if (srcSet !== undefined) {
      tmp.srcSet = Caml_option.valFromOption(srcSet);
    }

    if (start !== undefined) {
      tmp.start = Caml_option.valFromOption(start);
    }

    if (step !== undefined) {
      tmp.step = Caml_option.valFromOption(step);
    }

    if (summary !== undefined) {
      tmp.summary = Caml_option.valFromOption(summary);
    }

    if (target !== undefined) {
      tmp.target = Caml_option.valFromOption(target);
    }

    if (type_ !== undefined) {
      tmp.type_ = Caml_option.valFromOption(type_);
    }

    if (useMap !== undefined) {
      tmp.useMap = Caml_option.valFromOption(useMap);
    }

    if (value !== undefined) {
      tmp.value = Caml_option.valFromOption(value);
    }

    if (wrap !== undefined) {
      tmp.wrap = Caml_option.valFromOption(wrap);
    }

    if (onCopy !== undefined) {
      tmp.onCopy = Caml_option.valFromOption(onCopy);
    }

    if (onCut !== undefined) {
      tmp.onCut = Caml_option.valFromOption(onCut);
    }

    if (onPaste !== undefined) {
      tmp.onPaste = Caml_option.valFromOption(onPaste);
    }

    if (onCompositionEnd !== undefined) {
      tmp.onCompositionEnd = Caml_option.valFromOption(onCompositionEnd);
    }

    if (onCompositionStart !== undefined) {
      tmp.onCompositionStart = Caml_option.valFromOption(onCompositionStart);
    }

    if (onCompositionUpdate !== undefined) {
      tmp.onCompositionUpdate = Caml_option.valFromOption(onCompositionUpdate);
    }

    if (onKeyDown !== undefined) {
      tmp.onKeyDown = Caml_option.valFromOption(onKeyDown);
    }

    if (onKeyPress !== undefined) {
      tmp.onKeyPress = Caml_option.valFromOption(onKeyPress);
    }

    if (onKeyUp !== undefined) {
      tmp.onKeyUp = Caml_option.valFromOption(onKeyUp);
    }

    if (onFocus !== undefined) {
      tmp.onFocus = Caml_option.valFromOption(onFocus);
    }

    if (onBlur !== undefined) {
      tmp.onBlur = Caml_option.valFromOption(onBlur);
    }

    if (onInput !== undefined) {
      tmp.onInput = Caml_option.valFromOption(onInput);
    }

    if (onInvalid !== undefined) {
      tmp.onInvalid = Caml_option.valFromOption(onInvalid);
    }

    if (onContextMenu !== undefined) {
      tmp.onContextMenu = Caml_option.valFromOption(onContextMenu);
    }

    if (onDoubleClick !== undefined) {
      tmp.onDoubleClick = Caml_option.valFromOption(onDoubleClick);
    }

    if (onDrag !== undefined) {
      tmp.onDrag = Caml_option.valFromOption(onDrag);
    }

    if (onDragEnd !== undefined) {
      tmp.onDragEnd = Caml_option.valFromOption(onDragEnd);
    }

    if (onDragEnter !== undefined) {
      tmp.onDragEnter = Caml_option.valFromOption(onDragEnter);
    }

    if (onDragExit !== undefined) {
      tmp.onDragExit = Caml_option.valFromOption(onDragExit);
    }

    if (onDragLeave !== undefined) {
      tmp.onDragLeave = Caml_option.valFromOption(onDragLeave);
    }

    if (onDragOver !== undefined) {
      tmp.onDragOver = Caml_option.valFromOption(onDragOver);
    }

    if (onDragStart !== undefined) {
      tmp.onDragStart = Caml_option.valFromOption(onDragStart);
    }

    if (onDrop !== undefined) {
      tmp.onDrop = Caml_option.valFromOption(onDrop);
    }

    if (onMouseDown !== undefined) {
      tmp.onMouseDown = Caml_option.valFromOption(onMouseDown);
    }

    if (onMouseEnter !== undefined) {
      tmp.onMouseEnter = Caml_option.valFromOption(onMouseEnter);
    }

    if (onMouseLeave !== undefined) {
      tmp.onMouseLeave = Caml_option.valFromOption(onMouseLeave);
    }

    if (onMouseMove !== undefined) {
      tmp.onMouseMove = Caml_option.valFromOption(onMouseMove);
    }

    if (onMouseOut !== undefined) {
      tmp.onMouseOut = Caml_option.valFromOption(onMouseOut);
    }

    if (onMouseOver !== undefined) {
      tmp.onMouseOver = Caml_option.valFromOption(onMouseOver);
    }

    if (onMouseUp !== undefined) {
      tmp.onMouseUp = Caml_option.valFromOption(onMouseUp);
    }

    if (onSelect !== undefined) {
      tmp.onSelect = Caml_option.valFromOption(onSelect);
    }

    if (onTouchCancel !== undefined) {
      tmp.onTouchCancel = Caml_option.valFromOption(onTouchCancel);
    }

    if (onTouchEnd !== undefined) {
      tmp.onTouchEnd = Caml_option.valFromOption(onTouchEnd);
    }

    if (onTouchMove !== undefined) {
      tmp.onTouchMove = Caml_option.valFromOption(onTouchMove);
    }

    if (onTouchStart !== undefined) {
      tmp.onTouchStart = Caml_option.valFromOption(onTouchStart);
    }

    if (onPointerOver !== undefined) {
      tmp.onPointerOver = Caml_option.valFromOption(onPointerOver);
    }

    if (onPointerEnter !== undefined) {
      tmp.onPointerEnter = Caml_option.valFromOption(onPointerEnter);
    }

    if (onPointerDown !== undefined) {
      tmp.onPointerDown = Caml_option.valFromOption(onPointerDown);
    }

    if (onPointerMove !== undefined) {
      tmp.onPointerMove = Caml_option.valFromOption(onPointerMove);
    }

    if (onPointerUp !== undefined) {
      tmp.onPointerUp = Caml_option.valFromOption(onPointerUp);
    }

    if (onPointerCancel !== undefined) {
      tmp.onPointerCancel = Caml_option.valFromOption(onPointerCancel);
    }

    if (onPointerOut !== undefined) {
      tmp.onPointerOut = Caml_option.valFromOption(onPointerOut);
    }

    if (onPointerLeave !== undefined) {
      tmp.onPointerLeave = Caml_option.valFromOption(onPointerLeave);
    }

    if (onGotPointerCapture !== undefined) {
      tmp.onGotPointerCapture = Caml_option.valFromOption(onGotPointerCapture);
    }

    if (onLostPointerCapture !== undefined) {
      tmp.onLostPointerCapture = Caml_option.valFromOption(onLostPointerCapture);
    }

    if (onScroll !== undefined) {
      tmp.onScroll = Caml_option.valFromOption(onScroll);
    }

    if (onWheel !== undefined) {
      tmp.onWheel = Caml_option.valFromOption(onWheel);
    }

    if (onAbort !== undefined) {
      tmp.onAbort = Caml_option.valFromOption(onAbort);
    }

    if (onCanPlay !== undefined) {
      tmp.onCanPlay = Caml_option.valFromOption(onCanPlay);
    }

    if (onCanPlayThrough !== undefined) {
      tmp.onCanPlayThrough = Caml_option.valFromOption(onCanPlayThrough);
    }

    if (onDurationChange !== undefined) {
      tmp.onDurationChange = Caml_option.valFromOption(onDurationChange);
    }

    if (onEmptied !== undefined) {
      tmp.onEmptied = Caml_option.valFromOption(onEmptied);
    }

    if (onEncrypetd !== undefined) {
      tmp.onEncrypetd = Caml_option.valFromOption(onEncrypetd);
    }

    if (onEnded !== undefined) {
      tmp.onEnded = Caml_option.valFromOption(onEnded);
    }

    if (onError !== undefined) {
      tmp.onError = Caml_option.valFromOption(onError);
    }

    if (onLoadedData !== undefined) {
      tmp.onLoadedData = Caml_option.valFromOption(onLoadedData);
    }

    if (onLoadedMetadata !== undefined) {
      tmp.onLoadedMetadata = Caml_option.valFromOption(onLoadedMetadata);
    }

    if (onLoadStart !== undefined) {
      tmp.onLoadStart = Caml_option.valFromOption(onLoadStart);
    }

    if (onPause !== undefined) {
      tmp.onPause = Caml_option.valFromOption(onPause);
    }

    if (onPlay !== undefined) {
      tmp.onPlay = Caml_option.valFromOption(onPlay);
    }

    if (onPlaying !== undefined) {
      tmp.onPlaying = Caml_option.valFromOption(onPlaying);
    }

    if (onProgress !== undefined) {
      tmp.onProgress = Caml_option.valFromOption(onProgress);
    }

    if (onRateChange !== undefined) {
      tmp.onRateChange = Caml_option.valFromOption(onRateChange);
    }

    if (onSeeked !== undefined) {
      tmp.onSeeked = Caml_option.valFromOption(onSeeked);
    }

    if (onSeeking !== undefined) {
      tmp.onSeeking = Caml_option.valFromOption(onSeeking);
    }

    if (onStalled !== undefined) {
      tmp.onStalled = Caml_option.valFromOption(onStalled);
    }

    if (onSuspend !== undefined) {
      tmp.onSuspend = Caml_option.valFromOption(onSuspend);
    }

    if (onTimeUpdate !== undefined) {
      tmp.onTimeUpdate = Caml_option.valFromOption(onTimeUpdate);
    }

    if (onVolumeChange !== undefined) {
      tmp.onVolumeChange = Caml_option.valFromOption(onVolumeChange);
    }

    if (onWaiting !== undefined) {
      tmp.onWaiting = Caml_option.valFromOption(onWaiting);
    }

    if (onLoad !== undefined) {
      tmp.onLoad = Caml_option.valFromOption(onLoad);
    }

    if (onAnimationStart !== undefined) {
      tmp.onAnimationStart = Caml_option.valFromOption(onAnimationStart);
    }

    if (onAnimationEnd !== undefined) {
      tmp.onAnimationEnd = Caml_option.valFromOption(onAnimationEnd);
    }

    if (onAnimationIteration !== undefined) {
      tmp.onAnimationIteration = Caml_option.valFromOption(onAnimationIteration);
    }

    if (onTransitionEnd !== undefined) {
      tmp.onTransitionEnd = Caml_option.valFromOption(onTransitionEnd);
    }

    return React.createElement(Base.make, tmp);
  };

  return {
    Base: Base,
    Styles: Styles,
    make: Ancestor_Grid$Make
  };
}

exports.Make = Make;
/* react Not a pure module */

/***/ }),

/***/ "./src/components/hidden/Ancestor_Hidden.bs.js":
/*!*****************************************************!*\
  !*** ./src/components/hidden/Ancestor_Hidden.bs.js ***!
  \*****************************************************/
/*! no static exports found */
/*! all exports used */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
// Generated by ReScript, PLEASE EDIT WITH CARE


__webpack_require__(/*! ../node_modules/core-js/modules/es.array.map.js */ "../node_modules/core-js/modules/es.array.map.js");

__webpack_require__(/*! ../node_modules/core-js/modules/es.array.reduce.js */ "../node_modules/core-js/modules/es.array.reduce.js");

__webpack_require__(/*! ../node_modules/core-js/modules/es.array.sort.js */ "../node_modules/core-js/modules/es.array.sort.js");

var Curry = __webpack_require__(/*! rescript/lib/js/curry.js */ "../node_modules/rescript/lib/js/curry.js");

var React = __webpack_require__(/*! react */ "../node_modules/react/index.js");

var Belt_Array = __webpack_require__(/*! rescript/lib/js/belt_Array.js */ "../node_modules/rescript/lib/js/belt_Array.js");

var Belt_Option = __webpack_require__(/*! rescript/lib/js/belt_Option.js */ "../node_modules/rescript/lib/js/belt_Option.js");

var Ancestor_Styles = __webpack_require__(/*! ../../core/Ancestor_Styles.bs.js */ "./src/core/Ancestor_Styles.bs.js");

function Make(Maker) {
  var Styles = Ancestor_Styles.Make(Maker);

  var createStyle = function createStyle(styles, value) {
    return Curry._3(Styles.mediaQuery, styles, value, "\n        display: " + (Curry._1(Maker.unboxBreakpointValue, value) ? "none" : "block") + ";\n      ");
  };

  var createHiddenClassName = function createHiddenClassName(on) {
    return Curry._1(Maker.css, Belt_Option.getWithDefault(Belt_Option.map(on, function (values) {
      return Belt_Array.reduce(values.sort(function (param, param$1) {
        return Curry._2(Styles.sortBySize, param, param$1);
      }), "", createStyle);
    }), ""));
  };

  var Ancestor_Hidden$Make = function Ancestor_Hidden$Make(Props) {
    var on = Props.on;
    var children = Props.children;
    return React.createElement("div", {
      className: createHiddenClassName(on)
    }, children);
  };

  return {
    Styles: Styles,
    createStyle: createStyle,
    createHiddenClassName: createHiddenClassName,
    make: Ancestor_Hidden$Make
  };
}

exports.Make = Make;
/* react Not a pure module */

/***/ }),

/***/ "./src/core/Ancestor_Core.bs.js":
/*!**************************************!*\
  !*** ./src/core/Ancestor_Core.bs.js ***!
  \**************************************/
/*! no static exports found */
/*! all exports used */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
// Generated by ReScript, PLEASE EDIT WITH CARE


var Ancestor_Box = __webpack_require__(/*! ../components/box/Ancestor_Box.bs.js */ "./src/components/box/Ancestor_Box.bs.js");

var Ancestor_Base = __webpack_require__(/*! ../components/base/Ancestor_Base.bs.js */ "./src/components/base/Ancestor_Base.bs.js");

var Ancestor_Grid = __webpack_require__(/*! ../components/grid/Ancestor_Grid.bs.js */ "./src/components/grid/Ancestor_Grid.bs.js");

var Ancestor_Hidden = __webpack_require__(/*! ../components/hidden/Ancestor_Hidden.bs.js */ "./src/components/hidden/Ancestor_Hidden.bs.js");

var Ancestor_Styles = __webpack_require__(/*! ./Ancestor_Styles.bs.js */ "./src/core/Ancestor_Styles.bs.js");

function Make(StylesMaker) {
  var Styles = Ancestor_Styles.Make(StylesMaker);
  var Base = Ancestor_Base.Make(StylesMaker);
  var Box = Ancestor_Box.Make(StylesMaker);
  var Grid = Ancestor_Grid.Make(StylesMaker);
  var Hidden = Ancestor_Hidden.Make(StylesMaker);
  return {
    Styles: Styles,
    Base: Base,
    Box: Box,
    Grid: Grid,
    Hidden: Hidden,
    CssTypes: undefined,
    Spacing: undefined,
    Radius: undefined,
    Typography: undefined
  };
}

exports.Make = Make;
/* Ancestor_Box Not a pure module */

/***/ }),

/***/ "./src/core/Ancestor_CssTypes.bs.js":
/*!******************************************!*\
  !*** ./src/core/Ancestor_CssTypes.bs.js ***!
  \******************************************/
/*! no static exports found */
/*! all exports used */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
// Generated by ReScript, PLEASE EDIT WITH CARE


__webpack_require__(/*! ../node_modules/core-js/modules/es.object.to-string.js */ "../node_modules/core-js/modules/es.object.to-string.js");

__webpack_require__(/*! ../node_modules/core-js/modules/es.regexp.to-string.js */ "../node_modules/core-js/modules/es.regexp.to-string.js");

__webpack_require__(/*! ../node_modules/core-js/modules/es.date.to-string.js */ "../node_modules/core-js/modules/es.date.to-string.js");

function toString(color) {
  if (typeof color !== "object") {
    if (color === "transparent") {
      return "transparent";
    } else {
      return "currentColor";
    }
  }

  if (color.NAME !== "rgb") {
    return color.VAL;
  }

  var match = color.VAL;
  return "rgb(" + match[0].toString() + ", " + match[1].toString() + ", " + match[2].toString() + ")";
}

var Color = {
  toString: toString
};

function toString$1(x) {
  if (typeof x !== "object") {
    return "0";
  }

  var variant = x.NAME;

  if (variant === "inch") {
    return x.VAL.toString() + "in";
  }

  if (variant === "mult") {
    var match = x.VAL;
    return "calc(" + toString$1(match[0]) + " * " + toString$1(match[1]) + ")";
  }

  if (variant === "vmax") {
    return x.VAL.toString() + "vmax";
  }

  if (variant === "vmin") {
    return x.VAL.toString() + "vmin";
  }

  if (variant === "ch") {
    return x.VAL.toString() + "ch";
  }

  if (variant === "cm") {
    return x.VAL.toString() + "cm";
  }

  if (variant === "em") {
    return x.VAL.toString() + "em";
  }

  if (variant === "ex") {
    return x.VAL.toString() + "ex";
  }

  if (variant === "mm") {
    return x.VAL.toString() + "mm";
  }

  if (variant === "pc") {
    return x.VAL.toString() + "pc";
  }

  if (variant === "pt") {
    return x.VAL.toString() + "pt";
  }

  if (variant === "px") {
    return x.VAL.toString() + "px";
  }

  if (variant === "vh") {
    return x.VAL.toString() + "vh";
  }

  if (variant === "vw") {
    return x.VAL.toString() + "vw";
  }

  if (variant === "add") {
    var match$1 = x.VAL;
    return "calc(" + toString$1(match$1[0]) + " + " + toString$1(match$1[1]) + ")";
  }

  if (variant === "div") {
    var match$2 = x.VAL;
    return "calc(" + toString$1(match$2[0]) + " / " + toString$1(match$2[1]) + ")";
  }

  if (variant === "pct") {
    return x.VAL.toString() + "%";
  }

  if (variant === "rem") {
    return x.VAL.toString() + "rem";
  }

  if (variant !== "sub") {
    return x.VAL.toString() + "px";
  }

  var match$3 = x.VAL;
  return "calc(" + toString$1(match$3[0]) + " - " + toString$1(match$3[1]) + ")";
}

var Length = {
  toString: toString$1
};

function toString$2(value) {
  if (value === "capitalize") {
    return "capitalize";
  } else if (value === "lowercase") {
    return "lowercase";
  } else if (value === "uppercase") {
    return "uppercase";
  } else {
    return "none";
  }
}

var TextTransform = {
  toString: toString$2
};

function toString$3(textDecorationStyle) {
  return textDecorationStyle;
}

var TextDecorationStyle = {
  toString: toString$3
};

function toString$4(value) {
  if (value === "none") {
    return "none";
  } else if (value === "line-through") {
    return "line-through";
  } else if (value === "underline") {
    return "underline";
  } else if (value === "blink") {
    return "blink";
  } else {
    return "overline";
  }
}

var TextDecorationLine = {
  toString: toString$4
};

function toString$5(textDecoration) {
  if (typeof textDecoration !== "object") {
    if (textDecoration === "initial") {
      return "initial";
    } else if (textDecoration === "inherit") {
      return "inherit";
    } else {
      return "none";
    }
  }

  var match = textDecoration.VAL;
  return toString$4(match[0]) + " " + toString(match[1]) + " " + match[2];
}

var TextDecoration = {
  toString: toString$5
};

function toString$6(outlineStyle) {
  return outlineStyle;
}

var OutlineStyle = {
  toString: toString$6
};

function toString$7(outline) {
  if (typeof outline !== "object") {
    if (outline === "unset") {
      return "unset";
    } else if (outline === "inherit") {
      return "inherit";
    } else {
      return "initial";
    }
  }

  var match = outline.VAL;
  return toString$1(match[0]) + " " + match[1] + " " + toString(match[2]);
}

var Outline = {
  toString: toString$7
};

function toString$8(listStyleType) {
  return listStyleType;
}

var ListStyleType = {
  toString: toString$8
};

function toString$9(position) {
  return position;
}

var ListStylePosition = {
  toString: toString$9
};

function toString$10(image) {
  if (typeof image === "object") {
    return "url(\"" + image.VAL + "\")";
  } else {
    return "none";
  }
}

var ListStyleImage = {
  toString: toString$10
};

function toString$11(listStyle) {
  if (typeof listStyle !== "object") {
    if (listStyle === "initial") {
      return "initial";
    } else if (listStyle === "revert") {
      return "revert";
    } else if (listStyle === "unset") {
      return "unset";
    } else if (listStyle === "inherit") {
      return "inherit";
    } else {
      return "none";
    }
  }

  var variant = listStyle.NAME;

  if (variant === "type") {
    return listStyle.VAL;
  }

  if (variant !== "short") {
    if (variant === "image") {
      return toString$10(listStyle.VAL);
    } else {
      return listStyle.VAL;
    }
  }

  var match = listStyle.VAL;
  return match[0] + " " + match[1] + " " + toString$10(match[2]);
}

var ListStyle = {
  toString: toString$11
};

function toString$12(overflow) {
  return overflow;
}

var Overflow = {
  toString: toString$12
};

function toString$13(cursor) {
  return cursor;
}

var Cursor = {
  toString: toString$13
};

function toString$14(visibility) {
  return visibility;
}

var Visibility = {
  toString: toString$14
};

function toString$15(prim) {
  return prim;
}

var Display = {
  toString: toString$15
};

function toString$16(prim) {
  return prim;
}

var JustifyContent = {
  toString: toString$16
};

function toString$17(prim) {
  return prim;
}

var AlignItems = {
  toString: toString$17
};

function toString$18(prim) {
  return prim;
}

var FlexDirection = {
  toString: toString$18
};

function toString$19(prim) {
  return prim;
}

var FlexWrap = {
  toString: toString$19
};

function toString$20(value) {
  if (typeof value === "object" && value.NAME === "length") {
    return toString$1(value.VAL);
  } else {
    return value;
  }
}

var FlexBasis = {
  toString: toString$20
};

function toString$21(value) {
  if (typeof value === "object" && value.NAME === "num") {
    return value.VAL.toString();
  } else {
    return value;
  }
}

var FlexGrow = {
  toString: toString$21
};

function toString$22(value) {
  if (value === "unsafe-center") {
    return "unsafe center";
  } else if (value === "last-baseline") {
    return "last baseline";
  } else if (value === "first-baseline") {
    return "first baseline";
  } else if (value === "safe-center") {
    return "safe center";
  } else {
    return value;
  }
}

var AlignContent = {
  toString: toString$22
};

function toString$23(param) {
  return param[0] + " " + param[1];
}

var FlexFlow = {
  toString: toString$23
};

function toString$24(gap) {
  if (typeof gap !== "object") {
    if (gap === "revert") {
      return "revert";
    } else if (gap === "unset") {
      return "unset";
    } else if (gap === "inherit") {
      return "inherit";
    } else {
      return "initial";
    }
  }

  if (gap.NAME !== "two") {
    return toString$1(gap.VAL);
  }

  var match = gap.VAL;
  return toString$1(match[0]) + " " + toString$1(match[1]);
}

var Gap = {
  toString: toString$24
};

function toString$25(prim) {
  return prim;
}

var Position = {
  toString: toString$25
};

function toString$26(prim) {
  return prim;
}

var TextAlign = {
  toString: toString$26
};

function toString$27(prim) {
  return prim;
}

var FontWeight = {
  toString: toString$27
};

function toString$28(prim) {
  return prim;
}

var BoxSizing = {
  toString: toString$28
};

function toString$29(prim) {
  return prim.toString();
}

var ZIndex = {
  toString: toString$29
};

function toString$30(v) {
  return v;
}

var BorderStyle = {
  toString: toString$30
};

function toString$31(param) {
  return toString$1(param[0]) + " " + param[1] + " " + toString(param[2]);
}

var Border = {
  toString: toString$31
};

function toString$32(x) {
  var variant = x.NAME;

  if (variant === "turn") {
    return x.VAL.toString() + "turn";
  } else if (variant === "deg") {
    return x.VAL.toString() + "deg";
  } else if (variant === "rad") {
    return x.VAL.toString() + "rad";
  } else {
    return x.VAL.toString() + "grad";
  }
}

var Angle = {
  toString: toString$32
};

function string_of_scale(x, y) {
  return "scale(" + x.toString() + ", " + y.toString() + ")";
}

function string_of_translate3d(x, y, z) {
  return "translate3d(" + toString$1(x) + ", " + toString$1(y) + ", " + toString$1(z) + ")";
}

function toString$33(x) {
  var variant = x.NAME;

  if (variant === "translate") {
    var match = x.VAL;
    return "translate(" + toString$1(match[0]) + ", " + toString$1(match[1]) + ")";
  }

  if (variant === "rotate") {
    return "rotate(" + toString$32(x.VAL) + ")";
  }

  if (variant === "skew") {
    var match$1 = x.VAL;
    return "skew(" + toString$32(match$1[0]) + ", " + toString$32(match$1[1]) + ")";
  }

  if (variant === "scale3d") {
    var match$2 = x.VAL;
    return "scale3d(" + match$2[0].toString() + ", " + match$2[1].toString() + ", " + match$2[2].toString() + ")";
  }

  if (variant === "rotateX") {
    return "rotateX(" + toString$32(x.VAL) + ")";
  }

  if (variant === "rotateY") {
    return "rotateY(" + toString$32(x.VAL) + ")";
  }

  if (variant === "rotateZ") {
    return "rotateZ(" + toString$32(x.VAL) + ")";
  }

  if (variant === "scale") {
    var match$3 = x.VAL;
    return string_of_scale(match$3[0], match$3[1]);
  }

  if (variant === "skewX") {
    return "skewX(" + toString$32(x.VAL) + ")";
  }

  if (variant === "skewY") {
    return "skewY(" + toString$32(x.VAL) + ")";
  }

  if (variant === "translateX") {
    return "translateX(" + toString$1(x.VAL) + ")";
  }

  if (variant === "translateY") {
    return "translateY(" + toString$1(x.VAL) + ")";
  }

  if (variant === "translateZ") {
    return "translateZ(" + toString$1(x.VAL) + ")";
  }

  if (variant === "rotate3d") {
    var match$4 = x.VAL;
    return "rotate3d(" + match$4[0].toString() + ", " + match$4[1].toString() + ", " + match$4[2].toString() + ", " + toString$32(match$4[3]) + ")";
  }

  if (variant !== "translate3d") {
    if (variant === "scaleX") {
      return "scaleX(" + x.VAL.toString() + ")";
    } else if (variant === "scaleY") {
      return "scaleY(" + x.VAL.toString() + ")";
    } else if (variant === "scaleZ") {
      return "scaleZ(" + x.VAL.toString();
    } else {
      return "perspective(" + x.VAL.toString() + ")";
    }
  }

  var match$5 = x.VAL;
  return string_of_translate3d(match$5[0], match$5[1], match$5[2]);
}

var Transform = {
  string_of_scale: string_of_scale,
  string_of_translate3d: string_of_translate3d,
  toString: toString$33
};

function toString$34(bgSize) {
  if (typeof bgSize === "object") {
    return toString$1(bgSize.VAL);
  } else if (bgSize === "initial") {
    return "initial";
  } else if (bgSize === "size") {
    return "size";
  } else if (bgSize === "contain") {
    return "contain";
  } else if (bgSize === "unset") {
    return "unset";
  } else if (bgSize === "inherit") {
    return "inherit";
  } else {
    return "auto";
  }
}

var BackgroundSize = {
  toString: toString$34
};

function toString$35(bgPosition) {
  if (typeof bgPosition === "object") {
    return toString$1(bgPosition.VAL);
  } else if (bgPosition === "initial") {
    return "initial";
  } else if (bgPosition === "bottom") {
    return "bottom";
  } else if (bgPosition === "right") {
    return "right";
  } else if (bgPosition === "top") {
    return "top";
  } else if (bgPosition === "center") {
    return "center";
  } else if (bgPosition === "unset") {
    return "unset";
  } else if (bgPosition === "inherit") {
    return "inherit";
  } else {
    return "left";
  }
}

var BackgroundPosition = {
  toString: toString$35
};

function toString$36(bgImage) {
  return "url(\"" + bgImage.VAL + "\")";
}

var BackgroundImage = {
  toString: toString$36
};
var AlignSelf;
var JustifySelf;
exports.Color = Color;
exports.Length = Length;
exports.TextTransform = TextTransform;
exports.TextDecorationStyle = TextDecorationStyle;
exports.TextDecorationLine = TextDecorationLine;
exports.TextDecoration = TextDecoration;
exports.OutlineStyle = OutlineStyle;
exports.Outline = Outline;
exports.ListStyleType = ListStyleType;
exports.ListStylePosition = ListStylePosition;
exports.ListStyleImage = ListStyleImage;
exports.ListStyle = ListStyle;
exports.Overflow = Overflow;
exports.Cursor = Cursor;
exports.Visibility = Visibility;
exports.Display = Display;
exports.JustifyContent = JustifyContent;
exports.AlignItems = AlignItems;
exports.FlexDirection = FlexDirection;
exports.FlexWrap = FlexWrap;
exports.FlexBasis = FlexBasis;
exports.FlexGrow = FlexGrow;
exports.AlignContent = AlignContent;
exports.AlignSelf = AlignSelf;
exports.JustifySelf = JustifySelf;
exports.FlexFlow = FlexFlow;
exports.Gap = Gap;
exports.Position = Position;
exports.TextAlign = TextAlign;
exports.FontWeight = FontWeight;
exports.BoxSizing = BoxSizing;
exports.ZIndex = ZIndex;
exports.BorderStyle = BorderStyle;
exports.Border = Border;
exports.Angle = Angle;
exports.Transform = Transform;
exports.BackgroundSize = BackgroundSize;
exports.BackgroundPosition = BackgroundPosition;
exports.BackgroundImage = BackgroundImage;
/* No side effect */

/***/ }),

/***/ "./src/core/Ancestor_Styles.bs.js":
/*!****************************************!*\
  !*** ./src/core/Ancestor_Styles.bs.js ***!
  \****************************************/
/*! no static exports found */
/*! all exports used */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
// Generated by ReScript, PLEASE EDIT WITH CARE


__webpack_require__(/*! ../node_modules/core-js/modules/es.number.to-fixed.js */ "../node_modules/core-js/modules/es.number.to-fixed.js");

__webpack_require__(/*! ../node_modules/core-js/modules/es.array.map.js */ "../node_modules/core-js/modules/es.array.map.js");

__webpack_require__(/*! ../node_modules/core-js/modules/es.array.reduce.js */ "../node_modules/core-js/modules/es.array.reduce.js");

__webpack_require__(/*! ../node_modules/core-js/modules/es.array.sort.js */ "../node_modules/core-js/modules/es.array.sort.js");

__webpack_require__(/*! ../node_modules/core-js/modules/es.array.join.js */ "../node_modules/core-js/modules/es.array.join.js");

__webpack_require__(/*! ../node_modules/core-js/modules/es.object.to-string.js */ "../node_modules/core-js/modules/es.object.to-string.js");

__webpack_require__(/*! ../node_modules/core-js/modules/es.regexp.to-string.js */ "../node_modules/core-js/modules/es.regexp.to-string.js");

__webpack_require__(/*! ../node_modules/core-js/modules/es.date.to-string.js */ "../node_modules/core-js/modules/es.date.to-string.js");

var Curry = __webpack_require__(/*! rescript/lib/js/curry.js */ "../node_modules/rescript/lib/js/curry.js");

var Belt_Array = __webpack_require__(/*! rescript/lib/js/belt_Array.js */ "../node_modules/rescript/lib/js/belt_Array.js");

var Belt_Option = __webpack_require__(/*! rescript/lib/js/belt_Option.js */ "../node_modules/rescript/lib/js/belt_Option.js");

var Ancestor_CssTypes = __webpack_require__(/*! ./Ancestor_CssTypes.bs.js */ "./src/core/Ancestor_CssTypes.bs.js");

function Make(Maker) {
  var make = function make(value) {
    return (value * (Maker.spacing / 10.0)).toFixed(1) + "rem";
  };

  var Spacing = {
    make: make
  };

  var make$1 = function make$1(value) {
    return (value * (Maker.radius / 10.0)).toFixed(1) + "rem";
  };

  var Radius = {
    make: make$1
  };

  var createBreakpointSize = function createBreakpointSize(device) {
    return String(Curry._1(Maker.sizeByBreakpoints, device)) + "px";
  };

  var mediaQuery = function mediaQuery(current, device, styles) {
    return "\n    " + current + "\n    @media (min-width: " + createBreakpointSize(device) + ") {\n      " + styles + "\n    }\n  ";
  };

  var sortBySize = function sortBySize(first, second) {
    return Curry._1(Maker.sizeByBreakpoints, first) - Curry._1(Maker.sizeByBreakpoints, second) | 0;
  };

  var mergeStyles = function mergeStyles(cssKey, stringify, styles, breakpointValue) {
    return mediaQuery(styles, breakpointValue, cssKey + ": " + Curry._1(stringify, Curry._1(Maker.unboxBreakpointValue, breakpointValue)) + ";");
  };

  var createCssValueFromArray = function createCssValueFromArray(cssKey, maybeCssValues, stringify) {
    return Belt_Option.getWithDefault(Belt_Option.map(maybeCssValues, function (values) {
      return Belt_Array.reduce(values.sort(sortBySize), "", function (param, param$1) {
        return mergeStyles(cssKey, stringify, param, param$1);
      });
    }), "");
  };

  var createResponsiveStyles = function createResponsiveStyles(borderRadius, borderTLRadius, borderTRRadius, borderBLRadius, borderBRRadius, borderStyle, borderColor, borderWidth, border, borderRight, borderLeft, borderTop, borderBottom, borderRightStyle, borderLeftStyle, borderTopStyle, borderBottomStyle, borderRightColor, borderLeftColor, borderTopColor, borderBottomColor, borderRightWidth, borderLeftWidth, borderTopWidth, borderBottomWidth, bgColor, bgSize, bgPosition, bgImage, color, display, justifyContent, flexDirection, alignItems, flexBasis, flexWrap, flexGrow, alignContent, alignSelf, justifySelf, flexFlow, gap, p, px, py, pt, pb, pl, pr, m, mx, my, mt, mb, ml, mr, textAlign, fontWeight, fontSize, letterSpacing, lineHeight, width, height, minW, minH, maxW, maxH, position, top, bottom, left, right, zIndex, boxSizing, overflow, overflowX, overflowY, cursor, visibility, listStyleType, listStylePosition, listStyleImage, listStyle, outlineStyle, outline, textDecorationStyle, textDecorationLine, textDecoration, transform, param) {
    return [createCssValueFromArray("border-radius", borderRadius, make$1), createCssValueFromArray("border-top-left-radius", borderTLRadius, make$1), createCssValueFromArray("border-top-right-radius", borderTRRadius, make$1), createCssValueFromArray("border-bottom-left-radius", borderBLRadius, make$1), createCssValueFromArray("border-bottom-right-radius", borderBRRadius, make$1), createCssValueFromArray("border-style", borderStyle, Ancestor_CssTypes.BorderStyle.toString), createCssValueFromArray("border-color", borderColor, Ancestor_CssTypes.Color.toString), createCssValueFromArray("border-width", borderWidth, Ancestor_CssTypes.Length.toString), createCssValueFromArray("border", border, Ancestor_CssTypes.Border.toString), createCssValueFromArray("border-right", borderRight, Ancestor_CssTypes.Border.toString), createCssValueFromArray("border-left", borderLeft, Ancestor_CssTypes.Border.toString), createCssValueFromArray("border-top", borderTop, Ancestor_CssTypes.Border.toString), createCssValueFromArray("border-bottom", borderBottom, Ancestor_CssTypes.Border.toString), createCssValueFromArray("border-right-style", borderRightStyle, Ancestor_CssTypes.BorderStyle.toString), createCssValueFromArray("border-left-style", borderLeftStyle, Ancestor_CssTypes.BorderStyle.toString), createCssValueFromArray("border-top-style", borderTopStyle, Ancestor_CssTypes.BorderStyle.toString), createCssValueFromArray("border-bottom-style", borderBottomStyle, Ancestor_CssTypes.BorderStyle.toString), createCssValueFromArray("border-right-color", borderRightColor, Ancestor_CssTypes.Color.toString), createCssValueFromArray("border-left-color", borderLeftColor, Ancestor_CssTypes.Color.toString), createCssValueFromArray("border-top-color", borderTopColor, Ancestor_CssTypes.Color.toString), createCssValueFromArray("border-bottom-color", borderBottomColor, Ancestor_CssTypes.Color.toString), createCssValueFromArray("border-right-width", borderRightWidth, Ancestor_CssTypes.Length.toString), createCssValueFromArray("border-left-width", borderLeftWidth, Ancestor_CssTypes.Length.toString), createCssValueFromArray("border-top-width", borderTopWidth, Ancestor_CssTypes.Length.toString), createCssValueFromArray("border-bottom-width", borderBottomWidth, Ancestor_CssTypes.Length.toString), createCssValueFromArray("background-color", bgColor, Ancestor_CssTypes.Color.toString), createCssValueFromArray("background-size", bgSize, Ancestor_CssTypes.BackgroundSize.toString), createCssValueFromArray("background-position", bgPosition, Ancestor_CssTypes.BackgroundPosition.toString), createCssValueFromArray("background-image", bgImage, Ancestor_CssTypes.BackgroundImage.toString), createCssValueFromArray("color", color, Ancestor_CssTypes.Color.toString), createCssValueFromArray("display", display, Ancestor_CssTypes.Display.toString), createCssValueFromArray("justify-content", justifyContent, Ancestor_CssTypes.JustifyContent.toString), createCssValueFromArray("align-items", alignItems, Ancestor_CssTypes.AlignItems.toString), createCssValueFromArray("flex-direction", flexDirection, Ancestor_CssTypes.FlexDirection.toString), createCssValueFromArray("flex-basis", flexBasis, Ancestor_CssTypes.FlexBasis.toString), createCssValueFromArray("flex-wrap", flexWrap, Ancestor_CssTypes.FlexWrap.toString), createCssValueFromArray("flex-grow", flexGrow, Ancestor_CssTypes.FlexGrow.toString), createCssValueFromArray("align-content", alignContent, Ancestor_CssTypes.AlignContent.toString), createCssValueFromArray("align-self", alignSelf, Ancestor_CssTypes.AlignContent.toString), createCssValueFromArray("justify-self", justifySelf, Ancestor_CssTypes.AlignContent.toString), createCssValueFromArray("flex-flow", flexFlow, Ancestor_CssTypes.FlexFlow.toString), createCssValueFromArray("gap", gap, Ancestor_CssTypes.Gap.toString), createCssValueFromArray("padding", p, make), createCssValueFromArray("padding-left", px, make), createCssValueFromArray("padding-right", px, make), createCssValueFromArray("padding-top", py, make), createCssValueFromArray("padding-bottom", py, make), createCssValueFromArray("padding-top", pt, make), createCssValueFromArray("padding-bottom", pb, make), createCssValueFromArray("padding-left", pl, make), createCssValueFromArray("padding-right", pr, make), createCssValueFromArray("margin", m, make), createCssValueFromArray("margin-left", mx, make), createCssValueFromArray("margin-right", mx, make), createCssValueFromArray("margin-top", my, make), createCssValueFromArray("margin-bottom", my, make), createCssValueFromArray("margin-top", mt, make), createCssValueFromArray("margin-bottom", mb, make), createCssValueFromArray("margin-left", ml, make), createCssValueFromArray("margin-right", mr, make), createCssValueFromArray("text-align", textAlign, Ancestor_CssTypes.TextAlign.toString), createCssValueFromArray("font-weight", fontWeight, Ancestor_CssTypes.FontWeight.toString), createCssValueFromArray("font-size", fontSize, Ancestor_CssTypes.Length.toString), createCssValueFromArray("letter-spacing", letterSpacing, Ancestor_CssTypes.Length.toString), createCssValueFromArray("line-height", lineHeight, Ancestor_CssTypes.Length.toString), createCssValueFromArray("width", width, Ancestor_CssTypes.Length.toString), createCssValueFromArray("height", height, Ancestor_CssTypes.Length.toString), createCssValueFromArray("min-width", minW, Ancestor_CssTypes.Length.toString), createCssValueFromArray("min-height", minH, Ancestor_CssTypes.Length.toString), createCssValueFromArray("max-width", maxW, Ancestor_CssTypes.Length.toString), createCssValueFromArray("max-height", maxH, Ancestor_CssTypes.Length.toString), createCssValueFromArray("position", position, Ancestor_CssTypes.Position.toString), createCssValueFromArray("top", top, Ancestor_CssTypes.Length.toString), createCssValueFromArray("bottom", bottom, Ancestor_CssTypes.Length.toString), createCssValueFromArray("left", left, Ancestor_CssTypes.Length.toString), createCssValueFromArray("right", right, Ancestor_CssTypes.Length.toString), createCssValueFromArray("z-index", zIndex, Ancestor_CssTypes.ZIndex.toString), createCssValueFromArray("box-sizing", boxSizing, Ancestor_CssTypes.BoxSizing.toString), createCssValueFromArray("overflow", overflow, Ancestor_CssTypes.Overflow.toString), createCssValueFromArray("overflow-x", overflowX, Ancestor_CssTypes.Overflow.toString), createCssValueFromArray("overflow-y", overflowY, Ancestor_CssTypes.Overflow.toString), createCssValueFromArray("cursor", cursor, Ancestor_CssTypes.Cursor.toString), createCssValueFromArray("visibility", visibility, Ancestor_CssTypes.Visibility.toString), createCssValueFromArray("list-style-type", listStyleType, Ancestor_CssTypes.ListStyleType.toString), createCssValueFromArray("list-style-position", listStylePosition, Ancestor_CssTypes.ListStylePosition.toString), createCssValueFromArray("list-style-image", listStyleImage, Ancestor_CssTypes.ListStyleImage.toString), createCssValueFromArray("list-style", listStyle, Ancestor_CssTypes.ListStyle.toString), createCssValueFromArray("outline-style", outlineStyle, Ancestor_CssTypes.OutlineStyle.toString), createCssValueFromArray("outline", outline, Ancestor_CssTypes.Outline.toString), createCssValueFromArray("text-decoration-style", textDecorationStyle, Ancestor_CssTypes.TextDecorationStyle.toString), createCssValueFromArray("text-decoration-line", textDecorationLine, Ancestor_CssTypes.TextDecorationLine.toString), createCssValueFromArray("text-decoration", textDecoration, Ancestor_CssTypes.TextDecoration.toString), createCssValueFromArray("transform", transform, Ancestor_CssTypes.Transform.toString)].join("");
  };

  return {
    Spacing: Spacing,
    Radius: Radius,
    createBreakpointSize: createBreakpointSize,
    mediaQuery: mediaQuery,
    sortBySize: sortBySize,
    mergeStyles: mergeStyles,
    createCssValueFromArray: createCssValueFromArray,
    createResponsiveStyles: createResponsiveStyles
  };
}

exports.Make = Make;
/* No side effect */

/***/ })

})
//# sourceMappingURL=main.0c5d052db88965cc203e.hot-update.js.map