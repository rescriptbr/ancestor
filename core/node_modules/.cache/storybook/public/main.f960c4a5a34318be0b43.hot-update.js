webpackHotUpdate("main",{

/***/ "./src/core/Ancestor_Styles.bs.js":
/*!****************************************!*\
  !*** ./src/core/Ancestor_Styles.bs.js ***!
  \****************************************/
/*! no static exports found */
/*! all exports used */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
// Generated by ReScript, PLEASE EDIT WITH CARE


__webpack_require__(/*! ../node_modules/core-js/modules/es.number.to-fixed.js */ "../node_modules/core-js/modules/es.number.to-fixed.js");

__webpack_require__(/*! ../node_modules/core-js/modules/es.array.map.js */ "../node_modules/core-js/modules/es.array.map.js");

__webpack_require__(/*! ../node_modules/core-js/modules/es.array.reduce.js */ "../node_modules/core-js/modules/es.array.reduce.js");

__webpack_require__(/*! ../node_modules/core-js/modules/es.array.sort.js */ "../node_modules/core-js/modules/es.array.sort.js");

__webpack_require__(/*! ../node_modules/core-js/modules/es.array.join.js */ "../node_modules/core-js/modules/es.array.join.js");

__webpack_require__(/*! ../node_modules/core-js/modules/es.object.to-string.js */ "../node_modules/core-js/modules/es.object.to-string.js");

__webpack_require__(/*! ../node_modules/core-js/modules/es.regexp.to-string.js */ "../node_modules/core-js/modules/es.regexp.to-string.js");

__webpack_require__(/*! ../node_modules/core-js/modules/es.date.to-string.js */ "../node_modules/core-js/modules/es.date.to-string.js");

var Curry = __webpack_require__(/*! rescript/lib/js/curry.js */ "../node_modules/rescript/lib/js/curry.js");

var Belt_Array = __webpack_require__(/*! rescript/lib/js/belt_Array.js */ "../node_modules/rescript/lib/js/belt_Array.js");

var Belt_Option = __webpack_require__(/*! rescript/lib/js/belt_Option.js */ "../node_modules/rescript/lib/js/belt_Option.js");

var Ancestor_CssTypes = __webpack_require__(/*! ./Ancestor_CssTypes.bs.js */ "./src/core/Ancestor_CssTypes.bs.js");

function Make(Maker) {
  var make = function make(value) {
    return (value * (Maker.spacing / 10.0)).toFixed(1) + "rem";
  };

  var Spacing = {
    make: make
  };

  var make$1 = function make$1(value) {
    return (value * (Maker.radius / 10.0)).toFixed(1) + "rem";
  };

  var Radius = {
    make: make$1
  };

  var createBreakpointSize = function createBreakpointSize(device) {
    return String(Curry._1(Maker.sizeByBreakpoints, device)) + "px";
  };

  var mediaQuery = function mediaQuery(current, device, styles) {
    return "\n    " + current + "\n    @media (min-width: " + createBreakpointSize(device) + ") {\n      " + styles + "\n    }\n  ";
  };

  var sortBySize = function sortBySize(first, second) {
    return Curry._1(Maker.sizeByBreakpoints, first) - Curry._1(Maker.sizeByBreakpoints, second) | 0;
  };

  var mergeStyles = function mergeStyles(cssKey, stringify, styles, breakpointValue) {
    return mediaQuery(styles, breakpointValue, cssKey + ": " + Curry._1(stringify, Curry._1(Maker.unboxBreakpointValue, breakpointValue)) + ";");
  };

  var createCssValueFromArray = function createCssValueFromArray(cssKey, maybeCssValues, stringify) {
    return Belt_Option.getWithDefault(Belt_Option.map(maybeCssValues, function (values) {
      return Belt_Array.reduce(values.sort(sortBySize), "", function (param, param$1) {
        return mergeStyles(cssKey, stringify, param, param$1);
      });
    }), "");
  };

  var createResponsiveStyles = function createResponsiveStyles(borderRadius, borderTLRadius, borderTRRadius, borderBLRadius, borderBRRadius, borderStyle, borderColor, borderWidth, border, borderRight, borderLeft, borderTop, borderBottom, borderRightStyle, borderLeftStyle, borderTopStyle, borderBottomStyle, borderRightColor, borderLeftColor, borderTopColor, borderBottomColor, borderRightWidth, borderLeftWidth, borderTopWidth, borderBottomWidth, bgColor, bgSize, bgPosition, bgImage, color, display, justifyContent, flexDirection, alignItems, flexBasis, flexWrap, flexGrow, alignContent, alignSelf, justifySelf, flexFlow, gap, p, px, py, pt, pb, pl, pr, m, mx, my, mt, mb, ml, mr, textAlign, fontWeight, fontSize, letterSpacing, lineHeight, width, height, minW, minH, maxW, maxH, position, top, bottom, left, right, zIndex, boxSizing, overflow, overflowX, overflowY, cursor, visibility, listStyleType, listStylePosition, listStyleImage, listStyle, outlineStyle, outline, textDecorationStyle, textDecorationLine, textDecoration, transform, param) {
    return [createCssValueFromArray("border-radius", borderRadius, make$1), createCssValueFromArray("border-top-left-radius", borderTLRadius, make$1), createCssValueFromArray("border-top-right-radius", borderTRRadius, make$1), createCssValueFromArray("border-bottom-left-radius", borderBLRadius, make$1), createCssValueFromArray("border-bottom-right-radius", borderBRRadius, make$1), createCssValueFromArray("border-style", borderStyle, Ancestor_CssTypes.BorderStyle.toString), createCssValueFromArray("border-color", borderColor, Ancestor_CssTypes.Color.toString), createCssValueFromArray("border-width", borderWidth, Ancestor_CssTypes.Length.toString), createCssValueFromArray("border", border, Ancestor_CssTypes.Border.toString), createCssValueFromArray("border-right", borderRight, Ancestor_CssTypes.Border.toString), createCssValueFromArray("border-left", borderLeft, Ancestor_CssTypes.Border.toString), createCssValueFromArray("border-top", borderTop, Ancestor_CssTypes.Border.toString), createCssValueFromArray("border-bottom", borderBottom, Ancestor_CssTypes.Border.toString), createCssValueFromArray("border-right-style", borderRightStyle, Ancestor_CssTypes.BorderStyle.toString), createCssValueFromArray("border-left-style", borderLeftStyle, Ancestor_CssTypes.BorderStyle.toString), createCssValueFromArray("border-top-style", borderTopStyle, Ancestor_CssTypes.BorderStyle.toString), createCssValueFromArray("border-bottom-style", borderBottomStyle, Ancestor_CssTypes.BorderStyle.toString), createCssValueFromArray("border-right-color", borderRightColor, Ancestor_CssTypes.Color.toString), createCssValueFromArray("border-left-color", borderLeftColor, Ancestor_CssTypes.Color.toString), createCssValueFromArray("border-top-color", borderTopColor, Ancestor_CssTypes.Color.toString), createCssValueFromArray("border-bottom-color", borderBottomColor, Ancestor_CssTypes.Color.toString), createCssValueFromArray("border-right-width", borderRightWidth, Ancestor_CssTypes.Length.toString), createCssValueFromArray("border-left-width", borderLeftWidth, Ancestor_CssTypes.Length.toString), createCssValueFromArray("border-top-width", borderTopWidth, Ancestor_CssTypes.Length.toString), createCssValueFromArray("border-bottom-width", borderBottomWidth, Ancestor_CssTypes.Length.toString), createCssValueFromArray("background-color", bgColor, Ancestor_CssTypes.Color.toString), createCssValueFromArray("background-size", bgSize, Ancestor_CssTypes.BackgroundSize.toString), createCssValueFromArray("background-position", bgPosition, Ancestor_CssTypes.BackgroundPosition.toString), createCssValueFromArray("background-image", bgImage, Ancestor_CssTypes.BackgroundImage.toString), createCssValueFromArray("color", color, Ancestor_CssTypes.Color.toString), createCssValueFromArray("display", display, Ancestor_CssTypes.Display.toString), createCssValueFromArray("justify-content", justifyContent, Ancestor_CssTypes.JustifyContent.toString), createCssValueFromArray("align-items", alignItems, Ancestor_CssTypes.AlignItems.toString), createCssValueFromArray("flex-direction", flexDirection, Ancestor_CssTypes.FlexDirection.toString), createCssValueFromArray("flex-basis", flexBasis, Ancestor_CssTypes.FlexBasis.toString), createCssValueFromArray("flex-wrap", flexWrap, Ancestor_CssTypes.FlexWrap.toString), createCssValueFromArray("flex-grow", flexGrow, Ancestor_CssTypes.FlexGrow.toString), createCssValueFromArray("align-content", alignContent, Ancestor_CssTypes.AlignContent.toString), createCssValueFromArray("align-self", alignSelf, Ancestor_CssTypes.AlignContent.toString), createCssValueFromArray("justify-self", justifySelf, Ancestor_CssTypes.AlignContent.toString), createCssValueFromArray("flex-flow", flexFlow, Ancestor_CssTypes.FlexFlow.toString), createCssValueFromArray("gap", gap, Ancestor_CssTypes.Gap.toString), createCssValueFromArray("padding", p, make), createCssValueFromArray("padding-left", px, make), createCssValueFromArray("padding-right", px, make), createCssValueFromArray("padding-top", py, make), createCssValueFromArray("padding-bottom", py, make), createCssValueFromArray("padding-top", pt, make), createCssValueFromArray("padding-bottom", pb, make), createCssValueFromArray("padding-left", pl, make), createCssValueFromArray("padding-right", pr, make), createCssValueFromArray("margin", m, make), createCssValueFromArray("margin-left", mx, make), createCssValueFromArray("margin-right", mx, make), createCssValueFromArray("margin-top", my, make), createCssValueFromArray("margin-bottom", my, make), createCssValueFromArray("margin-top", mt, make), createCssValueFromArray("margin-bottom", mb, make), createCssValueFromArray("margin-left", ml, make), createCssValueFromArray("margin-right", mr, make), createCssValueFromArray("text-align", textAlign, Ancestor_CssTypes.TextAlign.toString), createCssValueFromArray("font-weight", fontWeight, Ancestor_CssTypes.FontWeight.toString), createCssValueFromArray("font-size", fontSize, Ancestor_CssTypes.Length.toString), createCssValueFromArray("letter-spacing", letterSpacing, Ancestor_CssTypes.Length.toString), createCssValueFromArray("line-height", lineHeight, Ancestor_CssTypes.Length.toString), createCssValueFromArray("width", width, Ancestor_CssTypes.Length.toString), createCssValueFromArray("height", height, Ancestor_CssTypes.Length.toString), createCssValueFromArray("min-width", minW, Ancestor_CssTypes.Length.toString), createCssValueFromArray("min-height", minH, Ancestor_CssTypes.Length.toString), createCssValueFromArray("max-width", maxW, Ancestor_CssTypes.Length.toString), createCssValueFromArray("max-height", maxH, Ancestor_CssTypes.Length.toString), createCssValueFromArray("position", position, Ancestor_CssTypes.Position.toString), createCssValueFromArray("top", top, Ancestor_CssTypes.Length.toString), createCssValueFromArray("bottom", bottom, Ancestor_CssTypes.Length.toString), createCssValueFromArray("left", left, Ancestor_CssTypes.Length.toString), createCssValueFromArray("right", right, Ancestor_CssTypes.Length.toString), createCssValueFromArray("z-index", zIndex, Ancestor_CssTypes.ZIndex.toString), createCssValueFromArray("box-sizing", boxSizing, Ancestor_CssTypes.BoxSizing.toString), createCssValueFromArray("overflow", overflow, Ancestor_CssTypes.Overflow.toString), createCssValueFromArray("overflow-x", overflowX, Ancestor_CssTypes.Overflow.toString), createCssValueFromArray("overflow-y", overflowY, Ancestor_CssTypes.Overflow.toString), createCssValueFromArray("cursor", cursor, Ancestor_CssTypes.Cursor.toString), createCssValueFromArray("visibility", visibility, Ancestor_CssTypes.Visibility.toString), createCssValueFromArray("list-style-type", listStyleType, Ancestor_CssTypes.ListStyleType.toString), createCssValueFromArray("list-style-position", listStylePosition, Ancestor_CssTypes.ListStylePosition.toString), createCssValueFromArray("list-style-image", listStyleImage, Ancestor_CssTypes.ListStyleImage.toString), createCssValueFromArray("list-style", listStyle, Ancestor_CssTypes.ListStyle.toString), createCssValueFromArray("outline-style", outlineStyle, Ancestor_CssTypes.OutlineStyle.toString), createCssValueFromArray("outline", outline, Ancestor_CssTypes.Outline.toString), createCssValueFromArray("text-decoration-style", textDecorationStyle, Ancestor_CssTypes.TextDecorationStyle.toString), createCssValueFromArray("text-decoration-line", textDecorationLine, Ancestor_CssTypes.TextDecorationLine.toString), createCssValueFromArray("text-decoration", textDecoration, Ancestor_CssTypes.TextDecoration.toString), createCssValueFromArray("transform", transform, Ancestor_CssTypes.Transform.toString)].join("");
  };

  var make$2 = function make$2(value, defaultStylesOpt, transform) {
    var defaultStyles = defaultStylesOpt !== undefined ? defaultStylesOpt : "";

    var reducer = function reducer(currentStyles, value) {
      var parsed = Curry._1(Maker.unboxBreakpointValue, value);

      return mediaQuery(currentStyles, value, Curry._1(transform, parsed));
    };

    if (value !== undefined) {
      return Belt_Array.reduce(value.sort(sortBySize), "", reducer);
    } else {
      return defaultStyles;
    }
  };

  var ResponsiveProps = {
    make: make$2
  };
  return {
    Spacing: Spacing,
    Radius: Radius,
    createBreakpointSize: createBreakpointSize,
    mediaQuery: mediaQuery,
    sortBySize: sortBySize,
    mergeStyles: mergeStyles,
    createCssValueFromArray: createCssValueFromArray,
    createResponsiveStyles: createResponsiveStyles,
    ResponsiveProps: ResponsiveProps
  };
}

exports.Make = Make;
/* No side effect */

/***/ })

})
//# sourceMappingURL=main.f960c4a5a34318be0b43.hot-update.js.map